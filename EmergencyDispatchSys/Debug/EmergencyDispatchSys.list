
EmergencyDispatchSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f98  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08009168  08009168  0000a168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009770  08009770  0000b1ac  2**0
                  CONTENTS
  4 .ARM          00000008  08009770  08009770  0000a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009778  08009778  0000b1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009778  08009778  0000a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800977c  0800977c  0000a77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009780  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  080097ec  0000b06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  0800988c  0000b10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005788  200001ac  0800992c  0000b1ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005934  0800992c  0000b934  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000b1ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e536  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003dea  00000000  00000000  00029712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017d8  00000000  00000000  0002d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001281  00000000  00000000  0002ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005bd6  00000000  00000000  0002ff59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bf71  00000000  00000000  00035b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fe9d0  00000000  00000000  00051aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00150470  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f70  00000000  00000000  001504b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  00157424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ac 	.word	0x200001ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009150 	.word	0x08009150

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b0 	.word	0x200001b0
 800020c:	08009150 	.word	0x08009150

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For printf through uart3
int __io_putchar(int ch)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ae:	2201      	movs	r2, #1
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <__io_putchar+0x20>)
 80005b2:	f003 fcab 	bl	8003f0c <HAL_UART_Transmit>
	return ch;
 80005b6:	687b      	ldr	r3, [r7, #4]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000304 	.word	0x20000304

080005c4 <Task_Generator>:

void Task_Generator(void *pvParameters)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b0c6      	sub	sp, #280	@ 0x118
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80005d2:	6018      	str	r0, [r3, #0]
    srand(time(NULL));
 80005d4:	2000      	movs	r0, #0
 80005d6:	f007 ff77 	bl	80084c8 <time>
 80005da:	4602      	mov	r2, r0
 80005dc:	460b      	mov	r3, r1
 80005de:	4613      	mov	r3, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f007 fcf3 	bl	8007fcc <srand>

    for (;;)
    {
        EmergencyEvent_t event;
        event.event_id = rand() % 3 + 1;
 80005e6:	f007 fd1f 	bl	8008028 <rand>
 80005ea:	4601      	mov	r1, r0
 80005ec:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <Task_Generator+0xd8>)
 80005ee:	fb83 3201 	smull	r3, r2, r3, r1
 80005f2:	17cb      	asrs	r3, r1, #31
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	1aca      	subs	r2, r1, r3
 80005fe:	1c53      	adds	r3, r2, #1
 8000600:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

        LogEvent_t log;
        log.event_id = event.event_id;
 8000604:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000608:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800060c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000610:	601a      	str	r2, [r3, #0]
        log.log_type = LOG_CREATE;
 8000612:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000616:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800061a:	2201      	movs	r2, #1
 800061c:	605a      	str	r2, [r3, #4]
        strcpy(log.msg, "[Generator] Created event");
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	3308      	adds	r3, #8
 8000624:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <Task_Generator+0xdc>)
 8000626:	461c      	mov	r4, r3
 8000628:	4615      	mov	r5, r2
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000632:	c403      	stmia	r4!, {r0, r1}
 8000634:	8022      	strh	r2, [r4, #0]

        xQueueSend(xEventQueue, &event, portMAX_DELAY);
 8000636:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <Task_Generator+0xe0>)
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800063e:	2300      	movs	r3, #0
 8000640:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000644:	f004 ffc8 	bl	80055d8 <xQueueGenericSend>
        xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <Task_Generator+0xe4>)
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	f107 0108 	add.w	r1, r7, #8
 8000650:	2300      	movs	r3, #0
 8000652:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000656:	f004 ffbf 	bl	80055d8 <xQueueGenericSend>

        int delay = rand() % MAX_DELAY + MIN_DELAY;
 800065a:	f007 fce5 	bl	8008028 <rand>
 800065e:	4602      	mov	r2, r0
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <Task_Generator+0xe8>)
 8000662:	fb83 1302 	smull	r1, r3, r3, r2
 8000666:	12d9      	asrs	r1, r3, #11
 8000668:	17d3      	asrs	r3, r2, #31
 800066a:	1acb      	subs	r3, r1, r3
 800066c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000670:	fb01 f303 	mul.w	r3, r1, r3
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800067a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        vTaskDelay(pdMS_TO_TICKS(delay));
 800067e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000682:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000686:	fb02 f303 	mul.w	r3, r2, r3
 800068a:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <Task_Generator+0xec>)
 800068c:	fba2 2303 	umull	r2, r3, r2, r3
 8000690:	099b      	lsrs	r3, r3, #6
 8000692:	4618      	mov	r0, r3
 8000694:	f005 fe82 	bl	800639c <vTaskDelay>
    {
 8000698:	bf00      	nop
 800069a:	e7a4      	b.n	80005e6 <Task_Generator+0x22>
 800069c:	55555556 	.word	0x55555556
 80006a0:	08009174 	.word	0x08009174
 80006a4:	20000870 	.word	0x20000870
 80006a8:	20000880 	.word	0x20000880
 80006ac:	68db8bad 	.word	0x68db8bad
 80006b0:	10624dd3 	.word	0x10624dd3

080006b4 <Task_Dispatcher>:
    }

}

void Task_Dispatcher(void *pvParameters)
{
 80006b4:	b5b0      	push	{r4, r5, r7, lr}
 80006b6:	b0c6      	sub	sp, #280	@ 0x118
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80006c2:	6018      	str	r0, [r3, #0]
    EmergencyEvent_t event;

    for (;;)
    {
        if (xQueueReceive(xEventQueue, &event, portMAX_DELAY) == pdPASS)
 80006c4:	4b4b      	ldr	r3, [pc, #300]	@ (80007f4 <Task_Dispatcher+0x140>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80006cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006d0:	4618      	mov	r0, r3
 80006d2:	f005 f92f 	bl	8005934 <xQueueReceive>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d1f3      	bne.n	80006c4 <Task_Dispatcher+0x10>
        {
            LogEvent_t log;
            log.event_id = event.event_id;
 80006dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80006e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006e8:	601a      	str	r2, [r3, #0]

            switch (event.event_id)
 80006ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d041      	beq.n	8000776 <Task_Dispatcher+0xc2>
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	dc60      	bgt.n	80007b8 <Task_Dispatcher+0x104>
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d002      	beq.n	8000700 <Task_Dispatcher+0x4c>
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d01c      	beq.n	8000738 <Task_Dispatcher+0x84>
 80006fe:	e05b      	b.n	80007b8 <Task_Dispatcher+0x104>
            {
            case CODE_PLC:
                xQueueSend(xPoliceQueue, &event, portMAX_DELAY);
 8000700:	4b3d      	ldr	r3, [pc, #244]	@ (80007f8 <Task_Dispatcher+0x144>)
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8000708:	2300      	movs	r3, #0
 800070a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800070e:	f004 ff63 	bl	80055d8 <xQueueGenericSend>
                log.log_type = LOG_SENT;
 8000712:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000716:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800071a:	2202      	movs	r2, #2
 800071c:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Dispatcher] Sent event to police");
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	3308      	adds	r3, #8
 8000724:	4a35      	ldr	r2, [pc, #212]	@ (80007fc <Task_Dispatcher+0x148>)
 8000726:	461c      	mov	r4, r3
 8000728:	4615      	mov	r5, r2
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000732:	682b      	ldr	r3, [r5, #0]
 8000734:	8023      	strh	r3, [r4, #0]
                break;
 8000736:	e052      	b.n	80007de <Task_Dispatcher+0x12a>

            case CODE_AMB:
                xQueueSend(xAmbulanceQueue, &event, portMAX_DELAY);
 8000738:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <Task_Dispatcher+0x14c>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8000740:	2300      	movs	r3, #0
 8000742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000746:	f004 ff47 	bl	80055d8 <xQueueGenericSend>
                log.log_type = LOG_SENT;
 800074a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800074e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000752:	2202      	movs	r2, #2
 8000754:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Dispatcher] Sent event to first aid");
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	3308      	adds	r3, #8
 800075c:	4a29      	ldr	r2, [pc, #164]	@ (8000804 <Task_Dispatcher+0x150>)
 800075e:	461c      	mov	r4, r3
 8000760:	4615      	mov	r5, r2
 8000762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800076e:	6020      	str	r0, [r4, #0]
 8000770:	3404      	adds	r4, #4
 8000772:	7021      	strb	r1, [r4, #0]
                break;
 8000774:	e033      	b.n	80007de <Task_Dispatcher+0x12a>

            case CODE_FIR:
                xQueueSend(xFireDeptQueue, &event, portMAX_DELAY);
 8000776:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <Task_Dispatcher+0x154>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 800077e:	2300      	movs	r3, #0
 8000780:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000784:	f004 ff28 	bl	80055d8 <xQueueGenericSend>
                log.log_type = LOG_SENT;
 8000788:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800078c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000790:	2202      	movs	r2, #2
 8000792:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Dispatcher] Sent event to fire department");
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	3308      	adds	r3, #8
 800079a:	4a1c      	ldr	r2, [pc, #112]	@ (800080c <Task_Dispatcher+0x158>)
 800079c:	461c      	mov	r4, r3
 800079e:	4615      	mov	r5, r2
 80007a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ac:	c403      	stmia	r4!, {r0, r1}
 80007ae:	8022      	strh	r2, [r4, #0]
 80007b0:	3402      	adds	r4, #2
 80007b2:	0c13      	lsrs	r3, r2, #16
 80007b4:	7023      	strb	r3, [r4, #0]
                break;
 80007b6:	e012      	b.n	80007de <Task_Dispatcher+0x12a>

            default:
                log.log_type = LOG_ERR;
 80007b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007c0:	2209      	movs	r2, #9
 80007c2:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Dispatcher] Unknown event type");
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	3308      	adds	r3, #8
 80007ca:	4a11      	ldr	r2, [pc, #68]	@ (8000810 <Task_Dispatcher+0x15c>)
 80007cc:	461c      	mov	r4, r3
 80007ce:	4615      	mov	r5, r2
 80007d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                break;
 80007dc:	bf00      	nop
            }

            xQueueSend(xLogQueue, &log, portMAX_DELAY);
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <Task_Dispatcher+0x160>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	f107 010c 	add.w	r1, r7, #12
 80007e6:	2300      	movs	r3, #0
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007ec:	f004 fef4 	bl	80055d8 <xQueueGenericSend>
        if (xQueueReceive(xEventQueue, &event, portMAX_DELAY) == pdPASS)
 80007f0:	e768      	b.n	80006c4 <Task_Dispatcher+0x10>
 80007f2:	bf00      	nop
 80007f4:	20000870 	.word	0x20000870
 80007f8:	20000874 	.word	0x20000874
 80007fc:	08009190 	.word	0x08009190
 8000800:	20000878 	.word	0x20000878
 8000804:	080091b4 	.word	0x080091b4
 8000808:	2000087c 	.word	0x2000087c
 800080c:	080091dc 	.word	0x080091dc
 8000810:	08009208 	.word	0x08009208
 8000814:	20000880 	.word	0x20000880

08000818 <Task_Police>:
    }

}

void Task_Police(void *pvParameters)
{
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b0c6      	sub	sp, #280	@ 0x118
 800081c:	af00      	add	r7, sp, #0
 800081e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000822:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000826:	6018      	str	r0, [r3, #0]
    EmergencyEvent_t event;

    for(;;)
    {
        if(xQueueReceive(xPoliceQueue, &event, portMAX_DELAY) == pdPASS)
 8000828:	4b64      	ldr	r3, [pc, #400]	@ (80009bc <Task_Police+0x1a4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8000830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000834:	4618      	mov	r0, r3
 8000836:	f005 f87d 	bl	8005934 <xQueueReceive>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d1f3      	bne.n	8000828 <Task_Police+0x10>
        {
            LogEvent_t log;
            log.event_id = event.event_id;
 8000840:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000844:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000848:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800084c:	601a      	str	r2, [r3, #0]
            log.log_type = LOG_PLC_RCV;
 800084e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000852:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000856:	2203      	movs	r2, #3
 8000858:	605a      	str	r2, [r3, #4]
            strcpy(log.msg, "[Police] Received event");
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	3308      	adds	r3, #8
 8000860:	4a57      	ldr	r2, [pc, #348]	@ (80009c0 <Task_Police+0x1a8>)
 8000862:	461c      	mov	r4, r3
 8000864:	4615      	mov	r5, r2
 8000866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800086e:	e884 0003 	stmia.w	r4, {r0, r1}
            xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000872:	4b54      	ldr	r3, [pc, #336]	@ (80009c4 <Task_Police+0x1ac>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	f107 010c 	add.w	r1, r7, #12
 800087a:	2300      	movs	r3, #0
 800087c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000880:	f004 feaa 	bl	80055d8 <xQueueGenericSend>

            if(xSemaphoreTake(xSemPoliceCabs, portMAX_DELAY) == pdPASS)
 8000884:	4b50      	ldr	r3, [pc, #320]	@ (80009c8 <Task_Police+0x1b0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800088c:	4618      	mov	r0, r3
 800088e:	f005 f939 	bl	8005b04 <xQueueSemaphoreTake>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d126      	bne.n	80008e6 <Task_Police+0xce>
            {
                vTaskDelay(pdMS_TO_TICKS(HNDL_DELAY));
 8000898:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800089c:	f005 fd7e 	bl	800639c <vTaskDelay>

                log.log_type = LOG_PLC_HNDL;
 80008a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008a8:	2206      	movs	r2, #6
 80008aa:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Police] Finihed handling event");
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	3308      	adds	r3, #8
 80008b2:	4a46      	ldr	r2, [pc, #280]	@ (80009cc <Task_Police+0x1b4>)
 80008b4:	461c      	mov	r4, r3
 80008b6:	4615      	mov	r5, r2
 80008b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                xQueueSend(xLogQueue, &log, portMAX_DELAY);
 80008c4:	4b3f      	ldr	r3, [pc, #252]	@ (80009c4 <Task_Police+0x1ac>)
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	f107 010c 	add.w	r1, r7, #12
 80008cc:	2300      	movs	r3, #0
 80008ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008d2:	f004 fe81 	bl	80055d8 <xQueueGenericSend>

                xSemaphoreGive(xSemPoliceCabs);
 80008d6:	4b3c      	ldr	r3, [pc, #240]	@ (80009c8 <Task_Police+0x1b0>)
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	f004 fe7a 	bl	80055d8 <xQueueGenericSend>
 80008e4:	e7a0      	b.n	8000828 <Task_Police+0x10>
            }
            else if (xSemaphoreTake(xSemAmbulances, portMAX_DELAY) == pdPASS)
 80008e6:	4b3a      	ldr	r3, [pc, #232]	@ (80009d0 <Task_Police+0x1b8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 f908 	bl	8005b04 <xQueueSemaphoreTake>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d12a      	bne.n	8000950 <Task_Police+0x138>
            {
                vTaskDelay(pdMS_TO_TICKS(HNDL_DELAY));
 80008fa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80008fe:	f005 fd4d 	bl	800639c <vTaskDelay>

                log.log_type = LOG_PLC_HNDL;
 8000902:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000906:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800090a:	2206      	movs	r2, #6
 800090c:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Police] Finihed handling event WITH BORROWED AMBULANCE");
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	3308      	adds	r3, #8
 8000914:	4a2f      	ldr	r2, [pc, #188]	@ (80009d4 <Task_Police+0x1bc>)
 8000916:	461c      	mov	r4, r3
 8000918:	4615      	mov	r5, r2
 800091a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000926:	e895 0003 	ldmia.w	r5, {r0, r1}
 800092a:	e884 0003 	stmia.w	r4, {r0, r1}
                xQueueSend(xLogQueue, &log, portMAX_DELAY);
 800092e:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <Task_Police+0x1ac>)
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	f107 010c 	add.w	r1, r7, #12
 8000936:	2300      	movs	r3, #0
 8000938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800093c:	f004 fe4c 	bl	80055d8 <xQueueGenericSend>

                xSemaphoreGive(xSemAmbulances);
 8000940:	4b23      	ldr	r3, [pc, #140]	@ (80009d0 <Task_Police+0x1b8>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	2300      	movs	r3, #0
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	f004 fe45 	bl	80055d8 <xQueueGenericSend>
 800094e:	e76b      	b.n	8000828 <Task_Police+0x10>
            }
            else if (xSemaphoreTake(xSemFiretrucks, portMAX_DELAY) == pdPASS)
 8000950:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <Task_Police+0x1c0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000958:	4618      	mov	r0, r3
 800095a:	f005 f8d3 	bl	8005b04 <xQueueSemaphoreTake>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	f47f af61 	bne.w	8000828 <Task_Police+0x10>
            {
                vTaskDelay(pdMS_TO_TICKS(HNDL_DELAY));
 8000966:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800096a:	f005 fd17 	bl	800639c <vTaskDelay>

                log.log_type = LOG_PLC_HNDL;
 800096e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000972:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000976:	2206      	movs	r2, #6
 8000978:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Police] Finihed handling event WITH BORROWED FIRETRUCK");
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	3308      	adds	r3, #8
 8000980:	4a16      	ldr	r2, [pc, #88]	@ (80009dc <Task_Police+0x1c4>)
 8000982:	461c      	mov	r4, r3
 8000984:	4615      	mov	r5, r2
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000992:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000996:	e884 0003 	stmia.w	r4, {r0, r1}
                xQueueSend(xLogQueue, &log, portMAX_DELAY);
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <Task_Police+0x1ac>)
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	f107 010c 	add.w	r1, r7, #12
 80009a2:	2300      	movs	r3, #0
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009a8:	f004 fe16 	bl	80055d8 <xQueueGenericSend>

                xSemaphoreGive(xSemFiretrucks);
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <Task_Police+0x1c0>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	2300      	movs	r3, #0
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	f004 fe0f 	bl	80055d8 <xQueueGenericSend>
        if(xQueueReceive(xPoliceQueue, &event, portMAX_DELAY) == pdPASS)
 80009ba:	e735      	b.n	8000828 <Task_Police+0x10>
 80009bc:	20000874 	.word	0x20000874
 80009c0:	08009228 	.word	0x08009228
 80009c4:	20000880 	.word	0x20000880
 80009c8:	20000884 	.word	0x20000884
 80009cc:	08009240 	.word	0x08009240
 80009d0:	20000888 	.word	0x20000888
 80009d4:	08009260 	.word	0x08009260
 80009d8:	2000088c 	.word	0x2000088c
 80009dc:	08009298 	.word	0x08009298

080009e0 <Task_Ambulance>:
        }
    }
}

void Task_Ambulance(void *pvParameters)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b0c6      	sub	sp, #280	@ 0x118
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80009ee:	6018      	str	r0, [r3, #0]
    EmergencyEvent_t event;

    for(;;)
    {
        if(xQueueReceive(xAmbulanceQueue, &event, portMAX_DELAY) == pdPASS)
 80009f0:	4b69      	ldr	r3, [pc, #420]	@ (8000b98 <Task_Ambulance+0x1b8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 ff99 	bl	8005934 <xQueueReceive>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d1f3      	bne.n	80009f0 <Task_Ambulance+0x10>
        {
            LogEvent_t log;
            log.event_id = event.event_id;
 8000a08:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000a0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a14:	601a      	str	r2, [r3, #0]
            log.log_type = LOG_AMB_RCV;
 8000a16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a1e:	2204      	movs	r2, #4
 8000a20:	605a      	str	r2, [r3, #4]
            strcpy(log.msg, "[Ambulance] Received event");
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	3308      	adds	r3, #8
 8000a28:	4a5c      	ldr	r2, [pc, #368]	@ (8000b9c <Task_Ambulance+0x1bc>)
 8000a2a:	461c      	mov	r4, r3
 8000a2c:	4615      	mov	r5, r2
 8000a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a36:	c403      	stmia	r4!, {r0, r1}
 8000a38:	8022      	strh	r2, [r4, #0]
 8000a3a:	3402      	adds	r4, #2
 8000a3c:	0c13      	lsrs	r3, r2, #16
 8000a3e:	7023      	strb	r3, [r4, #0]
            xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000a40:	4b57      	ldr	r3, [pc, #348]	@ (8000ba0 <Task_Ambulance+0x1c0>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	f107 010c 	add.w	r1, r7, #12
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a4e:	f004 fdc3 	bl	80055d8 <xQueueGenericSend>

            if(xSemaphoreTake(xSemAmbulances, portMAX_DELAY) == pdPASS)
 8000a52:	4b54      	ldr	r3, [pc, #336]	@ (8000ba4 <Task_Ambulance+0x1c4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f005 f852 	bl	8005b04 <xQueueSemaphoreTake>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d12a      	bne.n	8000abc <Task_Ambulance+0xdc>
            {
                vTaskDelay(pdMS_TO_TICKS(HNDL_DELAY));
 8000a66:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a6a:	f005 fc97 	bl	800639c <vTaskDelay>

                log.log_type = LOG_AMB_HNDL;
 8000a6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a76:	2207      	movs	r2, #7
 8000a78:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Ambulance] Finihed handling event");
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	3308      	adds	r3, #8
 8000a80:	4a49      	ldr	r2, [pc, #292]	@ (8000ba8 <Task_Ambulance+0x1c8>)
 8000a82:	461c      	mov	r4, r3
 8000a84:	4615      	mov	r5, r2
 8000a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	8022      	strh	r2, [r4, #0]
 8000a94:	3402      	adds	r4, #2
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	7023      	strb	r3, [r4, #0]
                xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000a9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ba0 <Task_Ambulance+0x1c0>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f107 010c 	add.w	r1, r7, #12
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000aa8:	f004 fd96 	bl	80055d8 <xQueueGenericSend>

                xSemaphoreGive(xSemAmbulances);
 8000aac:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba4 <Task_Ambulance+0x1c4>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f004 fd8f 	bl	80055d8 <xQueueGenericSend>
 8000aba:	e799      	b.n	80009f0 <Task_Ambulance+0x10>
            }
            else if (xSemaphoreTake(xSemPoliceCabs, portMAX_DELAY) == pdPASS)
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <Task_Ambulance+0x1cc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 f81d 	bl	8005b04 <xQueueSemaphoreTake>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d12a      	bne.n	8000b26 <Task_Ambulance+0x146>
            {
                vTaskDelay(pdMS_TO_TICKS(HNDL_DELAY));
 8000ad0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ad4:	f005 fc62 	bl	800639c <vTaskDelay>

                log.log_type = LOG_AMB_HNDL;
 8000ad8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000adc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Ambulance] Finihed handling event WITH BORROWED POLICE CAB");
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a31      	ldr	r2, [pc, #196]	@ (8000bb0 <Task_Ambulance+0x1d0>)
 8000aec:	461c      	mov	r4, r3
 8000aee:	4615      	mov	r5, r2
 8000af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000b04:	4b26      	ldr	r3, [pc, #152]	@ (8000ba0 <Task_Ambulance+0x1c0>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	f107 010c 	add.w	r1, r7, #12
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b12:	f004 fd61 	bl	80055d8 <xQueueGenericSend>

                xSemaphoreGive(xSemPoliceCabs);
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <Task_Ambulance+0x1cc>)
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f004 fd5a 	bl	80055d8 <xQueueGenericSend>
 8000b24:	e764      	b.n	80009f0 <Task_Ambulance+0x10>
            }
            else if (xSemaphoreTake(xSemFiretrucks, portMAX_DELAY) == pdPASS)
 8000b26:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <Task_Ambulance+0x1d4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f004 ffe8 	bl	8005b04 <xQueueSemaphoreTake>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	f47f af5a 	bne.w	80009f0 <Task_Ambulance+0x10>
            {
                vTaskDelay(pdMS_TO_TICKS(HNDL_DELAY));
 8000b3c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b40:	f005 fc2c 	bl	800639c <vTaskDelay>

                log.log_type = LOG_AMB_HNDL;
 8000b44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Ambulance] Finihed handling event WITH BORROWED FIRETRUCK");
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	3308      	adds	r3, #8
 8000b56:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <Task_Ambulance+0x1d8>)
 8000b58:	461c      	mov	r4, r3
 8000b5a:	4615      	mov	r5, r2
 8000b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6c:	c403      	stmia	r4!, {r0, r1}
 8000b6e:	8022      	strh	r2, [r4, #0]
 8000b70:	3402      	adds	r4, #2
 8000b72:	0c13      	lsrs	r3, r2, #16
 8000b74:	7023      	strb	r3, [r4, #0]
                xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <Task_Ambulance+0x1c0>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	f107 010c 	add.w	r1, r7, #12
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b84:	f004 fd28 	bl	80055d8 <xQueueGenericSend>

                xSemaphoreGive(xSemFiretrucks);
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <Task_Ambulance+0x1d4>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	f004 fd21 	bl	80055d8 <xQueueGenericSend>
        if(xQueueReceive(xAmbulanceQueue, &event, portMAX_DELAY) == pdPASS)
 8000b96:	e72b      	b.n	80009f0 <Task_Ambulance+0x10>
 8000b98:	20000878 	.word	0x20000878
 8000b9c:	080092d0 	.word	0x080092d0
 8000ba0:	20000880 	.word	0x20000880
 8000ba4:	20000888 	.word	0x20000888
 8000ba8:	080092ec 	.word	0x080092ec
 8000bac:	20000884 	.word	0x20000884
 8000bb0:	08009310 	.word	0x08009310
 8000bb4:	2000088c 	.word	0x2000088c
 8000bb8:	0800934c 	.word	0x0800934c

08000bbc <Task_FireDepartment>:
        }
    }
}

void Task_FireDepartment(void *pvParameters)
{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b0c6      	sub	sp, #280	@ 0x118
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000bca:	6018      	str	r0, [r3, #0]
    EmergencyEvent_t event;

    for(;;)
    {
        if(xQueueReceive(xFireDeptQueue, &event, portMAX_DELAY) == pdPASS)
 8000bcc:	4b69      	ldr	r3, [pc, #420]	@ (8000d74 <Task_FireDepartment+0x1b8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 feab 	bl	8005934 <xQueueReceive>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d1f3      	bne.n	8000bcc <Task_FireDepartment+0x10>
        {
            LogEvent_t log;
            log.event_id = event.event_id;
 8000be4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000be8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bf0:	601a      	str	r2, [r3, #0]
            log.log_type = LOG_FIR_RCV;
 8000bf2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bf6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	605a      	str	r2, [r3, #4]
            strcpy(log.msg, "[Fire Dept] Received event");
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	3308      	adds	r3, #8
 8000c04:	4a5c      	ldr	r2, [pc, #368]	@ (8000d78 <Task_FireDepartment+0x1bc>)
 8000c06:	461c      	mov	r4, r3
 8000c08:	4615      	mov	r5, r2
 8000c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c12:	c403      	stmia	r4!, {r0, r1}
 8000c14:	8022      	strh	r2, [r4, #0]
 8000c16:	3402      	adds	r4, #2
 8000c18:	0c13      	lsrs	r3, r2, #16
 8000c1a:	7023      	strb	r3, [r4, #0]
            xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000c1c:	4b57      	ldr	r3, [pc, #348]	@ (8000d7c <Task_FireDepartment+0x1c0>)
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	f107 010c 	add.w	r1, r7, #12
 8000c24:	2300      	movs	r3, #0
 8000c26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c2a:	f004 fcd5 	bl	80055d8 <xQueueGenericSend>

            if(xSemaphoreTake(xSemFiretrucks, portMAX_DELAY) == pdPASS)
 8000c2e:	4b54      	ldr	r3, [pc, #336]	@ (8000d80 <Task_FireDepartment+0x1c4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 ff64 	bl	8005b04 <xQueueSemaphoreTake>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d12a      	bne.n	8000c98 <Task_FireDepartment+0xdc>
            {
                vTaskDelay(pdMS_TO_TICKS(HNDL_DELAY));
 8000c42:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c46:	f005 fba9 	bl	800639c <vTaskDelay>

                log.log_type = LOG_FIR_HNDL;
 8000c4a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c52:	2208      	movs	r2, #8
 8000c54:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Fire Dept] Finihed handling event");
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	4a49      	ldr	r2, [pc, #292]	@ (8000d84 <Task_FireDepartment+0x1c8>)
 8000c5e:	461c      	mov	r4, r3
 8000c60:	4615      	mov	r5, r2
 8000c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6a:	682b      	ldr	r3, [r5, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	8022      	strh	r2, [r4, #0]
 8000c70:	3402      	adds	r4, #2
 8000c72:	0c1b      	lsrs	r3, r3, #16
 8000c74:	7023      	strb	r3, [r4, #0]
                xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000c76:	4b41      	ldr	r3, [pc, #260]	@ (8000d7c <Task_FireDepartment+0x1c0>)
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f107 010c 	add.w	r1, r7, #12
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c84:	f004 fca8 	bl	80055d8 <xQueueGenericSend>

                xSemaphoreGive(xSemFiretrucks);
 8000c88:	4b3d      	ldr	r3, [pc, #244]	@ (8000d80 <Task_FireDepartment+0x1c4>)
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	f004 fca1 	bl	80055d8 <xQueueGenericSend>
 8000c96:	e799      	b.n	8000bcc <Task_FireDepartment+0x10>
            }
            else if(xSemaphoreTake(xSemAmbulances, portMAX_DELAY) == pdPASS)
 8000c98:	4b3b      	ldr	r3, [pc, #236]	@ (8000d88 <Task_FireDepartment+0x1cc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 ff2f 	bl	8005b04 <xQueueSemaphoreTake>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d12d      	bne.n	8000d08 <Task_FireDepartment+0x14c>
            {
                vTaskDelay(pdMS_TO_TICKS(HNDL_DELAY));
 8000cac:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000cb0:	f005 fb74 	bl	800639c <vTaskDelay>

                log.log_type = LOG_FIR_HNDL;
 8000cb4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cb8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Fire Dept] Finihed handling event WITH BORROWED AMBULANCE");
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	4a31      	ldr	r2, [pc, #196]	@ (8000d8c <Task_FireDepartment+0x1d0>)
 8000cc8:	461c      	mov	r4, r3
 8000cca:	4615      	mov	r5, r2
 8000ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cdc:	c403      	stmia	r4!, {r0, r1}
 8000cde:	8022      	strh	r2, [r4, #0]
 8000ce0:	3402      	adds	r4, #2
 8000ce2:	0c13      	lsrs	r3, r2, #16
 8000ce4:	7023      	strb	r3, [r4, #0]
                xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000ce6:	4b25      	ldr	r3, [pc, #148]	@ (8000d7c <Task_FireDepartment+0x1c0>)
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	f107 010c 	add.w	r1, r7, #12
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cf4:	f004 fc70 	bl	80055d8 <xQueueGenericSend>

                xSemaphoreGive(xSemAmbulances);
 8000cf8:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <Task_FireDepartment+0x1cc>)
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	f004 fc69 	bl	80055d8 <xQueueGenericSend>
 8000d06:	e761      	b.n	8000bcc <Task_FireDepartment+0x10>
            }
            else if (xSemaphoreTake(xSemPoliceCabs, portMAX_DELAY) == pdPASS)
 8000d08:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <Task_FireDepartment+0x1d4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 fef7 	bl	8005b04 <xQueueSemaphoreTake>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	f47f af57 	bne.w	8000bcc <Task_FireDepartment+0x10>
            {
                vTaskDelay(pdMS_TO_TICKS(HNDL_DELAY));
 8000d1e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d22:	f005 fb3b 	bl	800639c <vTaskDelay>

                log.log_type = LOG_FIR_HNDL;
 8000d26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d2e:	2208      	movs	r2, #8
 8000d30:	605a      	str	r2, [r3, #4]
                strcpy(log.msg, "[Fire Dept] Finished handling event WITH BORROWED POLICE CAB");
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	3308      	adds	r3, #8
 8000d38:	4a16      	ldr	r2, [pc, #88]	@ (8000d94 <Task_FireDepartment+0x1d8>)
 8000d3a:	461c      	mov	r4, r3
 8000d3c:	4615      	mov	r5, r2
 8000d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d4e:	c407      	stmia	r4!, {r0, r1, r2}
 8000d50:	7023      	strb	r3, [r4, #0]
                xQueueSend(xLogQueue, &log, portMAX_DELAY);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <Task_FireDepartment+0x1c0>)
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	f107 010c 	add.w	r1, r7, #12
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d60:	f004 fc3a 	bl	80055d8 <xQueueGenericSend>

                xSemaphoreGive(xSemPoliceCabs);
 8000d64:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <Task_FireDepartment+0x1d4>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	2300      	movs	r3, #0
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f004 fc33 	bl	80055d8 <xQueueGenericSend>
        if(xQueueReceive(xFireDeptQueue, &event, portMAX_DELAY) == pdPASS)
 8000d72:	e72b      	b.n	8000bcc <Task_FireDepartment+0x10>
 8000d74:	2000087c 	.word	0x2000087c
 8000d78:	08009388 	.word	0x08009388
 8000d7c:	20000880 	.word	0x20000880
 8000d80:	2000088c 	.word	0x2000088c
 8000d84:	080093a4 	.word	0x080093a4
 8000d88:	20000888 	.word	0x20000888
 8000d8c:	080093c8 	.word	0x080093c8
 8000d90:	20000884 	.word	0x20000884
 8000d94:	08009404 	.word	0x08009404

08000d98 <Task_Logger>:
        }
    }
}

void Task_Logger(void *pvParameters)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0c4      	sub	sp, #272	@ 0x110
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000da2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000da6:	6018      	str	r0, [r3, #0]
    LogEvent_t log;

    for (;;)
    {
        if (xQueueReceive(xLogQueue, &log, portMAX_DELAY) == pdPASS)
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <Task_Logger+0x50>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f107 0108 	add.w	r1, r7, #8
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 fdbd 	bl	8005934 <xQueueReceive>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d1f3      	bne.n	8000da8 <Task_Logger+0x10>
        {
            printf("Event type %d: %s [status: %d]\r\n", log.event_id, log.msg, log.log_type);
 8000dc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000dc8:	6819      	ldr	r1, [r3, #0]
 8000dca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000dd2:	6858      	ldr	r0, [r3, #4]
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	f103 0208 	add.w	r2, r3, #8
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4803      	ldr	r0, [pc, #12]	@ (8000dec <Task_Logger+0x54>)
 8000de0:	f007 fa22 	bl	8008228 <iprintf>
        if (xQueueReceive(xLogQueue, &log, portMAX_DELAY) == pdPASS)
 8000de4:	e7e0      	b.n	8000da8 <Task_Logger+0x10>
 8000de6:	bf00      	nop
 8000de8:	20000880 	.word	0x20000880
 8000dec:	08009444 	.word	0x08009444

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f000 fe88 	bl	8001b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfa:	f000 f93f 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfe:	f000 fa91 	bl	8001324 <MX_GPIO_Init>
  MX_ETH_Init();
 8000e02:	f000 f9a3 	bl	800114c <MX_ETH_Init>
  MX_I2C1_Init();
 8000e06:	f000 f9ef 	bl	80011e8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000e0a:	f000 fa2d 	bl	8001268 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e0e:	f000 fa5b 	bl	80012c8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e12:	f004 f829 	bl	8004e68 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  xSemPoliceCabs = xSemaphoreCreateCounting(N_PCR, N_PCR);
 8000e16:	2103      	movs	r1, #3
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f004 fba4 	bl	8005566 <xQueueCreateCountingSemaphore>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a73      	ldr	r2, [pc, #460]	@ (8000ff0 <main+0x200>)
 8000e22:	6013      	str	r3, [r2, #0]
  xSemAmbulances = xSemaphoreCreateCounting(N_AMB, N_AMB);
 8000e24:	2104      	movs	r1, #4
 8000e26:	2004      	movs	r0, #4
 8000e28:	f004 fb9d 	bl	8005566 <xQueueCreateCountingSemaphore>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a71      	ldr	r2, [pc, #452]	@ (8000ff4 <main+0x204>)
 8000e30:	6013      	str	r3, [r2, #0]
  xSemFiretrucks = xSemaphoreCreateCounting(N_FTR, N_FTR);
 8000e32:	2102      	movs	r1, #2
 8000e34:	2002      	movs	r0, #2
 8000e36:	f004 fb96 	bl	8005566 <xQueueCreateCountingSemaphore>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a6e      	ldr	r2, [pc, #440]	@ (8000ff8 <main+0x208>)
 8000e3e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xEventQueue = xQueueCreate(QUEUE_SIZE, sizeof(EmergencyEvent_t));
 8000e40:	2200      	movs	r2, #0
 8000e42:	2104      	movs	r1, #4
 8000e44:	200a      	movs	r0, #10
 8000e46:	f004 fb28 	bl	800549a <xQueueGenericCreate>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8000ffc <main+0x20c>)
 8000e4e:	6013      	str	r3, [r2, #0]
      if (xEventQueue == NULL)
 8000e50:	4b6a      	ldr	r3, [pc, #424]	@ (8000ffc <main+0x20c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d104      	bne.n	8000e62 <main+0x72>
      {
          printf("Failed to create event queue\r\n");
 8000e58:	4869      	ldr	r0, [pc, #420]	@ (8001000 <main+0x210>)
 8000e5a:	f007 fa4d 	bl	80082f8 <puts>
          while (1);
 8000e5e:	bf00      	nop
 8000e60:	e7fd      	b.n	8000e5e <main+0x6e>
      }

      xPoliceQueue = xQueueCreate(QUEUE_SIZE, sizeof(EmergencyEvent_t));
 8000e62:	2200      	movs	r2, #0
 8000e64:	2104      	movs	r1, #4
 8000e66:	200a      	movs	r0, #10
 8000e68:	f004 fb17 	bl	800549a <xQueueGenericCreate>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a65      	ldr	r2, [pc, #404]	@ (8001004 <main+0x214>)
 8000e70:	6013      	str	r3, [r2, #0]
      if (xPoliceQueue == NULL)
 8000e72:	4b64      	ldr	r3, [pc, #400]	@ (8001004 <main+0x214>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d104      	bne.n	8000e84 <main+0x94>
      {
    	  printf("Failed to create police queue\r\n");
 8000e7a:	4863      	ldr	r0, [pc, #396]	@ (8001008 <main+0x218>)
 8000e7c:	f007 fa3c 	bl	80082f8 <puts>
    	  while (1);
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <main+0x90>
      }

      xAmbulanceQueue = xQueueCreate(QUEUE_SIZE, sizeof(EmergencyEvent_t));
 8000e84:	2200      	movs	r2, #0
 8000e86:	2104      	movs	r1, #4
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f004 fb06 	bl	800549a <xQueueGenericCreate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a5e      	ldr	r2, [pc, #376]	@ (800100c <main+0x21c>)
 8000e92:	6013      	str	r3, [r2, #0]
      if (xAmbulanceQueue == NULL)
 8000e94:	4b5d      	ldr	r3, [pc, #372]	@ (800100c <main+0x21c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d104      	bne.n	8000ea6 <main+0xb6>
      {
    	  printf("Failed to create ambulance queue\r\n");
 8000e9c:	485c      	ldr	r0, [pc, #368]	@ (8001010 <main+0x220>)
 8000e9e:	f007 fa2b 	bl	80082f8 <puts>
    	  while (1);
 8000ea2:	bf00      	nop
 8000ea4:	e7fd      	b.n	8000ea2 <main+0xb2>
      }

      xFireDeptQueue = xQueueCreate(QUEUE_SIZE, sizeof(EmergencyEvent_t));
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	200a      	movs	r0, #10
 8000eac:	f004 faf5 	bl	800549a <xQueueGenericCreate>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4a58      	ldr	r2, [pc, #352]	@ (8001014 <main+0x224>)
 8000eb4:	6013      	str	r3, [r2, #0]
      if (xFireDeptQueue == NULL)
 8000eb6:	4b57      	ldr	r3, [pc, #348]	@ (8001014 <main+0x224>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d104      	bne.n	8000ec8 <main+0xd8>
      {
    	  printf("Failed to create fire department queue\r\n");
 8000ebe:	4856      	ldr	r0, [pc, #344]	@ (8001018 <main+0x228>)
 8000ec0:	f007 fa1a 	bl	80082f8 <puts>
    	  while (1);
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <main+0xd4>
      }

      xLogQueue = xQueueCreate(QUEUE_SIZE, sizeof(LogEvent_t));
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8000ece:	200a      	movs	r0, #10
 8000ed0:	f004 fae3 	bl	800549a <xQueueGenericCreate>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a51      	ldr	r2, [pc, #324]	@ (800101c <main+0x22c>)
 8000ed8:	6013      	str	r3, [r2, #0]
      if (xLogQueue == NULL)
 8000eda:	4b50      	ldr	r3, [pc, #320]	@ (800101c <main+0x22c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d104      	bne.n	8000eec <main+0xfc>
      {
    	  printf("Failed to create log queue\r\n");
 8000ee2:	484f      	ldr	r0, [pc, #316]	@ (8001020 <main+0x230>)
 8000ee4:	f007 fa08 	bl	80082f8 <puts>
    	  while (1);
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <main+0xf8>
      }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000eec:	4a4d      	ldr	r2, [pc, #308]	@ (8001024 <main+0x234>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	484d      	ldr	r0, [pc, #308]	@ (8001028 <main+0x238>)
 8000ef2:	f004 f823 	bl	8004f3c <osThreadNew>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800102c <main+0x23c>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  if(xTaskCreate(Task_Generator, "Generator", configMINIMAL_STACK_SIZE, NULL, PR_GEN, NULL) != pdPASS)
 8000efc:	2300      	movs	r3, #0
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	2320      	movs	r3, #32
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2300      	movs	r3, #0
 8000f06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f0a:	4949      	ldr	r1, [pc, #292]	@ (8001030 <main+0x240>)
 8000f0c:	4849      	ldr	r0, [pc, #292]	@ (8001034 <main+0x244>)
 8000f0e:	f005 f8fd 	bl	800610c <xTaskCreate>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d004      	beq.n	8000f22 <main+0x132>
  {
	  printf("Failed to create Generator task\r\n");
 8000f18:	4847      	ldr	r0, [pc, #284]	@ (8001038 <main+0x248>)
 8000f1a:	f007 f9ed 	bl	80082f8 <puts>
	  while (1);
 8000f1e:	bf00      	nop
 8000f20:	e7fd      	b.n	8000f1e <main+0x12e>
  }

  if(xTaskCreate(Task_Dispatcher, "Dispatcher", configMINIMAL_STACK_SIZE, NULL, PR_DIS, NULL) != pdPASS)
 8000f22:	2300      	movs	r3, #0
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	2320      	movs	r3, #32
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f30:	4942      	ldr	r1, [pc, #264]	@ (800103c <main+0x24c>)
 8000f32:	4843      	ldr	r0, [pc, #268]	@ (8001040 <main+0x250>)
 8000f34:	f005 f8ea 	bl	800610c <xTaskCreate>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d004      	beq.n	8000f48 <main+0x158>
  {
  	  printf("Failed to create Dispatcher task\r\n");
 8000f3e:	4841      	ldr	r0, [pc, #260]	@ (8001044 <main+0x254>)
 8000f40:	f007 f9da 	bl	80082f8 <puts>
  	  while (1);
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <main+0x154>
  }

  if(xTaskCreate(Task_Police, "Police", configMINIMAL_STACK_SIZE, NULL, PR_PLC, NULL) != pdPASS)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	2318      	movs	r3, #24
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f56:	493c      	ldr	r1, [pc, #240]	@ (8001048 <main+0x258>)
 8000f58:	483c      	ldr	r0, [pc, #240]	@ (800104c <main+0x25c>)
 8000f5a:	f005 f8d7 	bl	800610c <xTaskCreate>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d004      	beq.n	8000f6e <main+0x17e>
    {
    	  printf("Failed to create Police task\r\n");
 8000f64:	483a      	ldr	r0, [pc, #232]	@ (8001050 <main+0x260>)
 8000f66:	f007 f9c7 	bl	80082f8 <puts>
    	  while (1);
 8000f6a:	bf00      	nop
 8000f6c:	e7fd      	b.n	8000f6a <main+0x17a>
    }

  if(xTaskCreate(Task_Ambulance, "Ambulance", configMINIMAL_STACK_SIZE, NULL, PR_AMB, NULL) != pdPASS)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	2318      	movs	r3, #24
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f7c:	4935      	ldr	r1, [pc, #212]	@ (8001054 <main+0x264>)
 8000f7e:	4836      	ldr	r0, [pc, #216]	@ (8001058 <main+0x268>)
 8000f80:	f005 f8c4 	bl	800610c <xTaskCreate>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d004      	beq.n	8000f94 <main+0x1a4>
    {
    	  printf("Failed to create Ambulance task\r\n");
 8000f8a:	4834      	ldr	r0, [pc, #208]	@ (800105c <main+0x26c>)
 8000f8c:	f007 f9b4 	bl	80082f8 <puts>
    	  while (1);
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <main+0x1a0>
    }

  if(xTaskCreate(Task_FireDepartment, "Fire Department", configMINIMAL_STACK_SIZE, NULL, PR_FIR, NULL) != pdPASS)
 8000f94:	2300      	movs	r3, #0
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	2318      	movs	r3, #24
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fa2:	492f      	ldr	r1, [pc, #188]	@ (8001060 <main+0x270>)
 8000fa4:	482f      	ldr	r0, [pc, #188]	@ (8001064 <main+0x274>)
 8000fa6:	f005 f8b1 	bl	800610c <xTaskCreate>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d004      	beq.n	8000fba <main+0x1ca>
    {
    	  printf("Failed to create Fire Department task\r\n");
 8000fb0:	482d      	ldr	r0, [pc, #180]	@ (8001068 <main+0x278>)
 8000fb2:	f007 f9a1 	bl	80082f8 <puts>
    	  while (1);
 8000fb6:	bf00      	nop
 8000fb8:	e7fd      	b.n	8000fb6 <main+0x1c6>
    }

  if(xTaskCreate(Task_Logger, "Logger", configMINIMAL_STACK_SIZE, NULL, PR_LOG, NULL) != pdPASS)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc8:	4928      	ldr	r1, [pc, #160]	@ (800106c <main+0x27c>)
 8000fca:	4829      	ldr	r0, [pc, #164]	@ (8001070 <main+0x280>)
 8000fcc:	f005 f89e 	bl	800610c <xTaskCreate>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d004      	beq.n	8000fe0 <main+0x1f0>
    {
    	  printf("Failed to create Logger task\r\n");
 8000fd6:	4827      	ldr	r0, [pc, #156]	@ (8001074 <main+0x284>)
 8000fd8:	f007 f98e 	bl	80082f8 <puts>
    	  while (1);
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <main+0x1ec>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fe0:	f003 ff76 	bl	8004ed0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Scheduler failed \r\n");
 8000fe4:	4824      	ldr	r0, [pc, #144]	@ (8001078 <main+0x288>)
 8000fe6:	f007 f987 	bl	80082f8 <puts>
  while (1)
 8000fea:	bf00      	nop
 8000fec:	e7fd      	b.n	8000fea <main+0x1fa>
 8000fee:	bf00      	nop
 8000ff0:	20000884 	.word	0x20000884
 8000ff4:	20000888 	.word	0x20000888
 8000ff8:	2000088c 	.word	0x2000088c
 8000ffc:	20000870 	.word	0x20000870
 8001000:	08009468 	.word	0x08009468
 8001004:	20000874 	.word	0x20000874
 8001008:	08009488 	.word	0x08009488
 800100c:	20000878 	.word	0x20000878
 8001010:	080094a8 	.word	0x080094a8
 8001014:	2000087c 	.word	0x2000087c
 8001018:	080094cc 	.word	0x080094cc
 800101c:	20000880 	.word	0x20000880
 8001020:	080094f4 	.word	0x080094f4
 8001024:	08009654 	.word	0x08009654
 8001028:	08001469 	.word	0x08001469
 800102c:	2000086c 	.word	0x2000086c
 8001030:	08009510 	.word	0x08009510
 8001034:	080005c5 	.word	0x080005c5
 8001038:	0800951c 	.word	0x0800951c
 800103c:	08009540 	.word	0x08009540
 8001040:	080006b5 	.word	0x080006b5
 8001044:	0800954c 	.word	0x0800954c
 8001048:	08009570 	.word	0x08009570
 800104c:	08000819 	.word	0x08000819
 8001050:	08009578 	.word	0x08009578
 8001054:	08009598 	.word	0x08009598
 8001058:	080009e1 	.word	0x080009e1
 800105c:	080095a4 	.word	0x080095a4
 8001060:	080095c8 	.word	0x080095c8
 8001064:	08000bbd 	.word	0x08000bbd
 8001068:	080095d8 	.word	0x080095d8
 800106c:	08009600 	.word	0x08009600
 8001070:	08000d99 	.word	0x08000d99
 8001074:	08009608 	.word	0x08009608
 8001078:	08009628 	.word	0x08009628

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	@ 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	@ 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f007 fa14 	bl	80084b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010a0:	f001 fe1c 	bl	8002cdc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <SystemClock_Config+0xc8>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	4a26      	ldr	r2, [pc, #152]	@ (8001144 <SystemClock_Config+0xc8>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b0:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <SystemClock_Config+0xc8>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010bc:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <SystemClock_Config+0xcc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010c4:	4a20      	ldr	r2, [pc, #128]	@ (8001148 <SystemClock_Config+0xcc>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <SystemClock_Config+0xcc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d8:	2301      	movs	r3, #1
 80010da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	2302      	movs	r3, #2
 80010e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ec:	2304      	movs	r3, #4
 80010ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010f0:	2348      	movs	r3, #72	@ 0x48
 80010f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010f8:	2303      	movs	r3, #3
 80010fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fdfb 	bl	8002cfc <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800110c:	f000 f9b4 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2102      	movs	r1, #2
 800112c:	4618      	mov	r0, r3
 800112e:	f002 f889 	bl	8003244 <HAL_RCC_ClockConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001138:	f000 f99e 	bl	8001478 <Error_Handler>
  }
}
 800113c:	bf00      	nop
 800113e:	3750      	adds	r7, #80	@ 0x50
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <MX_ETH_Init+0x84>)
 8001152:	4a20      	ldr	r2, [pc, #128]	@ (80011d4 <MX_ETH_Init+0x88>)
 8001154:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001156:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <MX_ETH_Init+0x8c>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <MX_ETH_Init+0x8c>)
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001162:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_ETH_Init+0x8c>)
 8001164:	22e1      	movs	r2, #225	@ 0xe1
 8001166:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <MX_ETH_Init+0x8c>)
 800116a:	2200      	movs	r2, #0
 800116c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800116e:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_ETH_Init+0x8c>)
 8001170:	2200      	movs	r2, #0
 8001172:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <MX_ETH_Init+0x8c>)
 8001176:	2200      	movs	r2, #0
 8001178:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <MX_ETH_Init+0x84>)
 800117c:	4a16      	ldr	r2, [pc, #88]	@ (80011d8 <MX_ETH_Init+0x8c>)
 800117e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <MX_ETH_Init+0x84>)
 8001182:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001186:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_ETH_Init+0x84>)
 800118a:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <MX_ETH_Init+0x90>)
 800118c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <MX_ETH_Init+0x84>)
 8001190:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <MX_ETH_Init+0x94>)
 8001192:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_ETH_Init+0x84>)
 8001196:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800119a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <MX_ETH_Init+0x84>)
 800119e:	f000 fe1b 	bl	8001dd8 <HAL_ETH_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80011a8:	f000 f966 	bl	8001478 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011ac:	2238      	movs	r2, #56	@ 0x38
 80011ae:	2100      	movs	r1, #0
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <MX_ETH_Init+0x98>)
 80011b2:	f007 f981 	bl	80084b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_ETH_Init+0x98>)
 80011b8:	2221      	movs	r2, #33	@ 0x21
 80011ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_ETH_Init+0x98>)
 80011be:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80011c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <MX_ETH_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000200 	.word	0x20000200
 80011d4:	40028000 	.word	0x40028000
 80011d8:	20000890 	.word	0x20000890
 80011dc:	2000010c 	.word	0x2000010c
 80011e0:	2000006c 	.word	0x2000006c
 80011e4:	200001c8 	.word	0x200001c8

080011e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_I2C1_Init+0x74>)
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <MX_I2C1_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_I2C1_Init+0x74>)
 80011f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <MX_I2C1_Init+0x7c>)
 80011f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_I2C1_Init+0x74>)
 8001200:	2201      	movs	r2, #1
 8001202:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001222:	480e      	ldr	r0, [pc, #56]	@ (800125c <MX_I2C1_Init+0x74>)
 8001224:	f001 faec 	bl	8002800 <HAL_I2C_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800122e:	f000 f923 	bl	8001478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4809      	ldr	r0, [pc, #36]	@ (800125c <MX_I2C1_Init+0x74>)
 8001236:	f001 fb7f 	bl	8002938 <HAL_I2CEx_ConfigAnalogFilter>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001240:	f000 f91a 	bl	8001478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_I2C1_Init+0x74>)
 8001248:	f001 fbc1 	bl	80029ce <HAL_I2CEx_ConfigDigitalFilter>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001252:	f000 f911 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200002b0 	.word	0x200002b0
 8001260:	40005400 	.word	0x40005400
 8001264:	00808cd2 	.word	0x00808cd2

08001268 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 800126e:	4a15      	ldr	r2, [pc, #84]	@ (80012c4 <MX_USART3_UART_Init+0x5c>)
 8001270:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_USART3_UART_Init+0x58>)
 80012ac:	f002 fde0 	bl	8003e70 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012b6:	f000 f8df 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000304 	.word	0x20000304
 80012c4:	40004800 	.word	0x40004800

080012c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012d4:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d6:	2206      	movs	r2, #6
 80012d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012dc:	2202      	movs	r2, #2
 80012de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001300:	2201      	movs	r2, #1
 8001302:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130c:	f001 fbab 	bl	8002a66 <HAL_PCD_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 f8af 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000038c 	.word	0x2000038c

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	@ 0x30
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b47      	ldr	r3, [pc, #284]	@ (8001458 <MX_GPIO_Init+0x134>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a46      	ldr	r2, [pc, #280]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b44      	ldr	r3, [pc, #272]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	4b41      	ldr	r3, [pc, #260]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a40      	ldr	r2, [pc, #256]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b3e      	ldr	r3, [pc, #248]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <MX_GPIO_Init+0x134>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a3a      	ldr	r2, [pc, #232]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b38      	ldr	r3, [pc, #224]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a34      	ldr	r2, [pc, #208]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <MX_GPIO_Init+0x134>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <MX_GPIO_Init+0x134>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a2e      	ldr	r2, [pc, #184]	@ (8001458 <MX_GPIO_Init+0x134>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <MX_GPIO_Init+0x134>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013b2:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <MX_GPIO_Init+0x134>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a28      	ldr	r2, [pc, #160]	@ (8001458 <MX_GPIO_Init+0x134>)
 80013b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <MX_GPIO_Init+0x134>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80013d0:	4822      	ldr	r0, [pc, #136]	@ (800145c <MX_GPIO_Init+0x138>)
 80013d2:	f001 f9fb 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2140      	movs	r1, #64	@ 0x40
 80013da:	4821      	ldr	r0, [pc, #132]	@ (8001460 <MX_GPIO_Init+0x13c>)
 80013dc:	f001 f9f6 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	481b      	ldr	r0, [pc, #108]	@ (8001464 <MX_GPIO_Init+0x140>)
 80013f8:	f001 f83c 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013fc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4811      	ldr	r0, [pc, #68]	@ (800145c <MX_GPIO_Init+0x138>)
 8001416:	f001 f82d 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800141a:	2340      	movs	r3, #64	@ 0x40
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	480b      	ldr	r0, [pc, #44]	@ (8001460 <MX_GPIO_Init+0x13c>)
 8001432:	f001 f81f 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001436:	2380      	movs	r3, #128	@ 0x80
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_GPIO_Init+0x13c>)
 800144a:	f001 f813 	bl	8002474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800144e:	bf00      	nop
 8001450:	3730      	adds	r7, #48	@ 0x30
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400
 8001460:	40021800 	.word	0x40021800
 8001464:	40020800 	.word	0x40020800

08001468 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f003 fe09 	bl	8005088 <osDelay>
 8001476:	e7fb      	b.n	8001470 <StartDefaultTask+0x8>

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <HAL_MspInit+0x4c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	4a10      	ldr	r2, [pc, #64]	@ (80014d0 <HAL_MspInit+0x4c>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	@ 0x40
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	210f      	movs	r1, #15
 80014be:	f06f 0001 	mvn.w	r0, #1
 80014c2:	f000 fc60 	bl	8001d86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	@ 0x38
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a4e      	ldr	r2, [pc, #312]	@ (800162c <HAL_ETH_MspInit+0x158>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	f040 8096 	bne.w	8001624 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 80014fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001502:	6313      	str	r3, [r2, #48]	@ 0x30
 8001504:	4b4a      	ldr	r3, [pc, #296]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150c:	623b      	str	r3, [r7, #32]
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	4b47      	ldr	r3, [pc, #284]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a46      	ldr	r2, [pc, #280]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001516:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b44      	ldr	r3, [pc, #272]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4b41      	ldr	r3, [pc, #260]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152c:	4a40      	ldr	r2, [pc, #256]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 800152e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001532:	6313      	str	r3, [r2, #48]	@ 0x30
 8001534:	4b3e      	ldr	r3, [pc, #248]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001540:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	4a3a      	ldr	r2, [pc, #232]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6313      	str	r3, [r2, #48]	@ 0x30
 800154c:	4b38      	ldr	r3, [pc, #224]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	4b35      	ldr	r3, [pc, #212]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	4a34      	ldr	r2, [pc, #208]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6313      	str	r3, [r2, #48]	@ 0x30
 8001564:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b2f      	ldr	r3, [pc, #188]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	4a2e      	ldr	r2, [pc, #184]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	6313      	str	r3, [r2, #48]	@ 0x30
 800157c:	4b2c      	ldr	r3, [pc, #176]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 800158e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001592:	6313      	str	r3, [r2, #48]	@ 0x30
 8001594:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <HAL_ETH_MspInit+0x15c>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015a0:	2332      	movs	r3, #50	@ 0x32
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b0:	230b      	movs	r3, #11
 80015b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	481e      	ldr	r0, [pc, #120]	@ (8001634 <HAL_ETH_MspInit+0x160>)
 80015bc:	f000 ff5a 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015c0:	2386      	movs	r3, #134	@ 0x86
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015d0:	230b      	movs	r3, #11
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4817      	ldr	r0, [pc, #92]	@ (8001638 <HAL_ETH_MspInit+0x164>)
 80015dc:	f000 ff4a 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f2:	230b      	movs	r3, #11
 80015f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	480f      	ldr	r0, [pc, #60]	@ (800163c <HAL_ETH_MspInit+0x168>)
 80015fe:	f000 ff39 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001602:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001614:	230b      	movs	r3, #11
 8001616:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	4808      	ldr	r0, [pc, #32]	@ (8001640 <HAL_ETH_MspInit+0x16c>)
 8001620:	f000 ff28 	bl	8002474 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001624:	bf00      	nop
 8001626:	3738      	adds	r7, #56	@ 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40028000 	.word	0x40028000
 8001630:	40023800 	.word	0x40023800
 8001634:	40020800 	.word	0x40020800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400
 8001640:	40021800 	.word	0x40021800

08001644 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0aa      	sub	sp, #168	@ 0xa8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	2284      	movs	r2, #132	@ 0x84
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f006 ff27 	bl	80084b8 <memset>
  if(hi2c->Instance==I2C1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a22      	ldr	r2, [pc, #136]	@ (80016f8 <HAL_I2C_MspInit+0xb4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d13c      	bne.n	80016ee <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001674:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001678:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800167a:	2300      	movs	r3, #0
 800167c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4618      	mov	r0, r3
 8001684:	f002 f804 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800168e:	f7ff fef3 	bl	8001478 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <HAL_I2C_MspInit+0xb8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <HAL_I2C_MspInit+0xb8>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <HAL_I2C_MspInit+0xb8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c4:	2304      	movs	r3, #4
 80016c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80016ce:	4619      	mov	r1, r3
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <HAL_I2C_MspInit+0xbc>)
 80016d2:	f000 fecf 	bl	8002474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <HAL_I2C_MspInit+0xb8>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <HAL_I2C_MspInit+0xb8>)
 80016dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_I2C_MspInit+0xb8>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016ee:	bf00      	nop
 80016f0:	37a8      	adds	r7, #168	@ 0xa8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40005400 	.word	0x40005400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020400 	.word	0x40020400

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0aa      	sub	sp, #168	@ 0xa8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2284      	movs	r2, #132	@ 0x84
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f006 fec7 	bl	80084b8 <memset>
  if(huart->Instance==USART3)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <HAL_UART_MspInit+0xb4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d13c      	bne.n	80017ae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001738:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800173a:	2300      	movs	r3, #0
 800173c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4618      	mov	r0, r3
 8001744:	f001 ffa4 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800174e:	f7ff fe93 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001752:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <HAL_UART_MspInit+0xb8>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	4a19      	ldr	r2, [pc, #100]	@ (80017bc <HAL_UART_MspInit+0xb8>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800175c:	6413      	str	r3, [r2, #64]	@ 0x40
 800175e:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <HAL_UART_MspInit+0xb8>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <HAL_UART_MspInit+0xb8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a13      	ldr	r2, [pc, #76]	@ (80017bc <HAL_UART_MspInit+0xb8>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <HAL_UART_MspInit+0xb8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001782:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800179c:	2307      	movs	r3, #7
 800179e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <HAL_UART_MspInit+0xbc>)
 80017aa:	f000 fe63 	bl	8002474 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80017ae:	bf00      	nop
 80017b0:	37a8      	adds	r7, #168	@ 0xa8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40004800 	.word	0x40004800
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020c00 	.word	0x40020c00

080017c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0ac      	sub	sp, #176	@ 0xb0
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017dc:	f107 0318 	add.w	r3, r7, #24
 80017e0:	2284      	movs	r2, #132	@ 0x84
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f006 fe67 	bl	80084b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f2:	d159      	bne.n	80018a8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80017f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001800:	f107 0318 	add.w	r3, r7, #24
 8001804:	4618      	mov	r0, r3
 8001806:	f001 ff43 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001810:	f7ff fe32 	bl	8001478 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <HAL_PCD_MspInit+0xec>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	4a25      	ldr	r2, [pc, #148]	@ (80018b0 <HAL_PCD_MspInit+0xec>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001820:	4b23      	ldr	r3, [pc, #140]	@ (80018b0 <HAL_PCD_MspInit+0xec>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800182c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001846:	230a      	movs	r3, #10
 8001848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001850:	4619      	mov	r1, r3
 8001852:	4818      	ldr	r0, [pc, #96]	@ (80018b4 <HAL_PCD_MspInit+0xf0>)
 8001854:	f000 fe0e 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800185c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001870:	4619      	mov	r1, r3
 8001872:	4810      	ldr	r0, [pc, #64]	@ (80018b4 <HAL_PCD_MspInit+0xf0>)
 8001874:	f000 fdfe 	bl	8002474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001878:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_PCD_MspInit+0xec>)
 800187a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187c:	4a0c      	ldr	r2, [pc, #48]	@ (80018b0 <HAL_PCD_MspInit+0xec>)
 800187e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001882:	6353      	str	r3, [r2, #52]	@ 0x34
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_PCD_MspInit+0xec>)
 8001886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <HAL_PCD_MspInit+0xec>)
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	4a06      	ldr	r2, [pc, #24]	@ (80018b0 <HAL_PCD_MspInit+0xec>)
 8001896:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189a:	6453      	str	r3, [r2, #68]	@ 0x44
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <HAL_PCD_MspInit+0xec>)
 800189e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80018a8:	bf00      	nop
 80018aa:	37b0      	adds	r7, #176	@ 0xb0
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <NMI_Handler+0x4>

080018c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <MemManage_Handler+0x4>

080018d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <UsageFault_Handler+0x4>

080018e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f2:	f000 f947 	bl	8001b84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018f6:	f005 f9ed 	bl	8006cd4 <xTaskGetSchedulerState>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d001      	beq.n	8001904 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001900:	f006 f8e2 	bl	8007ac8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001922:	f006 fe45 	bl	80085b0 <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
  return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
  while (1) {}    /* Make sure we hang here */
 800194a:	bf00      	nop
 800194c:	e7fd      	b.n	800194a <_exit+0x12>

0800194e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e00a      	b.n	8001976 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001960:	f3af 8000 	nop.w
 8001964:	4601      	mov	r1, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbf0      	blt.n	8001960 <_read+0x12>
  }

  return len;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e009      	b.n	80019ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdfc 	bl	80005a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbf1      	blt.n	800199a <_write+0x12>
  }
  return len;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_close>:

int _close(int file)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_isatty>:

int _isatty(int file)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f006 fdaa 	bl	80085b0 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20050000 	.word	0x20050000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	20000898 	.word	0x20000898
 8001a90:	20005938 	.word	0x20005938

08001a94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001abc:	f7ff ffea 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	@ (8001af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f006 fd69 	bl	80085bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aea:	f7ff f981 	bl	8000df0 <main>
  bx  lr    
 8001aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001af0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001afc:	08009780 	.word	0x08009780
  ldr r2, =_sbss
 8001b00:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001b04:	20005934 	.word	0x20005934

08001b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC_IRQHandler>

08001b0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0e:	2003      	movs	r0, #3
 8001b10:	f000 f92e 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b14:	200f      	movs	r0, #15
 8001b16:	f000 f805 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1a:	f7ff fcb3 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f93b 	bl	8001dbe <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b60:	f000 f911 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	@ (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	2000089c 	.word	0x2000089c

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	@ (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000089c 	.word	0x2000089c

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x40>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x40>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00
 8001c50:	05fa0000 	.word	0x05fa0000

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	@ (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	@ (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	@ 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	@ 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff47 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff5c 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8e 	bl	8001cc4 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffb0 	bl	8001d2c <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e086      	b.n	8001ef8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2223      	movs	r2, #35	@ 0x23
 8001df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fb69 	bl	80014d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	4b3f      	ldr	r3, [pc, #252]	@ (8001f00 <HAL_ETH_Init+0x128>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	4a3e      	ldr	r2, [pc, #248]	@ (8001f00 <HAL_ETH_Init+0x128>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f00 <HAL_ETH_Init+0x128>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f04 <HAL_ETH_Init+0x12c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a39      	ldr	r2, [pc, #228]	@ (8001f04 <HAL_ETH_Init+0x12c>)
 8001e20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e24:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e26:	4b37      	ldr	r3, [pc, #220]	@ (8001f04 <HAL_ETH_Init+0x12c>)
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4935      	ldr	r1, [pc, #212]	@ (8001f04 <HAL_ETH_Init+0x12c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001e34:	4b33      	ldr	r3, [pc, #204]	@ (8001f04 <HAL_ETH_Init+0x12c>)
 8001e36:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e50:	f7ff feac 	bl	8001bac <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e56:	e011      	b.n	8001e7c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e58:	f7ff fea8 	bl	8001bac <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e66:	d909      	bls.n	8001e7c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	22e0      	movs	r2, #224	@ 0xe0
 8001e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e03d      	b.n	8001ef8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e4      	bne.n	8001e58 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f97a 	bl	8002188 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fa25 	bl	80022e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fa7b 	bl	8002396 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f9e3 	bl	8002274 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_ETH_Init+0x130>)
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001ee2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	00020060 	.word	0x00020060

08001f0c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4b53      	ldr	r3, [pc, #332]	@ (8002070 <ETH_SetMACConfig+0x164>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	7b9b      	ldrb	r3, [r3, #14]
 8001f2a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	7c12      	ldrb	r2, [r2, #16]
 8001f30:	2a00      	cmp	r2, #0
 8001f32:	d102      	bne.n	8001f3a <ETH_SetMACConfig+0x2e>
 8001f34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f38:	e000      	b.n	8001f3c <ETH_SetMACConfig+0x30>
 8001f3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	7c52      	ldrb	r2, [r2, #17]
 8001f42:	2a00      	cmp	r2, #0
 8001f44:	d102      	bne.n	8001f4c <ETH_SetMACConfig+0x40>
 8001f46:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f4a:	e000      	b.n	8001f4e <ETH_SetMACConfig+0x42>
 8001f4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f4e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	7fdb      	ldrb	r3, [r3, #31]
 8001f5a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f5c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	7f92      	ldrb	r2, [r2, #30]
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d102      	bne.n	8001f72 <ETH_SetMACConfig+0x66>
 8001f6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f70:	e000      	b.n	8001f74 <ETH_SetMACConfig+0x68>
 8001f72:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	7f1b      	ldrb	r3, [r3, #28]
 8001f7a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f7c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	791b      	ldrb	r3, [r3, #4]
 8001f88:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	d102      	bne.n	8001f9c <ETH_SetMACConfig+0x90>
 8001f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f9a:	e000      	b.n	8001f9e <ETH_SetMACConfig+0x92>
 8001f9c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	7bdb      	ldrb	r3, [r3, #15]
 8001fa4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fa6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fb4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff fdf8 	bl	8001bc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001fea:	4013      	ands	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001ffa:	2a00      	cmp	r2, #0
 8001ffc:	d101      	bne.n	8002002 <ETH_SetMACConfig+0xf6>
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	e000      	b.n	8002004 <ETH_SetMACConfig+0xf8>
 8002002:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002004:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800200a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002012:	2a01      	cmp	r2, #1
 8002014:	d101      	bne.n	800201a <ETH_SetMACConfig+0x10e>
 8002016:	2208      	movs	r2, #8
 8002018:	e000      	b.n	800201c <ETH_SetMACConfig+0x110>
 800201a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800201c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002024:	2a01      	cmp	r2, #1
 8002026:	d101      	bne.n	800202c <ETH_SetMACConfig+0x120>
 8002028:	2204      	movs	r2, #4
 800202a:	e000      	b.n	800202e <ETH_SetMACConfig+0x122>
 800202c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800202e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002036:	2a01      	cmp	r2, #1
 8002038:	d101      	bne.n	800203e <ETH_SetMACConfig+0x132>
 800203a:	2202      	movs	r2, #2
 800203c:	e000      	b.n	8002040 <ETH_SetMACConfig+0x134>
 800203e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002040:	4313      	orrs	r3, r2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002058:	2001      	movs	r0, #1
 800205a:	f7ff fdb3 	bl	8001bc4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	619a      	str	r2, [r3, #24]
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	fd20810f 	.word	0xfd20810f

08002074 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4b3d      	ldr	r3, [pc, #244]	@ (8002184 <ETH_SetDMAConfig+0x110>)
 800208e:	4013      	ands	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	7b1b      	ldrb	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <ETH_SetDMAConfig+0x2c>
 800209a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800209e:	e000      	b.n	80020a2 <ETH_SetDMAConfig+0x2e>
 80020a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	7b5b      	ldrb	r3, [r3, #13]
 80020a6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020a8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	7f52      	ldrb	r2, [r2, #29]
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d102      	bne.n	80020b8 <ETH_SetDMAConfig+0x44>
 80020b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020b6:	e000      	b.n	80020ba <ETH_SetDMAConfig+0x46>
 80020b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	7b9b      	ldrb	r3, [r3, #14]
 80020c0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020c2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	7f1b      	ldrb	r3, [r3, #28]
 80020ce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	7f9b      	ldrb	r3, [r3, #30]
 80020d6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020d8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020e6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020e8:	4313      	orrs	r3, r2
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f8:	461a      	mov	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff fd5a 	bl	8001bc4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002118:	461a      	mov	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	791b      	ldrb	r3, [r3, #4]
 8002122:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002128:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800212e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002134:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800213c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800213e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002146:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800214c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800215a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002168:	2001      	movs	r0, #1
 800216a:	f7ff fd2b 	bl	8001bc4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	f8de3f23 	.word	0xf8de3f23

08002188 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0a6      	sub	sp, #152	@ 0x98
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002196:	2301      	movs	r3, #1
 8002198:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800219c:	2300      	movs	r3, #0
 800219e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021ca:	2300      	movs	r3, #0
 80021cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80021f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002202:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fe7f 	bl	8001f0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800220e:	2301      	movs	r3, #1
 8002210:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002212:	2301      	movs	r3, #1
 8002214:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002216:	2301      	movs	r3, #1
 8002218:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800221c:	2301      	movs	r3, #1
 800221e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002230:	2300      	movs	r3, #0
 8002232:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800223a:	2301      	movs	r3, #1
 800223c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800223e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002242:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002244:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002248:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800224a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800224e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002256:	2300      	movs	r3, #0
 8002258:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800225e:	f107 0308 	add.w	r3, r7, #8
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff05 	bl	8002074 <ETH_SetDMAConfig>
}
 800226a:	bf00      	nop
 800226c:	3798      	adds	r7, #152	@ 0x98
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3305      	adds	r3, #5
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	3204      	adds	r2, #4
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <ETH_MACAddressConfig+0x68>)
 8002296:	4413      	add	r3, r2
 8002298:	461a      	mov	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3303      	adds	r3, #3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	061a      	lsls	r2, r3, #24
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3302      	adds	r3, #2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3301      	adds	r3, #1
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	4313      	orrs	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <ETH_MACAddressConfig+0x6c>)
 80022c6:	4413      	add	r3, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6013      	str	r3, [r2, #0]
}
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40028040 	.word	0x40028040
 80022e0:	40028044 	.word	0x40028044

080022e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e03e      	b.n	8002370 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68d9      	ldr	r1, [r3, #12]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2200      	movs	r2, #0
 800231a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	3206      	adds	r2, #6
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d80c      	bhi.n	8002354 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68d9      	ldr	r1, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	461a      	mov	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	e004      	b.n	800235e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3301      	adds	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d9bd      	bls.n	80022f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002388:	611a      	str	r2, [r3, #16]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e048      	b.n	8002436 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6919      	ldr	r1, [r3, #16]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80023e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	3212      	adds	r2, #18
 8002402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d80c      	bhi.n	8002426 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6919      	ldr	r1, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	461a      	mov	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60da      	str	r2, [r3, #12]
 8002424:	e004      	b.n	8002430 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3301      	adds	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d9b3      	bls.n	80023a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002466:	60da      	str	r2, [r3, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e175      	b.n	8002780 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002494:	2201      	movs	r2, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	f040 8164 	bne.w	800277a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d005      	beq.n	80024ca <HAL_GPIO_Init+0x56>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d130      	bne.n	800252c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 0201 	and.w	r2, r3, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b03      	cmp	r3, #3
 8002536:	d017      	beq.n	8002568 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d123      	bne.n	80025bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	69b9      	ldr	r1, [r7, #24]
 80025b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0203 	and.w	r2, r3, #3
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80be 	beq.w	800277a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	4b66      	ldr	r3, [pc, #408]	@ (8002798 <HAL_GPIO_Init+0x324>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	4a65      	ldr	r2, [pc, #404]	@ (8002798 <HAL_GPIO_Init+0x324>)
 8002604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002608:	6453      	str	r3, [r2, #68]	@ 0x44
 800260a:	4b63      	ldr	r3, [pc, #396]	@ (8002798 <HAL_GPIO_Init+0x324>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002616:	4a61      	ldr	r2, [pc, #388]	@ (800279c <HAL_GPIO_Init+0x328>)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	220f      	movs	r2, #15
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a58      	ldr	r2, [pc, #352]	@ (80027a0 <HAL_GPIO_Init+0x32c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d037      	beq.n	80026b2 <HAL_GPIO_Init+0x23e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a57      	ldr	r2, [pc, #348]	@ (80027a4 <HAL_GPIO_Init+0x330>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d031      	beq.n	80026ae <HAL_GPIO_Init+0x23a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a56      	ldr	r2, [pc, #344]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d02b      	beq.n	80026aa <HAL_GPIO_Init+0x236>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a55      	ldr	r2, [pc, #340]	@ (80027ac <HAL_GPIO_Init+0x338>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d025      	beq.n	80026a6 <HAL_GPIO_Init+0x232>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a54      	ldr	r2, [pc, #336]	@ (80027b0 <HAL_GPIO_Init+0x33c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01f      	beq.n	80026a2 <HAL_GPIO_Init+0x22e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a53      	ldr	r2, [pc, #332]	@ (80027b4 <HAL_GPIO_Init+0x340>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d019      	beq.n	800269e <HAL_GPIO_Init+0x22a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a52      	ldr	r2, [pc, #328]	@ (80027b8 <HAL_GPIO_Init+0x344>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0x226>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a51      	ldr	r2, [pc, #324]	@ (80027bc <HAL_GPIO_Init+0x348>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00d      	beq.n	8002696 <HAL_GPIO_Init+0x222>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a50      	ldr	r2, [pc, #320]	@ (80027c0 <HAL_GPIO_Init+0x34c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x21e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4f      	ldr	r2, [pc, #316]	@ (80027c4 <HAL_GPIO_Init+0x350>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_GPIO_Init+0x21a>
 800268a:	2309      	movs	r3, #9
 800268c:	e012      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 800268e:	230a      	movs	r3, #10
 8002690:	e010      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 8002692:	2308      	movs	r3, #8
 8002694:	e00e      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 8002696:	2307      	movs	r3, #7
 8002698:	e00c      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 800269a:	2306      	movs	r3, #6
 800269c:	e00a      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 800269e:	2305      	movs	r3, #5
 80026a0:	e008      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026a2:	2304      	movs	r3, #4
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026a6:	2303      	movs	r3, #3
 80026a8:	e004      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e002      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_GPIO_Init+0x240>
 80026b2:	2300      	movs	r3, #0
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f002 0203 	and.w	r2, r2, #3
 80026ba:	0092      	lsls	r2, r2, #2
 80026bc:	4093      	lsls	r3, r2
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026c4:	4935      	ldr	r1, [pc, #212]	@ (800279c <HAL_GPIO_Init+0x328>)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d2:	4b3d      	ldr	r3, [pc, #244]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f6:	4a34      	ldr	r2, [pc, #208]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026fc:	4b32      	ldr	r3, [pc, #200]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002720:	4a29      	ldr	r2, [pc, #164]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002726:	4b28      	ldr	r3, [pc, #160]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274a:	4a1f      	ldr	r2, [pc, #124]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002774:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <HAL_GPIO_Init+0x354>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3301      	adds	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b0f      	cmp	r3, #15
 8002784:	f67f ae86 	bls.w	8002494 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3724      	adds	r7, #36	@ 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40021400 	.word	0x40021400
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40021c00 	.word	0x40021c00
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40022400 	.word	0x40022400
 80027c8:	40013c00 	.word	0x40013c00

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e08b      	b.n	800292a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe ff0c 	bl	8001644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	@ 0x24
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d107      	bne.n	800287a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	e006      	b.n	8002888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d108      	bne.n	80028a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	e007      	b.n	80028b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002934 <HAL_I2C_Init+0x134>)
 80028be:	430b      	orrs	r3, r1
 80028c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69d9      	ldr	r1, [r3, #28]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1a      	ldr	r2, [r3, #32]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	02008000 	.word	0x02008000

08002938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b20      	cmp	r3, #32
 800294c:	d138      	bne.n	80029c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002958:	2302      	movs	r3, #2
 800295a:	e032      	b.n	80029c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	@ 0x24
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800298a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d139      	bne.n	8002a58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e033      	b.n	8002a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2224      	movs	r2, #36	@ 0x24
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af02      	add	r7, sp, #8
 8002a6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e108      	b.n	8002c8a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe fe96 	bl	80017c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa6:	d102      	bne.n	8002aae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 ff3c 	bl	8004930 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7c1a      	ldrb	r2, [r3, #16]
 8002ac0:	f88d 2000 	strb.w	r2, [sp]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac8:	f001 fed8 	bl	800487c <USB_CoreInit>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0d5      	b.n	8002c8a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 ff34 	bl	8004952 <USB_SetCurrentMode>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0c6      	b.n	8002c8a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e04a      	b.n	8002b98 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3315      	adds	r3, #21
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3314      	adds	r3, #20
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	b298      	uxth	r0, r3
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	332e      	adds	r3, #46	@ 0x2e
 8002b3e:	4602      	mov	r2, r0
 8002b40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	3318      	adds	r3, #24
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	331c      	adds	r3, #28
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3320      	adds	r3, #32
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3324      	adds	r3, #36	@ 0x24
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	3301      	adds	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	791b      	ldrb	r3, [r3, #4]
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3af      	bcc.n	8002b02 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	e044      	b.n	8002c32 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	791b      	ldrb	r3, [r3, #4]
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d3b5      	bcc.n	8002ba8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7c1a      	ldrb	r2, [r3, #16]
 8002c44:	f88d 2000 	strb.w	r2, [sp]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4c:	f001 fece 	bl	80049ec <USB_DevInit>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e013      	b.n	8002c8a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7b1b      	ldrb	r3, [r3, #12]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d102      	bne.n	8002c7e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f80b 	bl	8002c94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 f889 	bl	8004d9a <USB_DevDisconnect>

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cc2:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	10000003 	.word	0x10000003

08002cdc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40007000 	.word	0x40007000

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e291      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8087 	beq.w	8002e2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d20:	4b96      	ldr	r3, [pc, #600]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d00c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2c:	4b93      	ldr	r3, [pc, #588]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d112      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62>
 8002d38:	4b90      	ldr	r3, [pc, #576]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d46:	4b8d      	ldr	r3, [pc, #564]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d06c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x130>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d168      	bne.n	8002e2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e26b      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x7a>
 8002d68:	4b84      	ldr	r3, [pc, #528]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a83      	ldr	r2, [pc, #524]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e02e      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x9c>
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7e      	ldr	r2, [pc, #504]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002da2:	4b76      	ldr	r3, [pc, #472]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a75      	ldr	r2, [pc, #468]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b73      	ldr	r3, [pc, #460]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a72      	ldr	r2, [pc, #456]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd8>
 8002dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fee6 	bl	8001bac <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe fee2 	bl	8001bac <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	@ 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e21f      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b61      	ldr	r3, [pc, #388]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe fed2 	bl	8001bac <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fece 	bl	8001bac <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e20b      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	4b57      	ldr	r3, [pc, #348]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x110>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d069      	beq.n	8002f0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3a:	4b50      	ldr	r3, [pc, #320]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b4d      	ldr	r3, [pc, #308]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x190>
 8002e52:	4b4a      	ldr	r3, [pc, #296]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b47      	ldr	r3, [pc, #284]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x17a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1df      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b41      	ldr	r3, [pc, #260]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	493d      	ldr	r1, [pc, #244]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e040      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a38      	ldr	r2, [pc, #224]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fe84 	bl	8001bac <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fe80 	bl	8001bac <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1bd      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	4b30      	ldr	r3, [pc, #192]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4929      	ldr	r1, [pc, #164]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
 8002eda:	e018      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002edc:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a26      	ldr	r2, [pc, #152]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fe60 	bl	8001bac <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fe5c 	bl	8001bac <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e199      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d038      	beq.n	8002f8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f26:	4a15      	ldr	r2, [pc, #84]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fe3d 	bl	8001bac <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f36:	f7fe fe39 	bl	8001bac <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e176      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f48:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x23a>
 8002f54:	e01a      	b.n	8002f8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f56:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5a:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe fe23 	bl	8001bac <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fe fe1f 	bl	8001bac <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d903      	bls.n	8002f80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e15c      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
 8002f7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f80:	4b91      	ldr	r3, [pc, #580]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ee      	bne.n	8002f6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80a4 	beq.w	80030e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b8b      	ldr	r3, [pc, #556]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b88      	ldr	r3, [pc, #544]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	4a87      	ldr	r2, [pc, #540]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb2:	4b85      	ldr	r3, [pc, #532]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc2:	4b82      	ldr	r3, [pc, #520]	@ (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fce:	4b7f      	ldr	r3, [pc, #508]	@ (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a7e      	ldr	r2, [pc, #504]	@ (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7fe fde7 	bl	8001bac <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fe fde3 	bl	8001bac <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	@ 0x64
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e120      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff4:	4b75      	ldr	r3, [pc, #468]	@ (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x31a>
 8003008:	4b6f      	ldr	r3, [pc, #444]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	4a6e      	ldr	r2, [pc, #440]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70
 8003014:	e02d      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x33c>
 800301e:	4b6a      	ldr	r3, [pc, #424]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	4a69      	ldr	r2, [pc, #420]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	@ 0x70
 800302a:	4b67      	ldr	r3, [pc, #412]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	4a66      	ldr	r2, [pc, #408]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	@ 0x70
 8003036:	e01c      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b05      	cmp	r3, #5
 800303e:	d10c      	bne.n	800305a <HAL_RCC_OscConfig+0x35e>
 8003040:	4b61      	ldr	r3, [pc, #388]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003044:	4a60      	ldr	r2, [pc, #384]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	6713      	str	r3, [r2, #112]	@ 0x70
 800304c:	4b5e      	ldr	r3, [pc, #376]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	4a5d      	ldr	r2, [pc, #372]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	@ 0x70
 8003058:	e00b      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
 800305a:	4b5b      	ldr	r3, [pc, #364]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305e:	4a5a      	ldr	r2, [pc, #360]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	@ 0x70
 8003066:	4b58      	ldr	r3, [pc, #352]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	4a57      	ldr	r2, [pc, #348]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d015      	beq.n	80030a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fe fd97 	bl	8001bac <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fe fd93 	bl	8001bac <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0ce      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	4b4b      	ldr	r3, [pc, #300]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ee      	beq.n	8003082 <HAL_RCC_OscConfig+0x386>
 80030a4:	e014      	b.n	80030d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fe fd81 	bl	8001bac <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7fe fd7d 	bl	8001bac <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c4:	4b40      	ldr	r3, [pc, #256]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ee      	bne.n	80030ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d105      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d6:	4b3c      	ldr	r3, [pc, #240]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	4a3b      	ldr	r2, [pc, #236]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80a4 	beq.w	8003234 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ec:	4b36      	ldr	r3, [pc, #216]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d06b      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d149      	bne.n	8003194 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003100:	4b31      	ldr	r3, [pc, #196]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a30      	ldr	r2, [pc, #192]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800310a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fd4e 	bl	8001bac <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fd4a 	bl	8001bac <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e087      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	4313      	orrs	r3, r2
 8003158:	4a1b      	ldr	r2, [pc, #108]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800315a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800315e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003160:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a18      	ldr	r2, [pc, #96]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fd1e 	bl	8001bac <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe fd1a 	bl	8001bac <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e057      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x478>
 8003192:	e04f      	b.n	8003234 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0b      	ldr	r2, [pc, #44]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800319a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fd04 	bl	8001bac <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fe fd00 	bl	8001bac <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e03d      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	4b03      	ldr	r3, [pc, #12]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4ac>
 80031c6:	e035      	b.n	8003234 <HAL_RCC_OscConfig+0x538>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x544>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d028      	beq.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d121      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d11a      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003200:	4013      	ands	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003206:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003208:	4293      	cmp	r3, r2
 800320a:	d111      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0d0      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b6a      	ldr	r3, [pc, #424]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b67      	ldr	r3, [pc, #412]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 020f 	bic.w	r2, r3, #15
 8003272:	4965      	ldr	r1, [pc, #404]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d040      	beq.n	8003368 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d115      	bne.n	8003326 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	4b41      	ldr	r3, [pc, #260]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e073      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003316:	4b3d      	ldr	r3, [pc, #244]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06b      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b39      	ldr	r3, [pc, #228]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4936      	ldr	r1, [pc, #216]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7fe fc38 	bl	8001bac <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fe fc34 	bl	8001bac <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e053      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b2d      	ldr	r3, [pc, #180]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b27      	ldr	r3, [pc, #156]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d210      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b24      	ldr	r3, [pc, #144]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	4922      	ldr	r1, [pc, #136]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f821 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	@ (8003410 <HAL_RCC_ClockConfig+0x1cc>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1d0>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1d4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fb94 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	08009678 	.word	0x08009678
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b094      	sub	sp, #80	@ 0x50
 8003422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	647b      	str	r3, [r7, #68]	@ 0x44
 8003428:	2300      	movs	r3, #0
 800342a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800342c:	2300      	movs	r3, #0
 800342e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003434:	4b79      	ldr	r3, [pc, #484]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d00d      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x40>
 8003440:	2b08      	cmp	r3, #8
 8003442:	f200 80e1 	bhi.w	8003608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x34>
 800344a:	2b04      	cmp	r3, #4
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x3a>
 800344e:	e0db      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b73      	ldr	r3, [pc, #460]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x204>)
 8003452:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003454:	e0db      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003456:	4b73      	ldr	r3, [pc, #460]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x208>)
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800345a:	e0d8      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800345c:	4b6f      	ldr	r3, [pc, #444]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003464:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003466:	4b6d      	ldr	r3, [pc, #436]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d063      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b6a      	ldr	r3, [pc, #424]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800347c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003484:	633b      	str	r3, [r7, #48]	@ 0x30
 8003486:	2300      	movs	r3, #0
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34
 800348a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800348e:	4622      	mov	r2, r4
 8003490:	462b      	mov	r3, r5
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f04f 0100 	mov.w	r1, #0
 800349a:	0159      	lsls	r1, r3, #5
 800349c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a0:	0150      	lsls	r0, r2, #5
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4621      	mov	r1, r4
 80034a8:	1a51      	subs	r1, r2, r1
 80034aa:	6139      	str	r1, [r7, #16]
 80034ac:	4629      	mov	r1, r5
 80034ae:	eb63 0301 	sbc.w	r3, r3, r1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c0:	4659      	mov	r1, fp
 80034c2:	018b      	lsls	r3, r1, #6
 80034c4:	4651      	mov	r1, sl
 80034c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ca:	4651      	mov	r1, sl
 80034cc:	018a      	lsls	r2, r1, #6
 80034ce:	4651      	mov	r1, sl
 80034d0:	ebb2 0801 	subs.w	r8, r2, r1
 80034d4:	4659      	mov	r1, fp
 80034d6:	eb63 0901 	sbc.w	r9, r3, r1
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ee:	4690      	mov	r8, r2
 80034f0:	4699      	mov	r9, r3
 80034f2:	4623      	mov	r3, r4
 80034f4:	eb18 0303 	adds.w	r3, r8, r3
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	462b      	mov	r3, r5
 80034fc:	eb49 0303 	adc.w	r3, r9, r3
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800350e:	4629      	mov	r1, r5
 8003510:	024b      	lsls	r3, r1, #9
 8003512:	4621      	mov	r1, r4
 8003514:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003518:	4621      	mov	r1, r4
 800351a:	024a      	lsls	r2, r1, #9
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003522:	2200      	movs	r2, #0
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800352c:	f7fc fec0 	bl	80002b0 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4613      	mov	r3, r2
 8003536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003538:	e058      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353a:	4b38      	ldr	r3, [pc, #224]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	2200      	movs	r2, #0
 8003542:	4618      	mov	r0, r3
 8003544:	4611      	mov	r1, r2
 8003546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	f04f 0000 	mov.w	r0, #0
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	0159      	lsls	r1, r3, #5
 8003562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003566:	0150      	lsls	r0, r2, #5
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4641      	mov	r1, r8
 800356e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003572:	4649      	mov	r1, r9
 8003574:	eb63 0b01 	sbc.w	fp, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800358c:	ebb2 040a 	subs.w	r4, r2, sl
 8003590:	eb63 050b 	sbc.w	r5, r3, fp
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	00eb      	lsls	r3, r5, #3
 800359e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a2:	00e2      	lsls	r2, r4, #3
 80035a4:	4614      	mov	r4, r2
 80035a6:	461d      	mov	r5, r3
 80035a8:	4643      	mov	r3, r8
 80035aa:	18e3      	adds	r3, r4, r3
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	464b      	mov	r3, r9
 80035b0:	eb45 0303 	adc.w	r3, r5, r3
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035c2:	4629      	mov	r1, r5
 80035c4:	028b      	lsls	r3, r1, #10
 80035c6:	4621      	mov	r1, r4
 80035c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035cc:	4621      	mov	r1, r4
 80035ce:	028a      	lsls	r2, r1, #10
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d6:	2200      	movs	r2, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	61fa      	str	r2, [r7, #28]
 80035dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e0:	f7fc fe66 	bl	80002b0 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4613      	mov	r3, r2
 80035ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	3301      	adds	r3, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x204>)
 800360a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800360c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003610:	4618      	mov	r0, r3
 8003612:	3750      	adds	r7, #80	@ 0x50
 8003614:	46bd      	mov	sp, r7
 8003616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
 8003620:	00f42400 	.word	0x00f42400
 8003624:	007a1200 	.word	0x007a1200

08003628 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	@ (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003644:	f7ff fff0 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0a9b      	lsrs	r3, r3, #10
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	@ (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	08009688 	.word	0x08009688

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800366c:	f7ff ffdc 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0b5b      	lsrs	r3, r3, #13
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	@ (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	08009688 	.word	0x08009688

08003690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d012      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036b8:	4b69      	ldr	r3, [pc, #420]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a68      	ldr	r2, [pc, #416]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036c2:	6093      	str	r3, [r2, #8]
 80036c4:	4b66      	ldr	r3, [pc, #408]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036cc:	4964      	ldr	r1, [pc, #400]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d017      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	4959      	ldr	r1, [pc, #356]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d017      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003726:	4b4e      	ldr	r3, [pc, #312]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800372c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	494a      	ldr	r1, [pc, #296]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003762:	2301      	movs	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 808b 	beq.w	800388a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003774:	4b3a      	ldr	r3, [pc, #232]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	4a39      	ldr	r2, [pc, #228]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003780:	4b37      	ldr	r3, [pc, #220]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800378c:	4b35      	ldr	r3, [pc, #212]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a34      	ldr	r2, [pc, #208]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003798:	f7fe fa08 	bl	8001bac <HAL_GetTick>
 800379c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fe fa04 	bl	8001bac <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	@ 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e357      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037be:	4b28      	ldr	r3, [pc, #160]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d035      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d02e      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037dc:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037fe:	4a18      	ldr	r2, [pc, #96]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003804:	4b16      	ldr	r3, [pc, #88]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d114      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe f9cc 	bl	8001bac <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe f9c8 	bl	8001bac <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e319      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0ee      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003846:	d111      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003854:	4b04      	ldr	r3, [pc, #16]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003856:	400b      	ands	r3, r1
 8003858:	4901      	ldr	r1, [pc, #4]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
 800385e:	e00b      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003860:	40023800 	.word	0x40023800
 8003864:	40007000 	.word	0x40007000
 8003868:	0ffffcff 	.word	0x0ffffcff
 800386c:	4baa      	ldr	r3, [pc, #680]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4aa9      	ldr	r2, [pc, #676]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003872:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003876:	6093      	str	r3, [r2, #8]
 8003878:	4ba7      	ldr	r3, [pc, #668]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003884:	49a4      	ldr	r1, [pc, #656]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003886:	4313      	orrs	r3, r2
 8003888:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003896:	4ba0      	ldr	r3, [pc, #640]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800389c:	4a9e      	ldr	r2, [pc, #632]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80038a6:	4b9c      	ldr	r3, [pc, #624]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	4999      	ldr	r1, [pc, #612]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c4:	4b94      	ldr	r3, [pc, #592]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038d2:	4991      	ldr	r1, [pc, #580]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038e6:	4b8c      	ldr	r3, [pc, #560]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038f4:	4988      	ldr	r1, [pc, #544]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003908:	4b83      	ldr	r3, [pc, #524]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003916:	4980      	ldr	r1, [pc, #512]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800392a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003930:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003938:	4977      	ldr	r1, [pc, #476]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800394c:	4b72      	ldr	r3, [pc, #456]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003952:	f023 0203 	bic.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	496f      	ldr	r1, [pc, #444]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800396e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003974:	f023 020c 	bic.w	r2, r3, #12
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397c:	4966      	ldr	r1, [pc, #408]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003990:	4b61      	ldr	r3, [pc, #388]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003996:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399e:	495e      	ldr	r1, [pc, #376]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039b2:	4b59      	ldr	r3, [pc, #356]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c0:	4955      	ldr	r1, [pc, #340]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039d4:	4b50      	ldr	r3, [pc, #320]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e2:	494d      	ldr	r1, [pc, #308]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039f6:	4b48      	ldr	r3, [pc, #288]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	4944      	ldr	r1, [pc, #272]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a18:	4b3f      	ldr	r3, [pc, #252]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	493c      	ldr	r1, [pc, #240]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a3a:	4b37      	ldr	r3, [pc, #220]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a48:	4933      	ldr	r1, [pc, #204]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a6a:	492b      	ldr	r1, [pc, #172]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d011      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a7e:	4b26      	ldr	r3, [pc, #152]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a84:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a8c:	4922      	ldr	r1, [pc, #136]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003abe:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003acc:	4912      	ldr	r1, [pc, #72]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003af0:	4909      	ldr	r1, [pc, #36]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d006      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80d9 	beq.w	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b0c:	4b02      	ldr	r3, [pc, #8]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a01      	ldr	r2, [pc, #4]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b16:	e001      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1e:	f7fe f845 	bl	8001bac <HAL_GetTick>
 8003b22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b26:	f7fe f841 	bl	8001bac <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b64      	cmp	r3, #100	@ 0x64
 8003b32:	d901      	bls.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e194      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b38:	4b6c      	ldr	r3, [pc, #432]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d021      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d11d      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b58:	4b64      	ldr	r3, [pc, #400]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b66:	4b61      	ldr	r3, [pc, #388]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b6c:	0e1b      	lsrs	r3, r3, #24
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	019a      	lsls	r2, r3, #6
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	041b      	lsls	r3, r3, #16
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	061b      	lsls	r3, r3, #24
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	071b      	lsls	r3, r3, #28
 8003b8c:	4957      	ldr	r1, [pc, #348]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02e      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bbe:	d129      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc6:	0c1b      	lsrs	r3, r3, #16
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bce:	4b47      	ldr	r3, [pc, #284]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bd4:	0f1b      	lsrs	r3, r3, #28
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	019a      	lsls	r2, r3, #6
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	041b      	lsls	r3, r3, #16
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	071b      	lsls	r3, r3, #28
 8003bf4:	493d      	ldr	r1, [pc, #244]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c02:	f023 021f 	bic.w	r2, r3, #31
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	4937      	ldr	r1, [pc, #220]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01d      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c20:	4b32      	ldr	r3, [pc, #200]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c26:	0e1b      	lsrs	r3, r3, #24
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c34:	0f1b      	lsrs	r3, r3, #28
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	019a      	lsls	r2, r3, #6
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	071b      	lsls	r3, r3, #28
 8003c54:	4925      	ldr	r1, [pc, #148]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d011      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	019a      	lsls	r2, r3, #6
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	071b      	lsls	r3, r3, #28
 8003c84:	4919      	ldr	r1, [pc, #100]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c8c:	4b17      	ldr	r3, [pc, #92]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a16      	ldr	r2, [pc, #88]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c98:	f7fd ff88 	bl	8001bac <HAL_GetTick>
 8003c9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ca0:	f7fd ff84 	bl	8001bac <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	@ 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0d7      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 80cd 	bne.w	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cc6:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a08      	ldr	r2, [pc, #32]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd2:	f7fd ff6b 	bl	8001bac <HAL_GetTick>
 8003cd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cda:	f7fd ff67 	bl	8001bac <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b64      	cmp	r3, #100	@ 0x64
 8003ce6:	d903      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0ba      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003cec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cfc:	d0ed      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02e      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d12a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d26:	4b51      	ldr	r3, [pc, #324]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d34:	4b4d      	ldr	r3, [pc, #308]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3a:	0f1b      	lsrs	r3, r3, #28
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	019a      	lsls	r2, r3, #6
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	431a      	orrs	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	071b      	lsls	r3, r3, #28
 8003d5a:	4944      	ldr	r1, [pc, #272]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d62:	4b42      	ldr	r3, [pc, #264]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d68:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d70:	3b01      	subs	r3, #1
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	493d      	ldr	r1, [pc, #244]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d022      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d90:	d11d      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d92:	4b36      	ldr	r3, [pc, #216]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d98:	0e1b      	lsrs	r3, r3, #24
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003da0:	4b32      	ldr	r3, [pc, #200]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	0f1b      	lsrs	r3, r3, #28
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	019a      	lsls	r2, r3, #6
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	061b      	lsls	r3, r3, #24
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	071b      	lsls	r3, r3, #28
 8003dc6:	4929      	ldr	r1, [pc, #164]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d028      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dda:	4b24      	ldr	r3, [pc, #144]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	0e1b      	lsrs	r3, r3, #24
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003de8:	4b20      	ldr	r3, [pc, #128]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dee:	0c1b      	lsrs	r3, r3, #16
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	019a      	lsls	r2, r3, #6
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	431a      	orrs	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	071b      	lsls	r3, r3, #28
 8003e0e:	4917      	ldr	r1, [pc, #92]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e16:	4b15      	ldr	r3, [pc, #84]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	4911      	ldr	r1, [pc, #68]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0e      	ldr	r2, [pc, #56]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e38:	f7fd feb8 	bl	8001bac <HAL_GetTick>
 8003e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e40:	f7fd feb4 	bl	8001bac <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	@ 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e007      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e52:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e5e:	d1ef      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800

08003e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e040      	b.n	8003f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fc36 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	@ 0x24
 8003e9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fb16 	bl	80044e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f8af 	bl	8004020 <UART_SetConfig>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e01b      	b.n	8003f04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fb95 	bl	800462c <UART_CheckIdleState>
 8003f02:	4603      	mov	r3, r0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	@ 0x28
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d177      	bne.n	8004014 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_UART_Transmit+0x24>
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e070      	b.n	8004016 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2221      	movs	r2, #33	@ 0x21
 8003f40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f42:	f7fd fe33 	bl	8001bac <HAL_GetTick>
 8003f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f60:	d108      	bne.n	8003f74 <HAL_UART_Transmit+0x68>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d104      	bne.n	8003f74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	e003      	b.n	8003f7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f7c:	e02f      	b.n	8003fde <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	2180      	movs	r1, #128	@ 0x80
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fba6 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e03b      	b.n	8004016 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e007      	b.n	8003fcc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1c9      	bne.n	8003f7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2140      	movs	r1, #64	@ 0x40
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fb70 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e005      	b.n	8004016 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4ba6      	ldr	r3, [pc, #664]	@ (80042e4 <UART_SetConfig+0x2c4>)
 800404c:	4013      	ands	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	430b      	orrs	r3, r1
 8004056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a94      	ldr	r2, [pc, #592]	@ (80042e8 <UART_SetConfig+0x2c8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d120      	bne.n	80040de <UART_SetConfig+0xbe>
 800409c:	4b93      	ldr	r3, [pc, #588]	@ (80042ec <UART_SetConfig+0x2cc>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d816      	bhi.n	80040d8 <UART_SetConfig+0xb8>
 80040aa:	a201      	add	r2, pc, #4	@ (adr r2, 80040b0 <UART_SetConfig+0x90>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040cd 	.word	0x080040cd
 80040b8:	080040c7 	.word	0x080040c7
 80040bc:	080040d3 	.word	0x080040d3
 80040c0:	2301      	movs	r3, #1
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e150      	b.n	8004368 <UART_SetConfig+0x348>
 80040c6:	2302      	movs	r3, #2
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e14d      	b.n	8004368 <UART_SetConfig+0x348>
 80040cc:	2304      	movs	r3, #4
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e14a      	b.n	8004368 <UART_SetConfig+0x348>
 80040d2:	2308      	movs	r3, #8
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e147      	b.n	8004368 <UART_SetConfig+0x348>
 80040d8:	2310      	movs	r3, #16
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e144      	b.n	8004368 <UART_SetConfig+0x348>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a83      	ldr	r2, [pc, #524]	@ (80042f0 <UART_SetConfig+0x2d0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d132      	bne.n	800414e <UART_SetConfig+0x12e>
 80040e8:	4b80      	ldr	r3, [pc, #512]	@ (80042ec <UART_SetConfig+0x2cc>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d828      	bhi.n	8004148 <UART_SetConfig+0x128>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <UART_SetConfig+0xdc>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004131 	.word	0x08004131
 8004100:	08004149 	.word	0x08004149
 8004104:	08004149 	.word	0x08004149
 8004108:	08004149 	.word	0x08004149
 800410c:	0800413d 	.word	0x0800413d
 8004110:	08004149 	.word	0x08004149
 8004114:	08004149 	.word	0x08004149
 8004118:	08004149 	.word	0x08004149
 800411c:	08004137 	.word	0x08004137
 8004120:	08004149 	.word	0x08004149
 8004124:	08004149 	.word	0x08004149
 8004128:	08004149 	.word	0x08004149
 800412c:	08004143 	.word	0x08004143
 8004130:	2300      	movs	r3, #0
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e118      	b.n	8004368 <UART_SetConfig+0x348>
 8004136:	2302      	movs	r3, #2
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e115      	b.n	8004368 <UART_SetConfig+0x348>
 800413c:	2304      	movs	r3, #4
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e112      	b.n	8004368 <UART_SetConfig+0x348>
 8004142:	2308      	movs	r3, #8
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e10f      	b.n	8004368 <UART_SetConfig+0x348>
 8004148:	2310      	movs	r3, #16
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e10c      	b.n	8004368 <UART_SetConfig+0x348>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a68      	ldr	r2, [pc, #416]	@ (80042f4 <UART_SetConfig+0x2d4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d120      	bne.n	800419a <UART_SetConfig+0x17a>
 8004158:	4b64      	ldr	r3, [pc, #400]	@ (80042ec <UART_SetConfig+0x2cc>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004162:	2b30      	cmp	r3, #48	@ 0x30
 8004164:	d013      	beq.n	800418e <UART_SetConfig+0x16e>
 8004166:	2b30      	cmp	r3, #48	@ 0x30
 8004168:	d814      	bhi.n	8004194 <UART_SetConfig+0x174>
 800416a:	2b20      	cmp	r3, #32
 800416c:	d009      	beq.n	8004182 <UART_SetConfig+0x162>
 800416e:	2b20      	cmp	r3, #32
 8004170:	d810      	bhi.n	8004194 <UART_SetConfig+0x174>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <UART_SetConfig+0x15c>
 8004176:	2b10      	cmp	r3, #16
 8004178:	d006      	beq.n	8004188 <UART_SetConfig+0x168>
 800417a:	e00b      	b.n	8004194 <UART_SetConfig+0x174>
 800417c:	2300      	movs	r3, #0
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e0f2      	b.n	8004368 <UART_SetConfig+0x348>
 8004182:	2302      	movs	r3, #2
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e0ef      	b.n	8004368 <UART_SetConfig+0x348>
 8004188:	2304      	movs	r3, #4
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e0ec      	b.n	8004368 <UART_SetConfig+0x348>
 800418e:	2308      	movs	r3, #8
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e0e9      	b.n	8004368 <UART_SetConfig+0x348>
 8004194:	2310      	movs	r3, #16
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e0e6      	b.n	8004368 <UART_SetConfig+0x348>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a56      	ldr	r2, [pc, #344]	@ (80042f8 <UART_SetConfig+0x2d8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d120      	bne.n	80041e6 <UART_SetConfig+0x1c6>
 80041a4:	4b51      	ldr	r3, [pc, #324]	@ (80042ec <UART_SetConfig+0x2cc>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80041b0:	d013      	beq.n	80041da <UART_SetConfig+0x1ba>
 80041b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80041b4:	d814      	bhi.n	80041e0 <UART_SetConfig+0x1c0>
 80041b6:	2b80      	cmp	r3, #128	@ 0x80
 80041b8:	d009      	beq.n	80041ce <UART_SetConfig+0x1ae>
 80041ba:	2b80      	cmp	r3, #128	@ 0x80
 80041bc:	d810      	bhi.n	80041e0 <UART_SetConfig+0x1c0>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <UART_SetConfig+0x1a8>
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d006      	beq.n	80041d4 <UART_SetConfig+0x1b4>
 80041c6:	e00b      	b.n	80041e0 <UART_SetConfig+0x1c0>
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e0cc      	b.n	8004368 <UART_SetConfig+0x348>
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e0c9      	b.n	8004368 <UART_SetConfig+0x348>
 80041d4:	2304      	movs	r3, #4
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e0c6      	b.n	8004368 <UART_SetConfig+0x348>
 80041da:	2308      	movs	r3, #8
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e0c3      	b.n	8004368 <UART_SetConfig+0x348>
 80041e0:	2310      	movs	r3, #16
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e0c0      	b.n	8004368 <UART_SetConfig+0x348>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a44      	ldr	r2, [pc, #272]	@ (80042fc <UART_SetConfig+0x2dc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d125      	bne.n	800423c <UART_SetConfig+0x21c>
 80041f0:	4b3e      	ldr	r3, [pc, #248]	@ (80042ec <UART_SetConfig+0x2cc>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041fe:	d017      	beq.n	8004230 <UART_SetConfig+0x210>
 8004200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004204:	d817      	bhi.n	8004236 <UART_SetConfig+0x216>
 8004206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420a:	d00b      	beq.n	8004224 <UART_SetConfig+0x204>
 800420c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004210:	d811      	bhi.n	8004236 <UART_SetConfig+0x216>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <UART_SetConfig+0x1fe>
 8004216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421a:	d006      	beq.n	800422a <UART_SetConfig+0x20a>
 800421c:	e00b      	b.n	8004236 <UART_SetConfig+0x216>
 800421e:	2300      	movs	r3, #0
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e0a1      	b.n	8004368 <UART_SetConfig+0x348>
 8004224:	2302      	movs	r3, #2
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e09e      	b.n	8004368 <UART_SetConfig+0x348>
 800422a:	2304      	movs	r3, #4
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e09b      	b.n	8004368 <UART_SetConfig+0x348>
 8004230:	2308      	movs	r3, #8
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e098      	b.n	8004368 <UART_SetConfig+0x348>
 8004236:	2310      	movs	r3, #16
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e095      	b.n	8004368 <UART_SetConfig+0x348>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2f      	ldr	r2, [pc, #188]	@ (8004300 <UART_SetConfig+0x2e0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d125      	bne.n	8004292 <UART_SetConfig+0x272>
 8004246:	4b29      	ldr	r3, [pc, #164]	@ (80042ec <UART_SetConfig+0x2cc>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004250:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004254:	d017      	beq.n	8004286 <UART_SetConfig+0x266>
 8004256:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800425a:	d817      	bhi.n	800428c <UART_SetConfig+0x26c>
 800425c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004260:	d00b      	beq.n	800427a <UART_SetConfig+0x25a>
 8004262:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004266:	d811      	bhi.n	800428c <UART_SetConfig+0x26c>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <UART_SetConfig+0x254>
 800426c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004270:	d006      	beq.n	8004280 <UART_SetConfig+0x260>
 8004272:	e00b      	b.n	800428c <UART_SetConfig+0x26c>
 8004274:	2301      	movs	r3, #1
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e076      	b.n	8004368 <UART_SetConfig+0x348>
 800427a:	2302      	movs	r3, #2
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e073      	b.n	8004368 <UART_SetConfig+0x348>
 8004280:	2304      	movs	r3, #4
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e070      	b.n	8004368 <UART_SetConfig+0x348>
 8004286:	2308      	movs	r3, #8
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e06d      	b.n	8004368 <UART_SetConfig+0x348>
 800428c:	2310      	movs	r3, #16
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e06a      	b.n	8004368 <UART_SetConfig+0x348>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1b      	ldr	r2, [pc, #108]	@ (8004304 <UART_SetConfig+0x2e4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d138      	bne.n	800430e <UART_SetConfig+0x2ee>
 800429c:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <UART_SetConfig+0x2cc>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80042a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042aa:	d017      	beq.n	80042dc <UART_SetConfig+0x2bc>
 80042ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042b0:	d82a      	bhi.n	8004308 <UART_SetConfig+0x2e8>
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b6:	d00b      	beq.n	80042d0 <UART_SetConfig+0x2b0>
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042bc:	d824      	bhi.n	8004308 <UART_SetConfig+0x2e8>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <UART_SetConfig+0x2aa>
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c6:	d006      	beq.n	80042d6 <UART_SetConfig+0x2b6>
 80042c8:	e01e      	b.n	8004308 <UART_SetConfig+0x2e8>
 80042ca:	2300      	movs	r3, #0
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e04b      	b.n	8004368 <UART_SetConfig+0x348>
 80042d0:	2302      	movs	r3, #2
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e048      	b.n	8004368 <UART_SetConfig+0x348>
 80042d6:	2304      	movs	r3, #4
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e045      	b.n	8004368 <UART_SetConfig+0x348>
 80042dc:	2308      	movs	r3, #8
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e042      	b.n	8004368 <UART_SetConfig+0x348>
 80042e2:	bf00      	nop
 80042e4:	efff69f3 	.word	0xefff69f3
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40004400 	.word	0x40004400
 80042f4:	40004800 	.word	0x40004800
 80042f8:	40004c00 	.word	0x40004c00
 80042fc:	40005000 	.word	0x40005000
 8004300:	40011400 	.word	0x40011400
 8004304:	40007800 	.word	0x40007800
 8004308:	2310      	movs	r3, #16
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e02c      	b.n	8004368 <UART_SetConfig+0x348>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a72      	ldr	r2, [pc, #456]	@ (80044dc <UART_SetConfig+0x4bc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d125      	bne.n	8004364 <UART_SetConfig+0x344>
 8004318:	4b71      	ldr	r3, [pc, #452]	@ (80044e0 <UART_SetConfig+0x4c0>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004322:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004326:	d017      	beq.n	8004358 <UART_SetConfig+0x338>
 8004328:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800432c:	d817      	bhi.n	800435e <UART_SetConfig+0x33e>
 800432e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004332:	d00b      	beq.n	800434c <UART_SetConfig+0x32c>
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004338:	d811      	bhi.n	800435e <UART_SetConfig+0x33e>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <UART_SetConfig+0x326>
 800433e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004342:	d006      	beq.n	8004352 <UART_SetConfig+0x332>
 8004344:	e00b      	b.n	800435e <UART_SetConfig+0x33e>
 8004346:	2300      	movs	r3, #0
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e00d      	b.n	8004368 <UART_SetConfig+0x348>
 800434c:	2302      	movs	r3, #2
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e00a      	b.n	8004368 <UART_SetConfig+0x348>
 8004352:	2304      	movs	r3, #4
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e007      	b.n	8004368 <UART_SetConfig+0x348>
 8004358:	2308      	movs	r3, #8
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e004      	b.n	8004368 <UART_SetConfig+0x348>
 800435e:	2310      	movs	r3, #16
 8004360:	77fb      	strb	r3, [r7, #31]
 8004362:	e001      	b.n	8004368 <UART_SetConfig+0x348>
 8004364:	2310      	movs	r3, #16
 8004366:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004370:	d15b      	bne.n	800442a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004372:	7ffb      	ldrb	r3, [r7, #31]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d828      	bhi.n	80043ca <UART_SetConfig+0x3aa>
 8004378:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <UART_SetConfig+0x360>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043ad 	.word	0x080043ad
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043cb 	.word	0x080043cb
 8004390:	080043bb 	.word	0x080043bb
 8004394:	080043cb 	.word	0x080043cb
 8004398:	080043cb 	.word	0x080043cb
 800439c:	080043cb 	.word	0x080043cb
 80043a0:	080043c3 	.word	0x080043c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7ff f94c 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 80043a8:	61b8      	str	r0, [r7, #24]
        break;
 80043aa:	e013      	b.n	80043d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ac:	f7ff f95c 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 80043b0:	61b8      	str	r0, [r7, #24]
        break;
 80043b2:	e00f      	b.n	80043d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b4:	4b4b      	ldr	r3, [pc, #300]	@ (80044e4 <UART_SetConfig+0x4c4>)
 80043b6:	61bb      	str	r3, [r7, #24]
        break;
 80043b8:	e00c      	b.n	80043d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ba:	f7ff f82f 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80043be:	61b8      	str	r0, [r7, #24]
        break;
 80043c0:	e008      	b.n	80043d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043c6:	61bb      	str	r3, [r7, #24]
        break;
 80043c8:	e004      	b.n	80043d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	77bb      	strb	r3, [r7, #30]
        break;
 80043d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d074      	beq.n	80044c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	005a      	lsls	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	441a      	add	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	d916      	bls.n	8004424 <UART_SetConfig+0x404>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fc:	d212      	bcs.n	8004424 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f023 030f 	bic.w	r3, r3, #15
 8004406:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	b29b      	uxth	r3, r3
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	b29a      	uxth	r2, r3
 8004414:	89fb      	ldrh	r3, [r7, #14]
 8004416:	4313      	orrs	r3, r2
 8004418:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	89fa      	ldrh	r2, [r7, #14]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	e04f      	b.n	80044c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	77bb      	strb	r3, [r7, #30]
 8004428:	e04c      	b.n	80044c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800442a:	7ffb      	ldrb	r3, [r7, #31]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d828      	bhi.n	8004482 <UART_SetConfig+0x462>
 8004430:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <UART_SetConfig+0x418>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	0800445d 	.word	0x0800445d
 800443c:	08004465 	.word	0x08004465
 8004440:	0800446d 	.word	0x0800446d
 8004444:	08004483 	.word	0x08004483
 8004448:	08004473 	.word	0x08004473
 800444c:	08004483 	.word	0x08004483
 8004450:	08004483 	.word	0x08004483
 8004454:	08004483 	.word	0x08004483
 8004458:	0800447b 	.word	0x0800447b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800445c:	f7ff f8f0 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8004460:	61b8      	str	r0, [r7, #24]
        break;
 8004462:	e013      	b.n	800448c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7ff f900 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8004468:	61b8      	str	r0, [r7, #24]
        break;
 800446a:	e00f      	b.n	800448c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800446c:	4b1d      	ldr	r3, [pc, #116]	@ (80044e4 <UART_SetConfig+0x4c4>)
 800446e:	61bb      	str	r3, [r7, #24]
        break;
 8004470:	e00c      	b.n	800448c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004472:	f7fe ffd3 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8004476:	61b8      	str	r0, [r7, #24]
        break;
 8004478:	e008      	b.n	800448c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800447e:	61bb      	str	r3, [r7, #24]
        break;
 8004480:	e004      	b.n	800448c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	77bb      	strb	r3, [r7, #30]
        break;
 800448a:	bf00      	nop
    }

    if (pclk != 0U)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d018      	beq.n	80044c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	085a      	lsrs	r2, r3, #1
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	441a      	add	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b0f      	cmp	r3, #15
 80044aa:	d909      	bls.n	80044c0 <UART_SetConfig+0x4a0>
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b2:	d205      	bcs.n	80044c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	e001      	b.n	80044c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40007c00 	.word	0x40007c00
 80044e0:	40023800 	.word	0x40023800
 80044e4:	00f42400 	.word	0x00f42400

080044e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01a      	beq.n	80045fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045e6:	d10a      	bne.n	80045fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  }
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	@ 0x30
 8004630:	af02      	add	r7, sp, #8
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800463c:	f7fd fab6 	bl	8001bac <HAL_GetTick>
 8004640:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b08      	cmp	r3, #8
 800464e:	d12e      	bne.n	80046ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f83b 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d021      	beq.n	80046ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	60fb      	str	r3, [r7, #12]
   return(result);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	69b9      	ldr	r1, [r7, #24]
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	617b      	str	r3, [r7, #20]
   return(result);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e011      	b.n	80046d2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3728      	adds	r7, #40	@ 0x28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ea:	e04f      	b.n	800478c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046f2:	d04b      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7fd fa5a 	bl	8001bac <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <UART_WaitOnFlagUntilTimeout+0x30>
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e04e      	b.n	80047ac <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d037      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0xb2>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b80      	cmp	r3, #128	@ 0x80
 8004720:	d034      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0xb2>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	d031      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b08      	cmp	r3, #8
 8004734:	d110      	bne.n	8004758 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2208      	movs	r2, #8
 800473c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f838 	bl	80047b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2208      	movs	r2, #8
 8004748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e029      	b.n	80047ac <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004766:	d111      	bne.n	800478c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004770:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f81e 	bl	80047b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e00f      	b.n	80047ac <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4013      	ands	r3, r2
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	429a      	cmp	r2, r3
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d0a0      	beq.n	80046ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b095      	sub	sp, #84	@ 0x54
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047da:	643b      	str	r3, [r7, #64]	@ 0x40
 80047dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e6      	bne.n	80047bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800480e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e5      	bne.n	80047ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004826:	2b01      	cmp	r3, #1
 8004828:	d118      	bne.n	800485c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	60bb      	str	r3, [r7, #8]
   return(result);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f023 0310 	bic.w	r3, r3, #16
 800483e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6979      	ldr	r1, [r7, #20]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	613b      	str	r3, [r7, #16]
   return(result);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e6      	bne.n	800482a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004870:	bf00      	nop
 8004872:	3754      	adds	r7, #84	@ 0x54
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800487c:	b084      	sub	sp, #16
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	f107 001c 	add.w	r0, r7, #28
 800488a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800488e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004892:	2b01      	cmp	r3, #1
 8004894:	d121      	bne.n	80048da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	4b21      	ldr	r3, [pc, #132]	@ (800492c <USB_CoreInit+0xb0>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d105      	bne.n	80048ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa92 	bl	8004df8 <USB_CoreReset>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]
 80048d8:	e010      	b.n	80048fc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa86 	bl	8004df8 <USB_CoreReset>
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80048fc:	7fbb      	ldrb	r3, [r7, #30]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d10b      	bne.n	800491a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f043 0206 	orr.w	r2, r3, #6
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f043 0220 	orr.w	r2, r3, #32
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004926:	b004      	add	sp, #16
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	ffbdffbf 	.word	0xffbdffbf

08004930 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 0201 	bic.w	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	460b      	mov	r3, r1
 800495c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800496e:	78fb      	ldrb	r3, [r7, #3]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d115      	bne.n	80049a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004980:	200a      	movs	r0, #10
 8004982:	f7fd f91f 	bl	8001bc4 <HAL_Delay>
      ms += 10U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	330a      	adds	r3, #10
 800498a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fa25 	bl	8004ddc <USB_GetMode>
 8004992:	4603      	mov	r3, r0
 8004994:	2b01      	cmp	r3, #1
 8004996:	d01e      	beq.n	80049d6 <USB_SetCurrentMode+0x84>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2bc7      	cmp	r3, #199	@ 0xc7
 800499c:	d9f0      	bls.n	8004980 <USB_SetCurrentMode+0x2e>
 800499e:	e01a      	b.n	80049d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d115      	bne.n	80049d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049b2:	200a      	movs	r0, #10
 80049b4:	f7fd f906 	bl	8001bc4 <HAL_Delay>
      ms += 10U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	330a      	adds	r3, #10
 80049bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa0c 	bl	8004ddc <USB_GetMode>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <USB_SetCurrentMode+0x84>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80049ce:	d9f0      	bls.n	80049b2 <USB_SetCurrentMode+0x60>
 80049d0:	e001      	b.n	80049d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e005      	b.n	80049e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80049da:	d101      	bne.n	80049e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ec:	b084      	sub	sp, #16
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e009      	b.n	8004a20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3340      	adds	r3, #64	@ 0x40
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	2200      	movs	r2, #0
 8004a18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b0e      	cmp	r3, #14
 8004a24:	d9f2      	bls.n	8004a0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d11c      	bne.n	8004a68 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3c:	f043 0302 	orr.w	r3, r3, #2
 8004a40:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a46:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e005      	b.n	8004a74 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a80:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10d      	bne.n	8004aa4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a90:	2100      	movs	r1, #0
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f968 	bl	8004d68 <USB_SetDevSpeed>
 8004a98:	e008      	b.n	8004aac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f963 	bl	8004d68 <USB_SetDevSpeed>
 8004aa2:	e003      	b.n	8004aac <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004aa4:	2103      	movs	r1, #3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f95e 	bl	8004d68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004aac:	2110      	movs	r1, #16
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8fa 	bl	8004ca8 <USB_FlushTxFifo>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f924 	bl	8004d0c <USB_FlushRxFifo>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aec:	461a      	mov	r2, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e043      	b.n	8004b80 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b0e:	d118      	bne.n	8004b42 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b22:	461a      	mov	r2, r3
 8004b24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	e013      	b.n	8004b54 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b38:	461a      	mov	r2, r3
 8004b3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	e008      	b.n	8004b54 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2300      	movs	r3, #0
 8004b52:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b60:	461a      	mov	r2, r3
 8004b62:	2300      	movs	r3, #0
 8004b64:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b72:	461a      	mov	r2, r3
 8004b74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b84:	461a      	mov	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d3b5      	bcc.n	8004af8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	e043      	b.n	8004c1a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ba8:	d118      	bne.n	8004bdc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e013      	b.n	8004bee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e008      	b.n	8004bee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be8:	461a      	mov	r2, r3
 8004bea:	2300      	movs	r3, #0
 8004bec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	3301      	adds	r3, #1
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c1e:	461a      	mov	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d3b5      	bcc.n	8004b92 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c38:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c46:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d105      	bne.n	8004c5c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f043 0210 	orr.w	r2, r3, #16
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca0 <USB_DevInit+0x2b4>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c68:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f043 0208 	orr.w	r2, r3, #8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <USB_DevInit+0x2b8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c9c:	b004      	add	sp, #16
 8004c9e:	4770      	bx	lr
 8004ca0:	803c3800 	.word	0x803c3800
 8004ca4:	40000004 	.word	0x40000004

08004ca8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cc2:	d901      	bls.n	8004cc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e01b      	b.n	8004d00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	daf2      	bge.n	8004cb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	019b      	lsls	r3, r3, #6
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cec:	d901      	bls.n	8004cf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e006      	b.n	8004d00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d0f0      	beq.n	8004ce0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d24:	d901      	bls.n	8004d2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e018      	b.n	8004d5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	daf2      	bge.n	8004d18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2210      	movs	r2, #16
 8004d3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d48:	d901      	bls.n	8004d4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e006      	b.n	8004d5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d0f0      	beq.n	8004d3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004db4:	f023 0303 	bic.w	r3, r3, #3
 8004db8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0301 	and.w	r3, r3, #1
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3301      	adds	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e10:	d901      	bls.n	8004e16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e01b      	b.n	8004e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	daf2      	bge.n	8004e04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f043 0201 	orr.w	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e3a:	d901      	bls.n	8004e40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d0f0      	beq.n	8004e2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e5a:	b480      	push	{r7}
 8004e5c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e6e:	f3ef 8305 	mrs	r3, IPSR
 8004e72:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7e:	607b      	str	r3, [r7, #4]
  return(result);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d105      	bne.n	8004e92 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e86:	f3ef 8311 	mrs	r3, BASEPRI
 8004e8a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <osKernelInitialize+0x3a>
 8004e92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ecc <osKernelInitialize+0x64>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d103      	bne.n	8004ea2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e9a:	f06f 0305 	mvn.w	r3, #5
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e00c      	b.n	8004ebc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <osKernelInitialize+0x64>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004eaa:	4b08      	ldr	r3, [pc, #32]	@ (8004ecc <osKernelInitialize+0x64>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e002      	b.n	8004ebc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004eba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	200008a0 	.word	0x200008a0

08004ed0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed6:	f3ef 8305 	mrs	r3, IPSR
 8004eda:	60bb      	str	r3, [r7, #8]
  return(result);
 8004edc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10f      	bne.n	8004f02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee6:	607b      	str	r3, [r7, #4]
  return(result);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eee:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <osKernelStart+0x3a>
 8004efa:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <osKernelStart+0x68>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d103      	bne.n	8004f0a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f02:	f06f 0305 	mvn.w	r3, #5
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e010      	b.n	8004f2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <osKernelStart+0x68>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d109      	bne.n	8004f26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f12:	f7ff ffa2 	bl	8004e5a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f16:	4b08      	ldr	r3, [pc, #32]	@ (8004f38 <osKernelStart+0x68>)
 8004f18:	2202      	movs	r2, #2
 8004f1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f1c:	f001 fa76 	bl	800640c <vTaskStartScheduler>
      stat = osOK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e002      	b.n	8004f2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	200008a0 	.word	0x200008a0

08004f3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b090      	sub	sp, #64	@ 0x40
 8004f40:	af04      	add	r7, sp, #16
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f4c:	f3ef 8305 	mrs	r3, IPSR
 8004f50:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f52:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 8090 	bne.w	800507a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d105      	bne.n	8004f72 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f66:	f3ef 8311 	mrs	r3, BASEPRI
 8004f6a:	617b      	str	r3, [r7, #20]
  return(result);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <osThreadNew+0x3e>
 8004f72:	4b44      	ldr	r3, [pc, #272]	@ (8005084 <osThreadNew+0x148>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d07f      	beq.n	800507a <osThreadNew+0x13e>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d07c      	beq.n	800507a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8004f80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004f86:	2318      	movs	r3, #24
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f92:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d045      	beq.n	8005026 <osThreadNew+0xea>
      if (attr->name != NULL) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <osThreadNew+0x6c>
        name = attr->name;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <osThreadNew+0x92>
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	2b38      	cmp	r3, #56	@ 0x38
 8004fc0:	d805      	bhi.n	8004fce <osThreadNew+0x92>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <osThreadNew+0x96>
        return (NULL);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e054      	b.n	800507c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00e      	beq.n	8005008 <osThreadNew+0xcc>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b5b      	cmp	r3, #91	@ 0x5b
 8004ff0:	d90a      	bls.n	8005008 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d006      	beq.n	8005008 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <osThreadNew+0xcc>
        mem = 1;
 8005002:	2301      	movs	r3, #1
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	e010      	b.n	800502a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10c      	bne.n	800502a <osThreadNew+0xee>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <osThreadNew+0xee>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <osThreadNew+0xee>
          mem = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	e001      	b.n	800502a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d110      	bne.n	8005052 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005038:	9202      	str	r2, [sp, #8]
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005044:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fffa 	bl	8006040 <xTaskCreateStatic>
 800504c:	4603      	mov	r3, r0
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	e013      	b.n	800507a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d110      	bne.n	800507a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505a:	b29a      	uxth	r2, r3
 800505c:	f107 0310 	add.w	r3, r7, #16
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f001 f84e 	bl	800610c <xTaskCreate>
 8005070:	4603      	mov	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d001      	beq.n	800507a <osThreadNew+0x13e>
          hTask = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800507a:	693b      	ldr	r3, [r7, #16]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3730      	adds	r7, #48	@ 0x30
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	200008a0 	.word	0x200008a0

08005088 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005090:	f3ef 8305 	mrs	r3, IPSR
 8005094:	613b      	str	r3, [r7, #16]
  return(result);
 8005096:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10f      	bne.n	80050bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509c:	f3ef 8310 	mrs	r3, PRIMASK
 80050a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050a8:	f3ef 8311 	mrs	r3, BASEPRI
 80050ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <osDelay+0x3c>
 80050b4:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <osDelay+0x58>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d103      	bne.n	80050c4 <osDelay+0x3c>
    stat = osErrorISR;
 80050bc:	f06f 0305 	mvn.w	r3, #5
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e007      	b.n	80050d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f001 f964 	bl	800639c <vTaskDelay>
    }
  }

  return (stat);
 80050d4:	697b      	ldr	r3, [r7, #20]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	200008a0 	.word	0x200008a0

080050e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a07      	ldr	r2, [pc, #28]	@ (8005110 <vApplicationGetIdleTaskMemory+0x2c>)
 80050f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4a06      	ldr	r2, [pc, #24]	@ (8005114 <vApplicationGetIdleTaskMemory+0x30>)
 80050fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005102:	601a      	str	r2, [r3, #0]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	200008a4 	.word	0x200008a4
 8005114:	20000900 	.word	0x20000900

08005118 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a07      	ldr	r2, [pc, #28]	@ (8005144 <vApplicationGetTimerTaskMemory+0x2c>)
 8005128:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4a06      	ldr	r2, [pc, #24]	@ (8005148 <vApplicationGetTimerTaskMemory+0x30>)
 800512e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005136:	601a      	str	r2, [r3, #0]
}
 8005138:	bf00      	nop
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	20000d00 	.word	0x20000d00
 8005148:	20000d5c 	.word	0x20000d5c

0800514c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f103 0208 	add.w	r2, r3, #8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005164:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f103 0208 	add.w	r2, r3, #8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f103 0208 	add.w	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051a6:	b480      	push	{r7}
 80051a8:	b085      	sub	sp, #20
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	601a      	str	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005204:	d103      	bne.n	800520e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e00c      	b.n	8005228 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3308      	adds	r3, #8
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e002      	b.n	800521c <vListInsert+0x2e>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	d2f6      	bcs.n	8005216 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6892      	ldr	r2, [r2, #8]
 8005276:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6852      	ldr	r2, [r2, #4]
 8005280:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	d103      	bne.n	8005294 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	1e5a      	subs	r2, r3, #1
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10d      	bne.n	80052e4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052cc:	b672      	cpsid	i
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	b662      	cpsie	i
 80052dc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	e7fd      	b.n	80052e0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80052e4:	f002 fb5a 	bl	800799c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f0:	68f9      	ldr	r1, [r7, #12]
 80052f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052f4:	fb01 f303 	mul.w	r3, r1, r3
 80052f8:	441a      	add	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005314:	3b01      	subs	r3, #1
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800531a:	fb01 f303 	mul.w	r3, r1, r3
 800531e:	441a      	add	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	22ff      	movs	r2, #255	@ 0xff
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	22ff      	movs	r2, #255	@ 0xff
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d114      	bne.n	8005364 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01a      	beq.n	8005378 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3310      	adds	r3, #16
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fafc 	bl	8006944 <xTaskRemoveFromEventList>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d012      	beq.n	8005378 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <xQueueGenericReset+0xd4>)
 8005354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	e009      	b.n	8005378 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3310      	adds	r3, #16
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff feef 	bl	800514c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3324      	adds	r3, #36	@ 0x24
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff feea 	bl	800514c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005378:	f002 fb46 	bl	8007a08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800537c:	2301      	movs	r3, #1
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08e      	sub	sp, #56	@ 0x38
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10d      	bne.n	80053bc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	b672      	cpsid	i
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	b662      	cpsie	i
 80053b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10d      	bne.n	80053de <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c6:	b672      	cpsid	i
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	b662      	cpsie	i
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	e7fd      	b.n	80053da <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <xQueueGenericCreateStatic+0x5e>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <xQueueGenericCreateStatic+0x62>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <xQueueGenericCreateStatic+0x64>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f8:	b672      	cpsid	i
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	b662      	cpsie	i
 8005408:	623b      	str	r3, [r7, #32]
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	e7fd      	b.n	800540c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <xQueueGenericCreateStatic+0x90>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <xQueueGenericCreateStatic+0x94>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <xQueueGenericCreateStatic+0x96>
 8005420:	2300      	movs	r3, #0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10d      	bne.n	8005442 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	b672      	cpsid	i
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	b662      	cpsie	i
 800543a:	61fb      	str	r3, [r7, #28]
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	e7fd      	b.n	800543e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005442:	2350      	movs	r3, #80	@ 0x50
 8005444:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b50      	cmp	r3, #80	@ 0x50
 800544a:	d00d      	beq.n	8005468 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	b672      	cpsid	i
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	b662      	cpsie	i
 8005460:	61bb      	str	r3, [r7, #24]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005468:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00d      	beq.n	8005490 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800547c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f848 	bl	8005520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005492:	4618      	mov	r0, r3
 8005494:	3730      	adds	r7, #48	@ 0x30
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800549a:	b580      	push	{r7, lr}
 800549c:	b08a      	sub	sp, #40	@ 0x28
 800549e:	af02      	add	r7, sp, #8
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	4613      	mov	r3, r2
 80054a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10d      	bne.n	80054ca <xQueueGenericCreate+0x30>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	b672      	cpsid	i
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	b662      	cpsie	i
 80054c2:	613b      	str	r3, [r7, #16]
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	e7fd      	b.n	80054c6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	e004      	b.n	80054e0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	3350      	adds	r3, #80	@ 0x50
 80054e4:	4618      	mov	r0, r3
 80054e6:	f002 fb87 	bl	8007bf8 <pvPortMalloc>
 80054ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d011      	beq.n	8005516 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	3350      	adds	r3, #80	@ 0x50
 80054fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005504:	79fa      	ldrb	r2, [r7, #7]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f805 	bl	8005520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005516:	69bb      	ldr	r3, [r7, #24]
	}
 8005518:	4618      	mov	r0, r3
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d103      	bne.n	800553c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e002      	b.n	8005542 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800554e:	2101      	movs	r1, #1
 8005550:	69b8      	ldr	r0, [r7, #24]
 8005552:	f7ff feaf 	bl	80052b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557a:	b672      	cpsid	i
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	b662      	cpsie	i
 800558a:	613b      	str	r3, [r7, #16]
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d90d      	bls.n	80055b6 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	b672      	cpsid	i
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	b662      	cpsie	i
 80055ae:	60fb      	str	r3, [r7, #12]
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055b6:	2202      	movs	r2, #2
 80055b8:	2100      	movs	r1, #0
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ff6d 	bl	800549a <xQueueGenericCreate>
 80055c0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80055ce:	697b      	ldr	r3, [r7, #20]
	}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08e      	sub	sp, #56	@ 0x38
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055e6:	2300      	movs	r3, #0
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <xQueueGenericSend+0x38>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	b672      	cpsid	i
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	b662      	cpsie	i
 8005608:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <xQueueGenericSend+0x46>
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <xQueueGenericSend+0x4a>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xQueueGenericSend+0x4c>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10d      	bne.n	8005644 <xQueueGenericSend+0x6c>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	b672      	cpsid	i
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	b662      	cpsie	i
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d103      	bne.n	8005652 <xQueueGenericSend+0x7a>
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <xQueueGenericSend+0x7e>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <xQueueGenericSend+0x80>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10d      	bne.n	8005678 <xQueueGenericSend+0xa0>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	b672      	cpsid	i
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	b662      	cpsie	i
 8005670:	623b      	str	r3, [r7, #32]
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005678:	f001 fb2c 	bl	8006cd4 <xTaskGetSchedulerState>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <xQueueGenericSend+0xb0>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <xQueueGenericSend+0xb4>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <xQueueGenericSend+0xb6>
 800568c:	2300      	movs	r3, #0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10d      	bne.n	80056ae <xQueueGenericSend+0xd6>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005696:	b672      	cpsid	i
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	b662      	cpsie	i
 80056a6:	61fb      	str	r3, [r7, #28]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ae:	f002 f975 	bl	800799c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <xQueueGenericSend+0xec>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d129      	bne.n	8005718 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ca:	f000 fb4b 	bl	8005d64 <prvCopyDataToQueue>
 80056ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	3324      	adds	r3, #36	@ 0x24
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 f931 	bl	8006944 <xTaskRemoveFromEventList>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056e8:	4b3f      	ldr	r3, [pc, #252]	@ (80057e8 <xQueueGenericSend+0x210>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	e00a      	b.n	8005710 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005700:	4b39      	ldr	r3, [pc, #228]	@ (80057e8 <xQueueGenericSend+0x210>)
 8005702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005710:	f002 f97a 	bl	8007a08 <vPortExitCritical>
				return pdPASS;
 8005714:	2301      	movs	r3, #1
 8005716:	e063      	b.n	80057e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800571e:	f002 f973 	bl	8007a08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005722:	2300      	movs	r3, #0
 8005724:	e05c      	b.n	80057e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f96d 	bl	8006a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005736:	2301      	movs	r3, #1
 8005738:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800573a:	f002 f965 	bl	8007a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800573e:	f000 fed1 	bl	80064e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005742:	f002 f92b 	bl	800799c <vPortEnterCritical>
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800574c:	b25b      	sxtb	r3, r3
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005752:	d103      	bne.n	800575c <xQueueGenericSend+0x184>
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005762:	b25b      	sxtb	r3, r3
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005768:	d103      	bne.n	8005772 <xQueueGenericSend+0x19a>
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005772:	f002 f949 	bl	8007a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005776:	1d3a      	adds	r2, r7, #4
 8005778:	f107 0314 	add.w	r3, r7, #20
 800577c:	4611      	mov	r1, r2
 800577e:	4618      	mov	r0, r3
 8005780:	f001 f95c 	bl	8006a3c <xTaskCheckForTimeOut>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d124      	bne.n	80057d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800578a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800578c:	f000 fbe2 	bl	8005f54 <prvIsQueueFull>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	3310      	adds	r3, #16
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 f87a 	bl	8006898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057a6:	f000 fb6d 	bl	8005e84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057aa:	f000 fea9 	bl	8006500 <xTaskResumeAll>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f47f af7c 	bne.w	80056ae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80057b6:	4b0c      	ldr	r3, [pc, #48]	@ (80057e8 <xQueueGenericSend+0x210>)
 80057b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	e772      	b.n	80056ae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057ca:	f000 fb5b 	bl	8005e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ce:	f000 fe97 	bl	8006500 <xTaskResumeAll>
 80057d2:	e76c      	b.n	80056ae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057d6:	f000 fb55 	bl	8005e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057da:	f000 fe91 	bl	8006500 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3738      	adds	r7, #56	@ 0x38
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	@ 0x38
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80057fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10d      	bne.n	8005820 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005808:	b672      	cpsid	i
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	b662      	cpsie	i
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	e7fd      	b.n	800581c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d103      	bne.n	800582e <xQueueGenericSendFromISR+0x42>
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <xQueueGenericSendFromISR+0x46>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <xQueueGenericSendFromISR+0x48>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	b672      	cpsid	i
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	b662      	cpsie	i
 800584c:	623b      	str	r3, [r7, #32]
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	e7fd      	b.n	8005850 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d103      	bne.n	8005862 <xQueueGenericSendFromISR+0x76>
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <xQueueGenericSendFromISR+0x7a>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <xQueueGenericSendFromISR+0x7c>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10d      	bne.n	8005888 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	b672      	cpsid	i
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	b662      	cpsie	i
 8005880:	61fb      	str	r3, [r7, #28]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005888:	f002 f970 	bl	8007b6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800588c:	f3ef 8211 	mrs	r2, BASEPRI
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	b672      	cpsid	i
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	b662      	cpsie	i
 80058a4:	61ba      	str	r2, [r7, #24]
 80058a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d302      	bcc.n	80058be <xQueueGenericSendFromISR+0xd2>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d12c      	bne.n	8005918 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ce:	f000 fa49 	bl	8005d64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058da:	d112      	bne.n	8005902 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d016      	beq.n	8005912 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	3324      	adds	r3, #36	@ 0x24
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 f82b 	bl	8006944 <xTaskRemoveFromEventList>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00e      	beq.n	8005912 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00b      	beq.n	8005912 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e007      	b.n	8005912 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005906:	3301      	adds	r3, #1
 8005908:	b2db      	uxtb	r3, r3
 800590a:	b25a      	sxtb	r2, r3
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005912:	2301      	movs	r3, #1
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005916:	e001      	b.n	800591c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005918:	2300      	movs	r3, #0
 800591a:	637b      	str	r3, [r7, #52]	@ 0x34
 800591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005926:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800592a:	4618      	mov	r0, r3
 800592c:	3738      	adds	r7, #56	@ 0x38
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08c      	sub	sp, #48	@ 0x30
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005940:	2300      	movs	r3, #0
 8005942:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10d      	bne.n	800596a <xQueueReceive+0x36>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	b672      	cpsid	i
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	b662      	cpsie	i
 8005962:	623b      	str	r3, [r7, #32]
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <xQueueReceive+0x44>
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <xQueueReceive+0x48>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <xQueueReceive+0x4a>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10d      	bne.n	800599e <xQueueReceive+0x6a>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005986:	b672      	cpsid	i
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	b662      	cpsie	i
 8005996:	61fb      	str	r3, [r7, #28]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800599e:	f001 f999 	bl	8006cd4 <xTaskGetSchedulerState>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <xQueueReceive+0x7a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <xQueueReceive+0x7e>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueReceive+0x80>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <xQueueReceive+0xa0>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059bc:	b672      	cpsid	i
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	b662      	cpsie	i
 80059cc:	61bb      	str	r3, [r7, #24]
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	e7fd      	b.n	80059d0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059d4:	f001 ffe2 	bl	800799c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01f      	beq.n	8005a24 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059e8:	f000 fa26 	bl	8005e38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	1e5a      	subs	r2, r3, #1
 80059f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00f      	beq.n	8005a1c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	3310      	adds	r3, #16
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 ff9f 	bl	8006944 <xTaskRemoveFromEventList>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b00 <xQueueReceive+0x1cc>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a1c:	f001 fff4 	bl	8007a08 <vPortExitCritical>
				return pdPASS;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e069      	b.n	8005af8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a2a:	f001 ffed 	bl	8007a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e062      	b.n	8005af8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a38:	f107 0310 	add.w	r3, r7, #16
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 ffe7 	bl	8006a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a42:	2301      	movs	r3, #1
 8005a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a46:	f001 ffdf 	bl	8007a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a4a:	f000 fd4b 	bl	80064e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a4e:	f001 ffa5 	bl	800799c <vPortEnterCritical>
 8005a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a58:	b25b      	sxtb	r3, r3
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a5e:	d103      	bne.n	8005a68 <xQueueReceive+0x134>
 8005a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a6e:	b25b      	sxtb	r3, r3
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a74:	d103      	bne.n	8005a7e <xQueueReceive+0x14a>
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a7e:	f001 ffc3 	bl	8007a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a82:	1d3a      	adds	r2, r7, #4
 8005a84:	f107 0310 	add.w	r3, r7, #16
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 ffd6 	bl	8006a3c <xTaskCheckForTimeOut>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d123      	bne.n	8005ade <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a98:	f000 fa46 	bl	8005f28 <prvIsQueueEmpty>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d017      	beq.n	8005ad2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	3324      	adds	r3, #36	@ 0x24
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fef4 	bl	8006898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab2:	f000 f9e7 	bl	8005e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ab6:	f000 fd23 	bl	8006500 <xTaskResumeAll>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d189      	bne.n	80059d4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8005b00 <xQueueReceive+0x1cc>)
 8005ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	e780      	b.n	80059d4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ad4:	f000 f9d6 	bl	8005e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ad8:	f000 fd12 	bl	8006500 <xTaskResumeAll>
 8005adc:	e77a      	b.n	80059d4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ae0:	f000 f9d0 	bl	8005e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ae4:	f000 fd0c 	bl	8006500 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aea:	f000 fa1d 	bl	8005f28 <prvIsQueueEmpty>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f43f af6f 	beq.w	80059d4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005af6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3730      	adds	r7, #48	@ 0x30
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	@ 0x38
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10d      	bne.n	8005b3c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	b672      	cpsid	i
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	b662      	cpsie	i
 8005b34:	623b      	str	r3, [r7, #32]
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00d      	beq.n	8005b60 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b48:	b672      	cpsid	i
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	b662      	cpsie	i
 8005b58:	61fb      	str	r3, [r7, #28]
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	e7fd      	b.n	8005b5c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b60:	f001 f8b8 	bl	8006cd4 <xTaskGetSchedulerState>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d102      	bne.n	8005b70 <xQueueSemaphoreTake+0x6c>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <xQueueSemaphoreTake+0x70>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e000      	b.n	8005b76 <xQueueSemaphoreTake+0x72>
 8005b74:	2300      	movs	r3, #0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10d      	bne.n	8005b96 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7e:	b672      	cpsid	i
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	b662      	cpsie	i
 8005b8e:	61bb      	str	r3, [r7, #24]
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	e7fd      	b.n	8005b92 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b96:	f001 ff01 	bl	800799c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d024      	beq.n	8005bf0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba8:	1e5a      	subs	r2, r3, #1
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005bb6:	f001 fa0f 	bl	8006fd8 <pvTaskIncrementMutexHeldCount>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00f      	beq.n	8005be8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bca:	3310      	adds	r3, #16
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 feb9 	bl	8006944 <xTaskRemoveFromEventList>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bd8:	4b55      	ldr	r3, [pc, #340]	@ (8005d30 <xQueueSemaphoreTake+0x22c>)
 8005bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005be8:	f001 ff0e 	bl	8007a08 <vPortExitCritical>
				return pdPASS;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e09a      	b.n	8005d26 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d114      	bne.n	8005c20 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c00:	b672      	cpsid	i
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	b662      	cpsie	i
 8005c10:	617b      	str	r3, [r7, #20]
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	e7fd      	b.n	8005c14 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c18:	f001 fef6 	bl	8007a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e082      	b.n	8005d26 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c26:	f107 030c 	add.w	r3, r7, #12
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fef0 	bl	8006a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c34:	f001 fee8 	bl	8007a08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c38:	f000 fc54 	bl	80064e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c3c:	f001 feae 	bl	800799c <vPortEnterCritical>
 8005c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c46:	b25b      	sxtb	r3, r3
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c4c:	d103      	bne.n	8005c56 <xQueueSemaphoreTake+0x152>
 8005c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c62:	d103      	bne.n	8005c6c <xQueueSemaphoreTake+0x168>
 8005c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c6c:	f001 fecc 	bl	8007a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c70:	463a      	mov	r2, r7
 8005c72:	f107 030c 	add.w	r3, r7, #12
 8005c76:	4611      	mov	r1, r2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fedf 	bl	8006a3c <xTaskCheckForTimeOut>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d132      	bne.n	8005cea <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c86:	f000 f94f 	bl	8005f28 <prvIsQueueEmpty>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d026      	beq.n	8005cde <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005c98:	f001 fe80 	bl	800799c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f001 f835 	bl	8006d10 <xTaskPriorityInherit>
 8005ca6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005ca8:	f001 feae 	bl	8007a08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cae:	3324      	adds	r3, #36	@ 0x24
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fdef 	bl	8006898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cbc:	f000 f8e2 	bl	8005e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cc0:	f000 fc1e 	bl	8006500 <xTaskResumeAll>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f47f af65 	bne.w	8005b96 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005ccc:	4b18      	ldr	r3, [pc, #96]	@ (8005d30 <xQueueSemaphoreTake+0x22c>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	e75b      	b.n	8005b96 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ce0:	f000 f8d0 	bl	8005e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ce4:	f000 fc0c 	bl	8006500 <xTaskResumeAll>
 8005ce8:	e755      	b.n	8005b96 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cec:	f000 f8ca 	bl	8005e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cf0:	f000 fc06 	bl	8006500 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cf6:	f000 f917 	bl	8005f28 <prvIsQueueEmpty>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f43f af4a 	beq.w	8005b96 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00d      	beq.n	8005d24 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005d08:	f001 fe48 	bl	800799c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d0e:	f000 f811 	bl	8005d34 <prvGetDisinheritPriorityAfterTimeout>
 8005d12:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 f8d4 	bl	8006ec8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d20:	f001 fe72 	bl	8007a08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3738      	adds	r7, #56	@ 0x38
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d006      	beq.n	8005d52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e001      	b.n	8005d56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d56:	68fb      	ldr	r3, [r7, #12]
	}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10d      	bne.n	8005d9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d14d      	bne.n	8005e26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 f826 	bl	8006de0 <xTaskPriorityDisinherit>
 8005d94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	609a      	str	r2, [r3, #8]
 8005d9c:	e043      	b.n	8005e26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d119      	bne.n	8005dd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6858      	ldr	r0, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	461a      	mov	r2, r3
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	f002 fc2b 	bl	800860a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	441a      	add	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d32b      	bcc.n	8005e26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	e026      	b.n	8005e26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68d8      	ldr	r0, [r3, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de0:	461a      	mov	r2, r3
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	f002 fc11 	bl	800860a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	425b      	negs	r3, r3
 8005df2:	441a      	add	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d207      	bcs.n	8005e14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	441a      	add	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d105      	bne.n	8005e26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e2e:	697b      	ldr	r3, [r7, #20]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d018      	beq.n	8005e7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	441a      	add	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d303      	bcc.n	8005e6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68d9      	ldr	r1, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e74:	461a      	mov	r2, r3
 8005e76:	6838      	ldr	r0, [r7, #0]
 8005e78:	f002 fbc7 	bl	800860a <memcpy>
	}
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e8c:	f001 fd86 	bl	800799c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e98:	e011      	b.n	8005ebe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d012      	beq.n	8005ec8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3324      	adds	r3, #36	@ 0x24
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fd4c 	bl	8006944 <xTaskRemoveFromEventList>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005eb2:	f000 fe2b 	bl	8006b0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	dce9      	bgt.n	8005e9a <prvUnlockQueue+0x16>
 8005ec6:	e000      	b.n	8005eca <prvUnlockQueue+0x46>
					break;
 8005ec8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	22ff      	movs	r2, #255	@ 0xff
 8005ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005ed2:	f001 fd99 	bl	8007a08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ed6:	f001 fd61 	bl	800799c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ee0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ee2:	e011      	b.n	8005f08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d012      	beq.n	8005f12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3310      	adds	r3, #16
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fd27 	bl	8006944 <xTaskRemoveFromEventList>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005efc:	f000 fe06 	bl	8006b0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dce9      	bgt.n	8005ee4 <prvUnlockQueue+0x60>
 8005f10:	e000      	b.n	8005f14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	22ff      	movs	r2, #255	@ 0xff
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f1c:	f001 fd74 	bl	8007a08 <vPortExitCritical>
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f30:	f001 fd34 	bl	800799c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e001      	b.n	8005f46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f46:	f001 fd5f 	bl	8007a08 <vPortExitCritical>

	return xReturn;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f5c:	f001 fd1e 	bl	800799c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d102      	bne.n	8005f72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e001      	b.n	8005f76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f76:	f001 fd47 	bl	8007a08 <vPortExitCritical>

	return xReturn;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	e014      	b.n	8005fbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f94:	4a0f      	ldr	r2, [pc, #60]	@ (8005fd4 <vQueueAddToRegistry+0x50>)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fa0:	490c      	ldr	r1, [pc, #48]	@ (8005fd4 <vQueueAddToRegistry+0x50>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005faa:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd4 <vQueueAddToRegistry+0x50>)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fb6:	e006      	b.n	8005fc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b07      	cmp	r3, #7
 8005fc2:	d9e7      	bls.n	8005f94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	2000115c 	.word	0x2000115c

08005fd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005fe8:	f001 fcd8 	bl	800799c <vPortEnterCritical>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ff2:	b25b      	sxtb	r3, r3
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ff8:	d103      	bne.n	8006002 <vQueueWaitForMessageRestricted+0x2a>
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006008:	b25b      	sxtb	r3, r3
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800600e:	d103      	bne.n	8006018 <vQueueWaitForMessageRestricted+0x40>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006018:	f001 fcf6 	bl	8007a08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	3324      	adds	r3, #36	@ 0x24
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fc5b 	bl	80068e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006032:	6978      	ldr	r0, [r7, #20]
 8006034:	f7ff ff26 	bl	8005e84 <prvUnlockQueue>
	}
 8006038:	bf00      	nop
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08e      	sub	sp, #56	@ 0x38
 8006044:	af04      	add	r7, sp, #16
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800604e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10d      	bne.n	8006070 <xTaskCreateStatic+0x30>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006058:	b672      	cpsid	i
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	b662      	cpsie	i
 8006068:	623b      	str	r3, [r7, #32]
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10d      	bne.n	8006092 <xTaskCreateStatic+0x52>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607a:	b672      	cpsid	i
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	b662      	cpsie	i
 800608a:	61fb      	str	r3, [r7, #28]
}
 800608c:	bf00      	nop
 800608e:	bf00      	nop
 8006090:	e7fd      	b.n	800608e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006092:	235c      	movs	r3, #92	@ 0x5c
 8006094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b5c      	cmp	r3, #92	@ 0x5c
 800609a:	d00d      	beq.n	80060b8 <xTaskCreateStatic+0x78>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	b672      	cpsid	i
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	b662      	cpsie	i
 80060b0:	61bb      	str	r3, [r7, #24]
}
 80060b2:	bf00      	nop
 80060b4:	bf00      	nop
 80060b6:	e7fd      	b.n	80060b4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01e      	beq.n	80060fe <xTaskCreateStatic+0xbe>
 80060c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01b      	beq.n	80060fe <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060d8:	2300      	movs	r3, #0
 80060da:	9303      	str	r3, [sp, #12]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	9302      	str	r3, [sp, #8]
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f850 	bl	8006196 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060f8:	f000 f8e0 	bl	80062bc <prvAddNewTaskToReadyList>
 80060fc:	e001      	b.n	8006102 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006102:	697b      	ldr	r3, [r7, #20]
	}
 8006104:	4618      	mov	r0, r3
 8006106:	3728      	adds	r7, #40	@ 0x28
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08c      	sub	sp, #48	@ 0x30
 8006110:	af04      	add	r7, sp, #16
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4618      	mov	r0, r3
 8006122:	f001 fd69 	bl	8007bf8 <pvPortMalloc>
 8006126:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00e      	beq.n	800614c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800612e:	205c      	movs	r0, #92	@ 0x5c
 8006130:	f001 fd62 	bl	8007bf8 <pvPortMalloc>
 8006134:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	631a      	str	r2, [r3, #48]	@ 0x30
 8006142:	e005      	b.n	8006150 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006144:	6978      	ldr	r0, [r7, #20]
 8006146:	f001 fe25 	bl	8007d94 <vPortFree>
 800614a:	e001      	b.n	8006150 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800614c:	2300      	movs	r3, #0
 800614e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d017      	beq.n	8006186 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	2300      	movs	r3, #0
 8006162:	9303      	str	r3, [sp, #12]
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	9302      	str	r3, [sp, #8]
 8006168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f80e 	bl	8006196 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800617a:	69f8      	ldr	r0, [r7, #28]
 800617c:	f000 f89e 	bl	80062bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006180:	2301      	movs	r3, #1
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e002      	b.n	800618c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800618a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800618c:	69bb      	ldr	r3, [r7, #24]
	}
 800618e:	4618      	mov	r0, r3
 8006190:	3720      	adds	r7, #32
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b088      	sub	sp, #32
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	461a      	mov	r2, r3
 80061ae:	21a5      	movs	r1, #165	@ 0xa5
 80061b0:	f002 f982 	bl	80084b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80061be:	440b      	add	r3, r1
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	f023 0307 	bic.w	r3, r3, #7
 80061cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061dc:	b672      	cpsid	i
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	b662      	cpsie	i
 80061ec:	617b      	str	r3, [r7, #20]
}
 80061ee:	bf00      	nop
 80061f0:	bf00      	nop
 80061f2:	e7fd      	b.n	80061f0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01f      	beq.n	800623a <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	e012      	b.n	8006226 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	7819      	ldrb	r1, [r3, #0]
 8006208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	3334      	adds	r3, #52	@ 0x34
 8006210:	460a      	mov	r2, r1
 8006212:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d006      	beq.n	800622e <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b0f      	cmp	r3, #15
 800622a:	d9e9      	bls.n	8006200 <prvInitialiseNewTask+0x6a>
 800622c:	e000      	b.n	8006230 <prvInitialiseNewTask+0x9a>
			{
				break;
 800622e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006238:	e003      	b.n	8006242 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	2b37      	cmp	r3, #55	@ 0x37
 8006246:	d901      	bls.n	800624c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006248:	2337      	movs	r3, #55	@ 0x37
 800624a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006250:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006256:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	2200      	movs	r2, #0
 800625c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	3304      	adds	r3, #4
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe ff92 	bl	800518c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	3318      	adds	r3, #24
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe ff8d 	bl	800518c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006286:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	2200      	movs	r2, #0
 800628c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	68f9      	ldr	r1, [r7, #12]
 800629a:	69b8      	ldr	r0, [r7, #24]
 800629c:	f001 fa6c 	bl	8007778 <pxPortInitialiseStack>
 80062a0:	4602      	mov	r2, r0
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b2:	bf00      	nop
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062c4:	f001 fb6a 	bl	800799c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006380 <prvAddNewTaskToReadyList+0xc4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006380 <prvAddNewTaskToReadyList+0xc4>)
 80062d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006384 <prvAddNewTaskToReadyList+0xc8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062da:	4a2a      	ldr	r2, [pc, #168]	@ (8006384 <prvAddNewTaskToReadyList+0xc8>)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062e0:	4b27      	ldr	r3, [pc, #156]	@ (8006380 <prvAddNewTaskToReadyList+0xc4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d110      	bne.n	800630a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062e8:	f000 fc34 	bl	8006b54 <prvInitialiseTaskLists>
 80062ec:	e00d      	b.n	800630a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062ee:	4b26      	ldr	r3, [pc, #152]	@ (8006388 <prvAddNewTaskToReadyList+0xcc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062f6:	4b23      	ldr	r3, [pc, #140]	@ (8006384 <prvAddNewTaskToReadyList+0xc8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	429a      	cmp	r2, r3
 8006302:	d802      	bhi.n	800630a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006304:	4a1f      	ldr	r2, [pc, #124]	@ (8006384 <prvAddNewTaskToReadyList+0xc8>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800630a:	4b20      	ldr	r3, [pc, #128]	@ (800638c <prvAddNewTaskToReadyList+0xd0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	4a1e      	ldr	r2, [pc, #120]	@ (800638c <prvAddNewTaskToReadyList+0xd0>)
 8006312:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006314:	4b1d      	ldr	r3, [pc, #116]	@ (800638c <prvAddNewTaskToReadyList+0xd0>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006320:	4b1b      	ldr	r3, [pc, #108]	@ (8006390 <prvAddNewTaskToReadyList+0xd4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d903      	bls.n	8006330 <prvAddNewTaskToReadyList+0x74>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	4a18      	ldr	r2, [pc, #96]	@ (8006390 <prvAddNewTaskToReadyList+0xd4>)
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4a15      	ldr	r2, [pc, #84]	@ (8006394 <prvAddNewTaskToReadyList+0xd8>)
 800633e:	441a      	add	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	4619      	mov	r1, r3
 8006346:	4610      	mov	r0, r2
 8006348:	f7fe ff2d 	bl	80051a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800634c:	f001 fb5c 	bl	8007a08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006350:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <prvAddNewTaskToReadyList+0xcc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00e      	beq.n	8006376 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006358:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <prvAddNewTaskToReadyList+0xc8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	429a      	cmp	r2, r3
 8006364:	d207      	bcs.n	8006376 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006366:	4b0c      	ldr	r3, [pc, #48]	@ (8006398 <prvAddNewTaskToReadyList+0xdc>)
 8006368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20001670 	.word	0x20001670
 8006384:	2000119c 	.word	0x2000119c
 8006388:	2000167c 	.word	0x2000167c
 800638c:	2000168c 	.word	0x2000168c
 8006390:	20001678 	.word	0x20001678
 8006394:	200011a0 	.word	0x200011a0
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01a      	beq.n	80063e4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063ae:	4b15      	ldr	r3, [pc, #84]	@ (8006404 <vTaskDelay+0x68>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00d      	beq.n	80063d2 <vTaskDelay+0x36>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	b672      	cpsid	i
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	b662      	cpsie	i
 80063ca:	60bb      	str	r3, [r7, #8]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <vTaskDelay+0x32>
			vTaskSuspendAll();
 80063d2:	f000 f887 	bl	80064e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063d6:	2100      	movs	r1, #0
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fe11 	bl	8007000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063de:	f000 f88f 	bl	8006500 <xTaskResumeAll>
 80063e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d107      	bne.n	80063fa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80063ea:	4b07      	ldr	r3, [pc, #28]	@ (8006408 <vTaskDelay+0x6c>)
 80063ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20001698 	.word	0x20001698
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	@ 0x28
 8006410:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800641a:	463a      	mov	r2, r7
 800641c:	1d39      	adds	r1, r7, #4
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fe5e 	bl	80050e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	9202      	str	r2, [sp, #8]
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	2300      	movs	r3, #0
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	2300      	movs	r3, #0
 8006438:	460a      	mov	r2, r1
 800643a:	4924      	ldr	r1, [pc, #144]	@ (80064cc <vTaskStartScheduler+0xc0>)
 800643c:	4824      	ldr	r0, [pc, #144]	@ (80064d0 <vTaskStartScheduler+0xc4>)
 800643e:	f7ff fdff 	bl	8006040 <xTaskCreateStatic>
 8006442:	4603      	mov	r3, r0
 8006444:	4a23      	ldr	r2, [pc, #140]	@ (80064d4 <vTaskStartScheduler+0xc8>)
 8006446:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006448:	4b22      	ldr	r3, [pc, #136]	@ (80064d4 <vTaskStartScheduler+0xc8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006450:	2301      	movs	r3, #1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	e001      	b.n	800645a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d102      	bne.n	8006466 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006460:	f000 fe22 	bl	80070a8 <xTimerCreateTimerTask>
 8006464:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d118      	bne.n	800649e <vTaskStartScheduler+0x92>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	b672      	cpsid	i
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	b662      	cpsie	i
 8006480:	613b      	str	r3, [r7, #16]
}
 8006482:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006484:	4b14      	ldr	r3, [pc, #80]	@ (80064d8 <vTaskStartScheduler+0xcc>)
 8006486:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800648a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800648c:	4b13      	ldr	r3, [pc, #76]	@ (80064dc <vTaskStartScheduler+0xd0>)
 800648e:	2201      	movs	r2, #1
 8006490:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006492:	4b13      	ldr	r3, [pc, #76]	@ (80064e0 <vTaskStartScheduler+0xd4>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006498:	f001 fa02 	bl	80078a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800649c:	e011      	b.n	80064c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064a4:	d10d      	bne.n	80064c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	b672      	cpsid	i
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	b662      	cpsie	i
 80064ba:	60fb      	str	r3, [r7, #12]
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	e7fd      	b.n	80064be <vTaskStartScheduler+0xb2>
}
 80064c2:	bf00      	nop
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	0800963c 	.word	0x0800963c
 80064d0:	08006b25 	.word	0x08006b25
 80064d4:	20001694 	.word	0x20001694
 80064d8:	20001690 	.word	0x20001690
 80064dc:	2000167c 	.word	0x2000167c
 80064e0:	20001674 	.word	0x20001674

080064e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80064e8:	4b04      	ldr	r3, [pc, #16]	@ (80064fc <vTaskSuspendAll+0x18>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3301      	adds	r3, #1
 80064ee:	4a03      	ldr	r2, [pc, #12]	@ (80064fc <vTaskSuspendAll+0x18>)
 80064f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80064f2:	bf00      	nop
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	20001698 	.word	0x20001698

08006500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800650e:	4b43      	ldr	r3, [pc, #268]	@ (800661c <xTaskResumeAll+0x11c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10d      	bne.n	8006532 <xTaskResumeAll+0x32>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	b672      	cpsid	i
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	b662      	cpsie	i
 800652a:	603b      	str	r3, [r7, #0]
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006532:	f001 fa33 	bl	800799c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006536:	4b39      	ldr	r3, [pc, #228]	@ (800661c <xTaskResumeAll+0x11c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3b01      	subs	r3, #1
 800653c:	4a37      	ldr	r2, [pc, #220]	@ (800661c <xTaskResumeAll+0x11c>)
 800653e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006540:	4b36      	ldr	r3, [pc, #216]	@ (800661c <xTaskResumeAll+0x11c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d162      	bne.n	800660e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006548:	4b35      	ldr	r3, [pc, #212]	@ (8006620 <xTaskResumeAll+0x120>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d05e      	beq.n	800660e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006550:	e02f      	b.n	80065b2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006552:	4b34      	ldr	r3, [pc, #208]	@ (8006624 <xTaskResumeAll+0x124>)
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3318      	adds	r3, #24
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe fe7e 	bl	8005260 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3304      	adds	r3, #4
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe fe79 	bl	8005260 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006572:	4b2d      	ldr	r3, [pc, #180]	@ (8006628 <xTaskResumeAll+0x128>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d903      	bls.n	8006582 <xTaskResumeAll+0x82>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	4a2a      	ldr	r2, [pc, #168]	@ (8006628 <xTaskResumeAll+0x128>)
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4a27      	ldr	r2, [pc, #156]	@ (800662c <xTaskResumeAll+0x12c>)
 8006590:	441a      	add	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f7fe fe04 	bl	80051a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a2:	4b23      	ldr	r3, [pc, #140]	@ (8006630 <xTaskResumeAll+0x130>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d302      	bcc.n	80065b2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80065ac:	4b21      	ldr	r3, [pc, #132]	@ (8006634 <xTaskResumeAll+0x134>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006624 <xTaskResumeAll+0x124>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1cb      	bne.n	8006552 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065c0:	f000 fb68 	bl	8006c94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006638 <xTaskResumeAll+0x138>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065d0:	f000 f846 	bl	8006660 <xTaskIncrementTick>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80065da:	4b16      	ldr	r3, [pc, #88]	@ (8006634 <xTaskResumeAll+0x134>)
 80065dc:	2201      	movs	r2, #1
 80065de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f1      	bne.n	80065d0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80065ec:	4b12      	ldr	r3, [pc, #72]	@ (8006638 <xTaskResumeAll+0x138>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065f2:	4b10      	ldr	r3, [pc, #64]	@ (8006634 <xTaskResumeAll+0x134>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065fa:	2301      	movs	r3, #1
 80065fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065fe:	4b0f      	ldr	r3, [pc, #60]	@ (800663c <xTaskResumeAll+0x13c>)
 8006600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800660e:	f001 f9fb 	bl	8007a08 <vPortExitCritical>

	return xAlreadyYielded;
 8006612:	68bb      	ldr	r3, [r7, #8]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20001698 	.word	0x20001698
 8006620:	20001670 	.word	0x20001670
 8006624:	20001630 	.word	0x20001630
 8006628:	20001678 	.word	0x20001678
 800662c:	200011a0 	.word	0x200011a0
 8006630:	2000119c 	.word	0x2000119c
 8006634:	20001684 	.word	0x20001684
 8006638:	20001680 	.word	0x20001680
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006646:	4b05      	ldr	r3, [pc, #20]	@ (800665c <xTaskGetTickCount+0x1c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800664c:	687b      	ldr	r3, [r7, #4]
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20001674 	.word	0x20001674

08006660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666a:	4b50      	ldr	r3, [pc, #320]	@ (80067ac <xTaskIncrementTick+0x14c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f040 808c 	bne.w	800678c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006674:	4b4e      	ldr	r3, [pc, #312]	@ (80067b0 <xTaskIncrementTick+0x150>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800667c:	4a4c      	ldr	r2, [pc, #304]	@ (80067b0 <xTaskIncrementTick+0x150>)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d123      	bne.n	80066d0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006688:	4b4a      	ldr	r3, [pc, #296]	@ (80067b4 <xTaskIncrementTick+0x154>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00d      	beq.n	80066ae <xTaskIncrementTick+0x4e>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006696:	b672      	cpsid	i
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	b662      	cpsie	i
 80066a6:	603b      	str	r3, [r7, #0]
}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	e7fd      	b.n	80066aa <xTaskIncrementTick+0x4a>
 80066ae:	4b41      	ldr	r3, [pc, #260]	@ (80067b4 <xTaskIncrementTick+0x154>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	4b40      	ldr	r3, [pc, #256]	@ (80067b8 <xTaskIncrementTick+0x158>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a3e      	ldr	r2, [pc, #248]	@ (80067b4 <xTaskIncrementTick+0x154>)
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	4a3e      	ldr	r2, [pc, #248]	@ (80067b8 <xTaskIncrementTick+0x158>)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	4b3e      	ldr	r3, [pc, #248]	@ (80067bc <xTaskIncrementTick+0x15c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3301      	adds	r3, #1
 80066c8:	4a3c      	ldr	r2, [pc, #240]	@ (80067bc <xTaskIncrementTick+0x15c>)
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	f000 fae2 	bl	8006c94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066d0:	4b3b      	ldr	r3, [pc, #236]	@ (80067c0 <xTaskIncrementTick+0x160>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d349      	bcc.n	800676e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066da:	4b36      	ldr	r3, [pc, #216]	@ (80067b4 <xTaskIncrementTick+0x154>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e4:	4b36      	ldr	r3, [pc, #216]	@ (80067c0 <xTaskIncrementTick+0x160>)
 80066e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066ea:	601a      	str	r2, [r3, #0]
					break;
 80066ec:	e03f      	b.n	800676e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ee:	4b31      	ldr	r3, [pc, #196]	@ (80067b4 <xTaskIncrementTick+0x154>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d203      	bcs.n	800670e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006706:	4a2e      	ldr	r2, [pc, #184]	@ (80067c0 <xTaskIncrementTick+0x160>)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800670c:	e02f      	b.n	800676e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	3304      	adds	r3, #4
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe fda4 	bl	8005260 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	3318      	adds	r3, #24
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe fd9b 	bl	8005260 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800672e:	4b25      	ldr	r3, [pc, #148]	@ (80067c4 <xTaskIncrementTick+0x164>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d903      	bls.n	800673e <xTaskIncrementTick+0xde>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	4a22      	ldr	r2, [pc, #136]	@ (80067c4 <xTaskIncrementTick+0x164>)
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4a1f      	ldr	r2, [pc, #124]	@ (80067c8 <xTaskIncrementTick+0x168>)
 800674c:	441a      	add	r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	3304      	adds	r3, #4
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f7fe fd26 	bl	80051a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800675e:	4b1b      	ldr	r3, [pc, #108]	@ (80067cc <xTaskIncrementTick+0x16c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	429a      	cmp	r2, r3
 8006766:	d3b8      	bcc.n	80066da <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006768:	2301      	movs	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800676c:	e7b5      	b.n	80066da <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800676e:	4b17      	ldr	r3, [pc, #92]	@ (80067cc <xTaskIncrementTick+0x16c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006774:	4914      	ldr	r1, [pc, #80]	@ (80067c8 <xTaskIncrementTick+0x168>)
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d907      	bls.n	8006796 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006786:	2301      	movs	r3, #1
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	e004      	b.n	8006796 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800678c:	4b10      	ldr	r3, [pc, #64]	@ (80067d0 <xTaskIncrementTick+0x170>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3301      	adds	r3, #1
 8006792:	4a0f      	ldr	r2, [pc, #60]	@ (80067d0 <xTaskIncrementTick+0x170>)
 8006794:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006796:	4b0f      	ldr	r3, [pc, #60]	@ (80067d4 <xTaskIncrementTick+0x174>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800679e:	2301      	movs	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067a2:	697b      	ldr	r3, [r7, #20]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20001698 	.word	0x20001698
 80067b0:	20001674 	.word	0x20001674
 80067b4:	20001628 	.word	0x20001628
 80067b8:	2000162c 	.word	0x2000162c
 80067bc:	20001688 	.word	0x20001688
 80067c0:	20001690 	.word	0x20001690
 80067c4:	20001678 	.word	0x20001678
 80067c8:	200011a0 	.word	0x200011a0
 80067cc:	2000119c 	.word	0x2000119c
 80067d0:	20001680 	.word	0x20001680
 80067d4:	20001684 	.word	0x20001684

080067d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067de:	4b29      	ldr	r3, [pc, #164]	@ (8006884 <vTaskSwitchContext+0xac>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067e6:	4b28      	ldr	r3, [pc, #160]	@ (8006888 <vTaskSwitchContext+0xb0>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067ec:	e044      	b.n	8006878 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80067ee:	4b26      	ldr	r3, [pc, #152]	@ (8006888 <vTaskSwitchContext+0xb0>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f4:	4b25      	ldr	r3, [pc, #148]	@ (800688c <vTaskSwitchContext+0xb4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e013      	b.n	8006824 <vTaskSwitchContext+0x4c>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10d      	bne.n	800681e <vTaskSwitchContext+0x46>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006806:	b672      	cpsid	i
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	b662      	cpsie	i
 8006816:	607b      	str	r3, [r7, #4]
}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <vTaskSwitchContext+0x42>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b01      	subs	r3, #1
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	491a      	ldr	r1, [pc, #104]	@ (8006890 <vTaskSwitchContext+0xb8>)
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0e1      	beq.n	80067fc <vTaskSwitchContext+0x24>
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4a13      	ldr	r2, [pc, #76]	@ (8006890 <vTaskSwitchContext+0xb8>)
 8006844:	4413      	add	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	605a      	str	r2, [r3, #4]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3308      	adds	r3, #8
 800685a:	429a      	cmp	r2, r3
 800685c:	d104      	bne.n	8006868 <vTaskSwitchContext+0x90>
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	4a09      	ldr	r2, [pc, #36]	@ (8006894 <vTaskSwitchContext+0xbc>)
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4a06      	ldr	r2, [pc, #24]	@ (800688c <vTaskSwitchContext+0xb4>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6013      	str	r3, [r2, #0]
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	20001698 	.word	0x20001698
 8006888:	20001684 	.word	0x20001684
 800688c:	20001678 	.word	0x20001678
 8006890:	200011a0 	.word	0x200011a0
 8006894:	2000119c 	.word	0x2000119c

08006898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10d      	bne.n	80068c4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	b672      	cpsid	i
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	b662      	cpsie	i
 80068bc:	60fb      	str	r3, [r7, #12]
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	e7fd      	b.n	80068c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068c4:	4b07      	ldr	r3, [pc, #28]	@ (80068e4 <vTaskPlaceOnEventList+0x4c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3318      	adds	r3, #24
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fe fc8e 	bl	80051ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068d2:	2101      	movs	r1, #1
 80068d4:	6838      	ldr	r0, [r7, #0]
 80068d6:	f000 fb93 	bl	8007000 <prvAddCurrentTaskToDelayedList>
}
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	2000119c 	.word	0x2000119c

080068e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fe:	b672      	cpsid	i
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	b662      	cpsie	i
 800690e:	617b      	str	r3, [r7, #20]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006916:	4b0a      	ldr	r3, [pc, #40]	@ (8006940 <vTaskPlaceOnEventListRestricted+0x58>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3318      	adds	r3, #24
 800691c:	4619      	mov	r1, r3
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7fe fc41 	bl	80051a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800692e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	68b8      	ldr	r0, [r7, #8]
 8006934:	f000 fb64 	bl	8007000 <prvAddCurrentTaskToDelayedList>
	}
 8006938:	bf00      	nop
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	2000119c 	.word	0x2000119c

08006944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10d      	bne.n	8006976 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	b672      	cpsid	i
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	b662      	cpsie	i
 800696e:	60fb      	str	r3, [r7, #12]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	3318      	adds	r3, #24
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fc70 	bl	8005260 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006980:	4b1d      	ldr	r3, [pc, #116]	@ (80069f8 <xTaskRemoveFromEventList+0xb4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11d      	bne.n	80069c4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	3304      	adds	r3, #4
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe fc67 	bl	8005260 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006996:	4b19      	ldr	r3, [pc, #100]	@ (80069fc <xTaskRemoveFromEventList+0xb8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d903      	bls.n	80069a6 <xTaskRemoveFromEventList+0x62>
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	4a16      	ldr	r2, [pc, #88]	@ (80069fc <xTaskRemoveFromEventList+0xb8>)
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4a13      	ldr	r2, [pc, #76]	@ (8006a00 <xTaskRemoveFromEventList+0xbc>)
 80069b4:	441a      	add	r2, r3
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f7fe fbf2 	bl	80051a6 <vListInsertEnd>
 80069c2:	e005      	b.n	80069d0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	3318      	adds	r3, #24
 80069c8:	4619      	mov	r1, r3
 80069ca:	480e      	ldr	r0, [pc, #56]	@ (8006a04 <xTaskRemoveFromEventList+0xc0>)
 80069cc:	f7fe fbeb 	bl	80051a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a08 <xTaskRemoveFromEventList+0xc4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	429a      	cmp	r2, r3
 80069dc:	d905      	bls.n	80069ea <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069e2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <xTaskRemoveFromEventList+0xc8>)
 80069e4:	2201      	movs	r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e001      	b.n	80069ee <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069ee:	697b      	ldr	r3, [r7, #20]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20001698 	.word	0x20001698
 80069fc:	20001678 	.word	0x20001678
 8006a00:	200011a0 	.word	0x200011a0
 8006a04:	20001630 	.word	0x20001630
 8006a08:	2000119c 	.word	0x2000119c
 8006a0c:	20001684 	.word	0x20001684

08006a10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a18:	4b06      	ldr	r3, [pc, #24]	@ (8006a34 <vTaskInternalSetTimeOutState+0x24>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a20:	4b05      	ldr	r3, [pc, #20]	@ (8006a38 <vTaskInternalSetTimeOutState+0x28>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	605a      	str	r2, [r3, #4]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	20001688 	.word	0x20001688
 8006a38:	20001674 	.word	0x20001674

08006a3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10d      	bne.n	8006a68 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a50:	b672      	cpsid	i
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	b662      	cpsie	i
 8006a60:	613b      	str	r3, [r7, #16]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10d      	bne.n	8006a8a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	b672      	cpsid	i
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	b662      	cpsie	i
 8006a82:	60fb      	str	r3, [r7, #12]
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	e7fd      	b.n	8006a86 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006a8a:	f000 ff87 	bl	800799c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b04 <xTaskCheckForTimeOut+0xc8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aa6:	d102      	bne.n	8006aae <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	e023      	b.n	8006af6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b15      	ldr	r3, [pc, #84]	@ (8006b08 <xTaskCheckForTimeOut+0xcc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d007      	beq.n	8006aca <xTaskCheckForTimeOut+0x8e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d302      	bcc.n	8006aca <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	e015      	b.n	8006af6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d20b      	bcs.n	8006aec <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	1ad2      	subs	r2, r2, r3
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff95 	bl	8006a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	e004      	b.n	8006af6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006af2:	2301      	movs	r3, #1
 8006af4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006af6:	f000 ff87 	bl	8007a08 <vPortExitCritical>

	return xReturn;
 8006afa:	69fb      	ldr	r3, [r7, #28]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20001674 	.word	0x20001674
 8006b08:	20001688 	.word	0x20001688

08006b0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b10:	4b03      	ldr	r3, [pc, #12]	@ (8006b20 <vTaskMissedYield+0x14>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
}
 8006b16:	bf00      	nop
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20001684 	.word	0x20001684

08006b24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b2c:	f000 f852 	bl	8006bd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b30:	4b06      	ldr	r3, [pc, #24]	@ (8006b4c <prvIdleTask+0x28>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d9f9      	bls.n	8006b2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b38:	4b05      	ldr	r3, [pc, #20]	@ (8006b50 <prvIdleTask+0x2c>)
 8006b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b48:	e7f0      	b.n	8006b2c <prvIdleTask+0x8>
 8006b4a:	bf00      	nop
 8006b4c:	200011a0 	.word	0x200011a0
 8006b50:	e000ed04 	.word	0xe000ed04

08006b54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	607b      	str	r3, [r7, #4]
 8006b5e:	e00c      	b.n	8006b7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4a12      	ldr	r2, [pc, #72]	@ (8006bb4 <prvInitialiseTaskLists+0x60>)
 8006b6c:	4413      	add	r3, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe faec 	bl	800514c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3301      	adds	r3, #1
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b37      	cmp	r3, #55	@ 0x37
 8006b7e:	d9ef      	bls.n	8006b60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b80:	480d      	ldr	r0, [pc, #52]	@ (8006bb8 <prvInitialiseTaskLists+0x64>)
 8006b82:	f7fe fae3 	bl	800514c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b86:	480d      	ldr	r0, [pc, #52]	@ (8006bbc <prvInitialiseTaskLists+0x68>)
 8006b88:	f7fe fae0 	bl	800514c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b8c:	480c      	ldr	r0, [pc, #48]	@ (8006bc0 <prvInitialiseTaskLists+0x6c>)
 8006b8e:	f7fe fadd 	bl	800514c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b92:	480c      	ldr	r0, [pc, #48]	@ (8006bc4 <prvInitialiseTaskLists+0x70>)
 8006b94:	f7fe fada 	bl	800514c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b98:	480b      	ldr	r0, [pc, #44]	@ (8006bc8 <prvInitialiseTaskLists+0x74>)
 8006b9a:	f7fe fad7 	bl	800514c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bcc <prvInitialiseTaskLists+0x78>)
 8006ba0:	4a05      	ldr	r2, [pc, #20]	@ (8006bb8 <prvInitialiseTaskLists+0x64>)
 8006ba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <prvInitialiseTaskLists+0x7c>)
 8006ba6:	4a05      	ldr	r2, [pc, #20]	@ (8006bbc <prvInitialiseTaskLists+0x68>)
 8006ba8:	601a      	str	r2, [r3, #0]
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200011a0 	.word	0x200011a0
 8006bb8:	20001600 	.word	0x20001600
 8006bbc:	20001614 	.word	0x20001614
 8006bc0:	20001630 	.word	0x20001630
 8006bc4:	20001644 	.word	0x20001644
 8006bc8:	2000165c 	.word	0x2000165c
 8006bcc:	20001628 	.word	0x20001628
 8006bd0:	2000162c 	.word	0x2000162c

08006bd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bda:	e019      	b.n	8006c10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bdc:	f000 fede 	bl	800799c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be0:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <prvCheckTasksWaitingTermination+0x50>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fe fb37 	bl	8005260 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <prvCheckTasksWaitingTermination+0x54>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8006c28 <prvCheckTasksWaitingTermination+0x54>)
 8006bfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <prvCheckTasksWaitingTermination+0x58>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	4a0a      	ldr	r2, [pc, #40]	@ (8006c2c <prvCheckTasksWaitingTermination+0x58>)
 8006c04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c06:	f000 feff 	bl	8007a08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f810 	bl	8006c30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c10:	4b06      	ldr	r3, [pc, #24]	@ (8006c2c <prvCheckTasksWaitingTermination+0x58>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e1      	bne.n	8006bdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20001644 	.word	0x20001644
 8006c28:	20001670 	.word	0x20001670
 8006c2c:	20001658 	.word	0x20001658

08006c30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d108      	bne.n	8006c54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 f8a4 	bl	8007d94 <vPortFree>
				vPortFree( pxTCB );
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f8a1 	bl	8007d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c52:	e01b      	b.n	8006c8c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d103      	bne.n	8006c66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 f898 	bl	8007d94 <vPortFree>
	}
 8006c64:	e012      	b.n	8006c8c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d00d      	beq.n	8006c8c <prvDeleteTCB+0x5c>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	b672      	cpsid	i
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	b662      	cpsie	i
 8006c84:	60fb      	str	r3, [r7, #12]
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	e7fd      	b.n	8006c88 <prvDeleteTCB+0x58>
	}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006ccc <prvResetNextTaskUnblockTime+0x38>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d104      	bne.n	8006cae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ca6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006caa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cac:	e008      	b.n	8006cc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cae:	4b07      	ldr	r3, [pc, #28]	@ (8006ccc <prvResetNextTaskUnblockTime+0x38>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	4a04      	ldr	r2, [pc, #16]	@ (8006cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8006cbe:	6013      	str	r3, [r2, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	20001628 	.word	0x20001628
 8006cd0:	20001690 	.word	0x20001690

08006cd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cda:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <xTaskGetSchedulerState+0x34>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d102      	bne.n	8006ce8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	607b      	str	r3, [r7, #4]
 8006ce6:	e008      	b.n	8006cfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ce8:	4b08      	ldr	r3, [pc, #32]	@ (8006d0c <xTaskGetSchedulerState+0x38>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d102      	bne.n	8006cf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	607b      	str	r3, [r7, #4]
 8006cf4:	e001      	b.n	8006cfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cfa:	687b      	ldr	r3, [r7, #4]
	}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	2000167c 	.word	0x2000167c
 8006d0c:	20001698 	.word	0x20001698

08006d10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d051      	beq.n	8006dca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd4 <xTaskPriorityInherit+0xc4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d241      	bcs.n	8006db8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	db06      	blt.n	8006d4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d3c:	4b25      	ldr	r3, [pc, #148]	@ (8006dd4 <xTaskPriorityInherit+0xc4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6959      	ldr	r1, [r3, #20]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd8 <xTaskPriorityInherit+0xc8>)
 8006d5c:	4413      	add	r3, r2
 8006d5e:	4299      	cmp	r1, r3
 8006d60:	d122      	bne.n	8006da8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fa7a 	bl	8005260 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d6c:	4b19      	ldr	r3, [pc, #100]	@ (8006dd4 <xTaskPriorityInherit+0xc4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7a:	4b18      	ldr	r3, [pc, #96]	@ (8006ddc <xTaskPriorityInherit+0xcc>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d903      	bls.n	8006d8a <xTaskPriorityInherit+0x7a>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d86:	4a15      	ldr	r2, [pc, #84]	@ (8006ddc <xTaskPriorityInherit+0xcc>)
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4a10      	ldr	r2, [pc, #64]	@ (8006dd8 <xTaskPriorityInherit+0xc8>)
 8006d98:	441a      	add	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f7fe fa00 	bl	80051a6 <vListInsertEnd>
 8006da6:	e004      	b.n	8006db2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006da8:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd4 <xTaskPriorityInherit+0xc4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	e008      	b.n	8006dca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006dbc:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <xTaskPriorityInherit+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d201      	bcs.n	8006dca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dca:	68fb      	ldr	r3, [r7, #12]
	}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	2000119c 	.word	0x2000119c
 8006dd8:	200011a0 	.word	0x200011a0
 8006ddc:	20001678 	.word	0x20001678

08006de0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d05c      	beq.n	8006eb0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006df6:	4b31      	ldr	r3, [pc, #196]	@ (8006ebc <xTaskPriorityDisinherit+0xdc>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d00d      	beq.n	8006e1c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e04:	b672      	cpsid	i
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	b662      	cpsie	i
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10d      	bne.n	8006e40 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	b672      	cpsid	i
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	b662      	cpsie	i
 8006e38:	60bb      	str	r3, [r7, #8]
}
 8006e3a:	bf00      	nop
 8006e3c:	bf00      	nop
 8006e3e:	e7fd      	b.n	8006e3c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e44:	1e5a      	subs	r2, r3, #1
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d02c      	beq.n	8006eb0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d128      	bne.n	8006eb0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	3304      	adds	r3, #4
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe f9fc 	bl	8005260 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e80:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec0 <xTaskPriorityDisinherit+0xe0>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d903      	bls.n	8006e90 <xTaskPriorityDisinherit+0xb0>
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8006ec0 <xTaskPriorityDisinherit+0xe0>)
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4a09      	ldr	r2, [pc, #36]	@ (8006ec4 <xTaskPriorityDisinherit+0xe4>)
 8006e9e:	441a      	add	r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f7fe f97d 	bl	80051a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006eac:	2301      	movs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006eb0:	697b      	ldr	r3, [r7, #20]
	}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	2000119c 	.word	0x2000119c
 8006ec0:	20001678 	.word	0x20001678
 8006ec4:	200011a0 	.word	0x200011a0

08006ec8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d070      	beq.n	8006fc2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10d      	bne.n	8006f04 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eec:	b672      	cpsid	i
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	b662      	cpsie	i
 8006efc:	60fb      	str	r3, [r7, #12]
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d902      	bls.n	8006f14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	e002      	b.n	8006f1a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f18:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d04e      	beq.n	8006fc2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d149      	bne.n	8006fc2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f2e:	4b27      	ldr	r3, [pc, #156]	@ (8006fcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d10d      	bne.n	8006f54 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	b672      	cpsid	i
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	b662      	cpsie	i
 8006f4c:	60bb      	str	r3, [r7, #8]
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	e7fd      	b.n	8006f50 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	db04      	blt.n	8006f72 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	6959      	ldr	r1, [r3, #20]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4a13      	ldr	r2, [pc, #76]	@ (8006fd0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f82:	4413      	add	r3, r2
 8006f84:	4299      	cmp	r1, r3
 8006f86:	d11c      	bne.n	8006fc2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe f967 	bl	8005260 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f96:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d903      	bls.n	8006fa6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4a07      	ldr	r2, [pc, #28]	@ (8006fd0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006fb4:	441a      	add	r2, r3
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	f7fe f8f2 	bl	80051a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fc2:	bf00      	nop
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	2000119c 	.word	0x2000119c
 8006fd0:	200011a0 	.word	0x200011a0
 8006fd4:	20001678 	.word	0x20001678

08006fd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fdc:	4b07      	ldr	r3, [pc, #28]	@ (8006ffc <pvTaskIncrementMutexHeldCount+0x24>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fe4:	4b05      	ldr	r3, [pc, #20]	@ (8006ffc <pvTaskIncrementMutexHeldCount+0x24>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fea:	3201      	adds	r2, #1
 8006fec:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006fee:	4b03      	ldr	r3, [pc, #12]	@ (8006ffc <pvTaskIncrementMutexHeldCount+0x24>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
	}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	2000119c 	.word	0x2000119c

08007000 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800700a:	4b21      	ldr	r3, [pc, #132]	@ (8007090 <prvAddCurrentTaskToDelayedList+0x90>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007010:	4b20      	ldr	r3, [pc, #128]	@ (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe f922 	bl	8005260 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007022:	d10a      	bne.n	800703a <prvAddCurrentTaskToDelayedList+0x3a>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702a:	4b1a      	ldr	r3, [pc, #104]	@ (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4819      	ldr	r0, [pc, #100]	@ (8007098 <prvAddCurrentTaskToDelayedList+0x98>)
 8007034:	f7fe f8b7 	bl	80051a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007038:	e026      	b.n	8007088 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4413      	add	r3, r2
 8007040:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007042:	4b14      	ldr	r3, [pc, #80]	@ (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	429a      	cmp	r2, r3
 8007050:	d209      	bcs.n	8007066 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007052:	4b12      	ldr	r3, [pc, #72]	@ (800709c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4b0f      	ldr	r3, [pc, #60]	@ (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3304      	adds	r3, #4
 800705c:	4619      	mov	r1, r3
 800705e:	4610      	mov	r0, r2
 8007060:	f7fe f8c5 	bl	80051ee <vListInsert>
}
 8007064:	e010      	b.n	8007088 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007066:	4b0e      	ldr	r3, [pc, #56]	@ (80070a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4b0a      	ldr	r3, [pc, #40]	@ (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f7fe f8bb 	bl	80051ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007078:	4b0a      	ldr	r3, [pc, #40]	@ (80070a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	429a      	cmp	r2, r3
 8007080:	d202      	bcs.n	8007088 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007082:	4a08      	ldr	r2, [pc, #32]	@ (80070a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	6013      	str	r3, [r2, #0]
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20001674 	.word	0x20001674
 8007094:	2000119c 	.word	0x2000119c
 8007098:	2000165c 	.word	0x2000165c
 800709c:	2000162c 	.word	0x2000162c
 80070a0:	20001628 	.word	0x20001628
 80070a4:	20001690 	.word	0x20001690

080070a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	@ 0x28
 80070ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070b2:	f000 fb21 	bl	80076f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007130 <xTimerCreateTimerTask+0x88>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d021      	beq.n	8007102 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070c6:	1d3a      	adds	r2, r7, #4
 80070c8:	f107 0108 	add.w	r1, r7, #8
 80070cc:	f107 030c 	add.w	r3, r7, #12
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe f821 	bl	8005118 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	9202      	str	r2, [sp, #8]
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	2302      	movs	r3, #2
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	2300      	movs	r3, #0
 80070e6:	460a      	mov	r2, r1
 80070e8:	4912      	ldr	r1, [pc, #72]	@ (8007134 <xTimerCreateTimerTask+0x8c>)
 80070ea:	4813      	ldr	r0, [pc, #76]	@ (8007138 <xTimerCreateTimerTask+0x90>)
 80070ec:	f7fe ffa8 	bl	8006040 <xTaskCreateStatic>
 80070f0:	4603      	mov	r3, r0
 80070f2:	4a12      	ldr	r2, [pc, #72]	@ (800713c <xTimerCreateTimerTask+0x94>)
 80070f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070f6:	4b11      	ldr	r3, [pc, #68]	@ (800713c <xTimerCreateTimerTask+0x94>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070fe:	2301      	movs	r3, #1
 8007100:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10d      	bne.n	8007124 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710c:	b672      	cpsid	i
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	b662      	cpsie	i
 800711c:	613b      	str	r3, [r7, #16]
}
 800711e:	bf00      	nop
 8007120:	bf00      	nop
 8007122:	e7fd      	b.n	8007120 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007124:	697b      	ldr	r3, [r7, #20]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	200016cc 	.word	0x200016cc
 8007134:	08009644 	.word	0x08009644
 8007138:	08007281 	.word	0x08007281
 800713c:	200016d0 	.word	0x200016d0

08007140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	@ 0x28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10d      	bne.n	8007174 <xTimerGenericCommand+0x34>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715c:	b672      	cpsid	i
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	b662      	cpsie	i
 800716c:	623b      	str	r3, [r7, #32]
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	e7fd      	b.n	8007170 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007174:	4b19      	ldr	r3, [pc, #100]	@ (80071dc <xTimerGenericCommand+0x9c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d02a      	beq.n	80071d2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b05      	cmp	r3, #5
 800718c:	dc18      	bgt.n	80071c0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800718e:	f7ff fda1 	bl	8006cd4 <xTaskGetSchedulerState>
 8007192:	4603      	mov	r3, r0
 8007194:	2b02      	cmp	r3, #2
 8007196:	d109      	bne.n	80071ac <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007198:	4b10      	ldr	r3, [pc, #64]	@ (80071dc <xTimerGenericCommand+0x9c>)
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	f107 0110 	add.w	r1, r7, #16
 80071a0:	2300      	movs	r3, #0
 80071a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a4:	f7fe fa18 	bl	80055d8 <xQueueGenericSend>
 80071a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80071aa:	e012      	b.n	80071d2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071ac:	4b0b      	ldr	r3, [pc, #44]	@ (80071dc <xTimerGenericCommand+0x9c>)
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	f107 0110 	add.w	r1, r7, #16
 80071b4:	2300      	movs	r3, #0
 80071b6:	2200      	movs	r2, #0
 80071b8:	f7fe fa0e 	bl	80055d8 <xQueueGenericSend>
 80071bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80071be:	e008      	b.n	80071d2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071c0:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <xTimerGenericCommand+0x9c>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	f107 0110 	add.w	r1, r7, #16
 80071c8:	2300      	movs	r3, #0
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	f7fe fb0e 	bl	80057ec <xQueueGenericSendFromISR>
 80071d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3728      	adds	r7, #40	@ 0x28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	200016cc 	.word	0x200016cc

080071e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ea:	4b24      	ldr	r3, [pc, #144]	@ (800727c <prvProcessExpiredTimer+0x9c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe f831 	bl	8005260 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d025      	beq.n	8007258 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	18d1      	adds	r1, r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	6978      	ldr	r0, [r7, #20]
 800721a:	f000 f8d7 	bl	80073cc <prvInsertTimerInActiveList>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d022      	beq.n	800726a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007224:	2300      	movs	r3, #0
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2300      	movs	r3, #0
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	2100      	movs	r1, #0
 800722e:	6978      	ldr	r0, [r7, #20]
 8007230:	f7ff ff86 	bl	8007140 <xTimerGenericCommand>
 8007234:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d116      	bne.n	800726a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	b672      	cpsid	i
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	b662      	cpsie	i
 8007250:	60fb      	str	r3, [r7, #12]
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	e7fd      	b.n	8007254 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800725e:	f023 0301 	bic.w	r3, r3, #1
 8007262:	b2da      	uxtb	r2, r3
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	6978      	ldr	r0, [r7, #20]
 8007270:	4798      	blx	r3
}
 8007272:	bf00      	nop
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	200016c4 	.word	0x200016c4

08007280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007288:	f107 0308 	add.w	r3, r7, #8
 800728c:	4618      	mov	r0, r3
 800728e:	f000 f859 	bl	8007344 <prvGetNextExpireTime>
 8007292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4619      	mov	r1, r3
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f805 	bl	80072a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800729e:	f000 f8d7 	bl	8007450 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072a2:	bf00      	nop
 80072a4:	e7f0      	b.n	8007288 <prvTimerTask+0x8>
	...

080072a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072b2:	f7ff f917 	bl	80064e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072b6:	f107 0308 	add.w	r3, r7, #8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 f866 	bl	800738c <prvSampleTimeNow>
 80072c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d130      	bne.n	800732a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <prvProcessTimerOrBlockTask+0x3c>
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d806      	bhi.n	80072e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072d6:	f7ff f913 	bl	8006500 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff7f 	bl	80071e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072e2:	e024      	b.n	800732e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072ea:	4b13      	ldr	r3, [pc, #76]	@ (8007338 <prvProcessTimerOrBlockTask+0x90>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <prvProcessTimerOrBlockTask+0x50>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <prvProcessTimerOrBlockTask+0x52>
 80072f8:	2300      	movs	r3, #0
 80072fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072fc:	4b0f      	ldr	r3, [pc, #60]	@ (800733c <prvProcessTimerOrBlockTask+0x94>)
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	4619      	mov	r1, r3
 800730a:	f7fe fe65 	bl	8005fd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800730e:	f7ff f8f7 	bl	8006500 <xTaskResumeAll>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007318:	4b09      	ldr	r3, [pc, #36]	@ (8007340 <prvProcessTimerOrBlockTask+0x98>)
 800731a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
}
 8007328:	e001      	b.n	800732e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800732a:	f7ff f8e9 	bl	8006500 <xTaskResumeAll>
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	200016c8 	.word	0x200016c8
 800733c:	200016cc 	.word	0x200016cc
 8007340:	e000ed04 	.word	0xe000ed04

08007344 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800734c:	4b0e      	ldr	r3, [pc, #56]	@ (8007388 <prvGetNextExpireTime+0x44>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <prvGetNextExpireTime+0x16>
 8007356:	2201      	movs	r2, #1
 8007358:	e000      	b.n	800735c <prvGetNextExpireTime+0x18>
 800735a:	2200      	movs	r2, #0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d105      	bne.n	8007374 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007368:	4b07      	ldr	r3, [pc, #28]	@ (8007388 <prvGetNextExpireTime+0x44>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	e001      	b.n	8007378 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007378:	68fb      	ldr	r3, [r7, #12]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	200016c4 	.word	0x200016c4

0800738c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007394:	f7ff f954 	bl	8006640 <xTaskGetTickCount>
 8007398:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800739a:	4b0b      	ldr	r3, [pc, #44]	@ (80073c8 <prvSampleTimeNow+0x3c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d205      	bcs.n	80073b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073a4:	f000 f940 	bl	8007628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073b6:	4a04      	ldr	r2, [pc, #16]	@ (80073c8 <prvSampleTimeNow+0x3c>)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073bc:	68fb      	ldr	r3, [r7, #12]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200016d4 	.word	0x200016d4

080073cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d812      	bhi.n	8007418 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	1ad2      	subs	r2, r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d302      	bcc.n	8007406 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	e01b      	b.n	800743e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007406:	4b10      	ldr	r3, [pc, #64]	@ (8007448 <prvInsertTimerInActiveList+0x7c>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3304      	adds	r3, #4
 800740e:	4619      	mov	r1, r3
 8007410:	4610      	mov	r0, r2
 8007412:	f7fd feec 	bl	80051ee <vListInsert>
 8007416:	e012      	b.n	800743e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d206      	bcs.n	800742e <prvInsertTimerInActiveList+0x62>
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d302      	bcc.n	800742e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007428:	2301      	movs	r3, #1
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	e007      	b.n	800743e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800742e:	4b07      	ldr	r3, [pc, #28]	@ (800744c <prvInsertTimerInActiveList+0x80>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3304      	adds	r3, #4
 8007436:	4619      	mov	r1, r3
 8007438:	4610      	mov	r0, r2
 800743a:	f7fd fed8 	bl	80051ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800743e:	697b      	ldr	r3, [r7, #20]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	200016c8 	.word	0x200016c8
 800744c:	200016c4 	.word	0x200016c4

08007450 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08e      	sub	sp, #56	@ 0x38
 8007454:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007456:	e0d4      	b.n	8007602 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	da1b      	bge.n	8007496 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800745e:	1d3b      	adds	r3, r7, #4
 8007460:	3304      	adds	r3, #4
 8007462:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10d      	bne.n	8007486 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	b672      	cpsid	i
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	b662      	cpsie	i
 800747e:	61fb      	str	r3, [r7, #28]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800748c:	6850      	ldr	r0, [r2, #4]
 800748e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007490:	6892      	ldr	r2, [r2, #8]
 8007492:	4611      	mov	r1, r2
 8007494:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f2c0 80b2 	blt.w	8007602 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ac:	3304      	adds	r3, #4
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd fed6 	bl	8005260 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074b4:	463b      	mov	r3, r7
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff ff68 	bl	800738c <prvSampleTimeNow>
 80074bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b09      	cmp	r3, #9
 80074c2:	f200 809b 	bhi.w	80075fc <prvProcessReceivedCommands+0x1ac>
 80074c6:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <prvProcessReceivedCommands+0x7c>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	0800756f 	.word	0x0800756f
 80074dc:	08007583 	.word	0x08007583
 80074e0:	080075d3 	.word	0x080075d3
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	080074f5 	.word	0x080074f5
 80074ec:	0800756f 	.word	0x0800756f
 80074f0:	08007583 	.word	0x08007583
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	18d1      	adds	r1, r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007514:	f7ff ff5a 	bl	80073cc <prvInsertTimerInActiveList>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d070      	beq.n	8007600 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007524:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d065      	beq.n	8007600 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	441a      	add	r2, r3
 800753c:	2300      	movs	r3, #0
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	2300      	movs	r3, #0
 8007542:	2100      	movs	r1, #0
 8007544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007546:	f7ff fdfb 	bl	8007140 <xTimerGenericCommand>
 800754a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d156      	bne.n	8007600 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	b672      	cpsid	i
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	b662      	cpsie	i
 8007566:	61bb      	str	r3, [r7, #24]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007574:	f023 0301 	bic.w	r3, r3, #1
 8007578:	b2da      	uxtb	r2, r3
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007580:	e03f      	b.n	8007602 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	b2da      	uxtb	r2, r3
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10d      	bne.n	80075be <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	b672      	cpsid	i
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	b662      	cpsie	i
 80075b6:	617b      	str	r3, [r7, #20]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	18d1      	adds	r1, r2, r3
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075cc:	f7ff fefe 	bl	80073cc <prvInsertTimerInActiveList>
					break;
 80075d0:	e017      	b.n	8007602 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80075e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e2:	f000 fbd7 	bl	8007d94 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075e6:	e00c      	b.n	8007602 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075fa:	e002      	b.n	8007602 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <prvProcessReceivedCommands+0x1b2>
					break;
 8007600:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007602:	4b08      	ldr	r3, [pc, #32]	@ (8007624 <prvProcessReceivedCommands+0x1d4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	1d39      	adds	r1, r7, #4
 8007608:	2200      	movs	r2, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe f992 	bl	8005934 <xQueueReceive>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	f47f af20 	bne.w	8007458 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	3730      	adds	r7, #48	@ 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	200016cc 	.word	0x200016cc

08007628 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800762e:	e04b      	b.n	80076c8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007630:	4b2f      	ldr	r3, [pc, #188]	@ (80076f0 <prvSwitchTimerLists+0xc8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800763a:	4b2d      	ldr	r3, [pc, #180]	@ (80076f0 <prvSwitchTimerLists+0xc8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3304      	adds	r3, #4
 8007648:	4618      	mov	r0, r3
 800764a:	f7fd fe09 	bl	8005260 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d031      	beq.n	80076c8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4413      	add	r3, r2
 800766c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	429a      	cmp	r2, r3
 8007674:	d90e      	bls.n	8007694 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007682:	4b1b      	ldr	r3, [pc, #108]	@ (80076f0 <prvSwitchTimerLists+0xc8>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3304      	adds	r3, #4
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7fd fdae 	bl	80051ee <vListInsert>
 8007692:	e019      	b.n	80076c8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007694:	2300      	movs	r3, #0
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	2300      	movs	r3, #0
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	2100      	movs	r1, #0
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff fd4e 	bl	8007140 <xTimerGenericCommand>
 80076a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10d      	bne.n	80076c8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	b672      	cpsid	i
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	b662      	cpsie	i
 80076c0:	603b      	str	r3, [r7, #0]
}
 80076c2:	bf00      	nop
 80076c4:	bf00      	nop
 80076c6:	e7fd      	b.n	80076c4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076c8:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <prvSwitchTimerLists+0xc8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1ae      	bne.n	8007630 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076d2:	4b07      	ldr	r3, [pc, #28]	@ (80076f0 <prvSwitchTimerLists+0xc8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076d8:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <prvSwitchTimerLists+0xcc>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a04      	ldr	r2, [pc, #16]	@ (80076f0 <prvSwitchTimerLists+0xc8>)
 80076de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076e0:	4a04      	ldr	r2, [pc, #16]	@ (80076f4 <prvSwitchTimerLists+0xcc>)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6013      	str	r3, [r2, #0]
}
 80076e6:	bf00      	nop
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	200016c4 	.word	0x200016c4
 80076f4:	200016c8 	.word	0x200016c8

080076f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076fe:	f000 f94d 	bl	800799c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007702:	4b15      	ldr	r3, [pc, #84]	@ (8007758 <prvCheckForValidListAndQueue+0x60>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d120      	bne.n	800774c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800770a:	4814      	ldr	r0, [pc, #80]	@ (800775c <prvCheckForValidListAndQueue+0x64>)
 800770c:	f7fd fd1e 	bl	800514c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007710:	4813      	ldr	r0, [pc, #76]	@ (8007760 <prvCheckForValidListAndQueue+0x68>)
 8007712:	f7fd fd1b 	bl	800514c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007716:	4b13      	ldr	r3, [pc, #76]	@ (8007764 <prvCheckForValidListAndQueue+0x6c>)
 8007718:	4a10      	ldr	r2, [pc, #64]	@ (800775c <prvCheckForValidListAndQueue+0x64>)
 800771a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800771c:	4b12      	ldr	r3, [pc, #72]	@ (8007768 <prvCheckForValidListAndQueue+0x70>)
 800771e:	4a10      	ldr	r2, [pc, #64]	@ (8007760 <prvCheckForValidListAndQueue+0x68>)
 8007720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007722:	2300      	movs	r3, #0
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	4b11      	ldr	r3, [pc, #68]	@ (800776c <prvCheckForValidListAndQueue+0x74>)
 8007728:	4a11      	ldr	r2, [pc, #68]	@ (8007770 <prvCheckForValidListAndQueue+0x78>)
 800772a:	2110      	movs	r1, #16
 800772c:	200a      	movs	r0, #10
 800772e:	f7fd fe2d 	bl	800538c <xQueueGenericCreateStatic>
 8007732:	4603      	mov	r3, r0
 8007734:	4a08      	ldr	r2, [pc, #32]	@ (8007758 <prvCheckForValidListAndQueue+0x60>)
 8007736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007738:	4b07      	ldr	r3, [pc, #28]	@ (8007758 <prvCheckForValidListAndQueue+0x60>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <prvCheckForValidListAndQueue+0x60>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	490b      	ldr	r1, [pc, #44]	@ (8007774 <prvCheckForValidListAndQueue+0x7c>)
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fc1c 	bl	8005f84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800774c:	f000 f95c 	bl	8007a08 <vPortExitCritical>
}
 8007750:	bf00      	nop
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200016cc 	.word	0x200016cc
 800775c:	2000169c 	.word	0x2000169c
 8007760:	200016b0 	.word	0x200016b0
 8007764:	200016c4 	.word	0x200016c4
 8007768:	200016c8 	.word	0x200016c8
 800776c:	20001778 	.word	0x20001778
 8007770:	200016d8 	.word	0x200016d8
 8007774:	0800964c 	.word	0x0800964c

08007778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3b04      	subs	r3, #4
 8007788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3b04      	subs	r3, #4
 8007796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f023 0201 	bic.w	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3b04      	subs	r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077a8:	4a0c      	ldr	r2, [pc, #48]	@ (80077dc <pxPortInitialiseStack+0x64>)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3b14      	subs	r3, #20
 80077b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3b04      	subs	r3, #4
 80077be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f06f 0202 	mvn.w	r2, #2
 80077c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3b20      	subs	r3, #32
 80077cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077ce:	68fb      	ldr	r3, [r7, #12]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	080077e1 	.word	0x080077e1

080077e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077ea:	4b15      	ldr	r3, [pc, #84]	@ (8007840 <prvTaskExitError+0x60>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077f2:	d00d      	beq.n	8007810 <prvTaskExitError+0x30>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f8:	b672      	cpsid	i
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	b662      	cpsie	i
 8007808:	60fb      	str	r3, [r7, #12]
}
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	e7fd      	b.n	800780c <prvTaskExitError+0x2c>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	b672      	cpsid	i
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	b662      	cpsie	i
 8007824:	60bb      	str	r3, [r7, #8]
}
 8007826:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007828:	bf00      	nop
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0fc      	beq.n	800782a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	2000000c 	.word	0x2000000c
	...

08007850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007850:	4b07      	ldr	r3, [pc, #28]	@ (8007870 <pxCurrentTCBConst2>)
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	6808      	ldr	r0, [r1, #0]
 8007856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	f380 8809 	msr	PSP, r0
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8811 	msr	BASEPRI, r0
 800786a:	4770      	bx	lr
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst2>:
 8007870:	2000119c 	.word	0x2000119c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007878:	4808      	ldr	r0, [pc, #32]	@ (800789c <prvPortStartFirstTask+0x24>)
 800787a:	6800      	ldr	r0, [r0, #0]
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f380 8808 	msr	MSP, r0
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8814 	msr	CONTROL, r0
 800788a:	b662      	cpsie	i
 800788c:	b661      	cpsie	f
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	df00      	svc	0
 8007898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800789a:	bf00      	nop
 800789c:	e000ed08 	.word	0xe000ed08

080078a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078a6:	4b37      	ldr	r3, [pc, #220]	@ (8007984 <xPortStartScheduler+0xe4>)
 80078a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	22ff      	movs	r2, #255	@ 0xff
 80078b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007988 <xPortStartScheduler+0xe8>)
 80078cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078ce:	4b2f      	ldr	r3, [pc, #188]	@ (800798c <xPortStartScheduler+0xec>)
 80078d0:	2207      	movs	r2, #7
 80078d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078d4:	e009      	b.n	80078ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80078d6:	4b2d      	ldr	r3, [pc, #180]	@ (800798c <xPortStartScheduler+0xec>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3b01      	subs	r3, #1
 80078dc:	4a2b      	ldr	r2, [pc, #172]	@ (800798c <xPortStartScheduler+0xec>)
 80078de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f2:	2b80      	cmp	r3, #128	@ 0x80
 80078f4:	d0ef      	beq.n	80078d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078f6:	4b25      	ldr	r3, [pc, #148]	@ (800798c <xPortStartScheduler+0xec>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f1c3 0307 	rsb	r3, r3, #7
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d00d      	beq.n	800791e <xPortStartScheduler+0x7e>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007906:	b672      	cpsid	i
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	b662      	cpsie	i
 8007916:	60bb      	str	r3, [r7, #8]
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800791e:	4b1b      	ldr	r3, [pc, #108]	@ (800798c <xPortStartScheduler+0xec>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	4a19      	ldr	r2, [pc, #100]	@ (800798c <xPortStartScheduler+0xec>)
 8007926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007928:	4b18      	ldr	r3, [pc, #96]	@ (800798c <xPortStartScheduler+0xec>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007930:	4a16      	ldr	r2, [pc, #88]	@ (800798c <xPortStartScheduler+0xec>)
 8007932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800793c:	4b14      	ldr	r3, [pc, #80]	@ (8007990 <xPortStartScheduler+0xf0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a13      	ldr	r2, [pc, #76]	@ (8007990 <xPortStartScheduler+0xf0>)
 8007942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007948:	4b11      	ldr	r3, [pc, #68]	@ (8007990 <xPortStartScheduler+0xf0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a10      	ldr	r2, [pc, #64]	@ (8007990 <xPortStartScheduler+0xf0>)
 800794e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007954:	f000 f8dc 	bl	8007b10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007958:	4b0e      	ldr	r3, [pc, #56]	@ (8007994 <xPortStartScheduler+0xf4>)
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800795e:	f000 f8fb 	bl	8007b58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007962:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <xPortStartScheduler+0xf8>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a0c      	ldr	r2, [pc, #48]	@ (8007998 <xPortStartScheduler+0xf8>)
 8007968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800796c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800796e:	f7ff ff83 	bl	8007878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007972:	f7fe ff31 	bl	80067d8 <vTaskSwitchContext>
	prvTaskExitError();
 8007976:	f7ff ff33 	bl	80077e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000e400 	.word	0xe000e400
 8007988:	200017c8 	.word	0x200017c8
 800798c:	200017cc 	.word	0x200017cc
 8007990:	e000ed20 	.word	0xe000ed20
 8007994:	2000000c 	.word	0x2000000c
 8007998:	e000ef34 	.word	0xe000ef34

0800799c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a6:	b672      	cpsid	i
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	b662      	cpsie	i
 80079b6:	607b      	str	r3, [r7, #4]
}
 80079b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079ba:	4b11      	ldr	r3, [pc, #68]	@ (8007a00 <vPortEnterCritical+0x64>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3301      	adds	r3, #1
 80079c0:	4a0f      	ldr	r2, [pc, #60]	@ (8007a00 <vPortEnterCritical+0x64>)
 80079c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a00 <vPortEnterCritical+0x64>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d112      	bne.n	80079f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a04 <vPortEnterCritical+0x68>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00d      	beq.n	80079f2 <vPortEnterCritical+0x56>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079da:	b672      	cpsid	i
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	b662      	cpsie	i
 80079ea:	603b      	str	r3, [r7, #0]
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	e7fd      	b.n	80079ee <vPortEnterCritical+0x52>
	}
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	2000000c 	.word	0x2000000c
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a0e:	4b13      	ldr	r3, [pc, #76]	@ (8007a5c <vPortExitCritical+0x54>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10d      	bne.n	8007a32 <vPortExitCritical+0x2a>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	b672      	cpsid	i
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	b662      	cpsie	i
 8007a2a:	607b      	str	r3, [r7, #4]
}
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	e7fd      	b.n	8007a2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007a32:	4b0a      	ldr	r3, [pc, #40]	@ (8007a5c <vPortExitCritical+0x54>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	4a08      	ldr	r2, [pc, #32]	@ (8007a5c <vPortExitCritical+0x54>)
 8007a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a3c:	4b07      	ldr	r3, [pc, #28]	@ (8007a5c <vPortExitCritical+0x54>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d105      	bne.n	8007a50 <vPortExitCritical+0x48>
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f383 8811 	msr	BASEPRI, r3
}
 8007a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	2000000c 	.word	0x2000000c

08007a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a60:	f3ef 8009 	mrs	r0, PSP
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	4b15      	ldr	r3, [pc, #84]	@ (8007ac0 <pxCurrentTCBConst>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	f01e 0f10 	tst.w	lr, #16
 8007a70:	bf08      	it	eq
 8007a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	6010      	str	r0, [r2, #0]
 8007a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a84:	b672      	cpsid	i
 8007a86:	f380 8811 	msr	BASEPRI, r0
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	b662      	cpsie	i
 8007a94:	f7fe fea0 	bl	80067d8 <vTaskSwitchContext>
 8007a98:	f04f 0000 	mov.w	r0, #0
 8007a9c:	f380 8811 	msr	BASEPRI, r0
 8007aa0:	bc09      	pop	{r0, r3}
 8007aa2:	6819      	ldr	r1, [r3, #0]
 8007aa4:	6808      	ldr	r0, [r1, #0]
 8007aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	f01e 0f10 	tst.w	lr, #16
 8007aae:	bf08      	it	eq
 8007ab0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ab4:	f380 8809 	msr	PSP, r0
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop

08007ac0 <pxCurrentTCBConst>:
 8007ac0:	2000119c 	.word	0x2000119c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop

08007ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	b672      	cpsid	i
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	b662      	cpsie	i
 8007ae2:	607b      	str	r3, [r7, #4]
}
 8007ae4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ae6:	f7fe fdbb 	bl	8006660 <xTaskIncrementTick>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007af0:	4b06      	ldr	r3, [pc, #24]	@ (8007b0c <xPortSysTickHandler+0x44>)
 8007af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	2300      	movs	r3, #0
 8007afa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	f383 8811 	msr	BASEPRI, r3
}
 8007b02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	e000ed04 	.word	0xe000ed04

08007b10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b14:	4b0b      	ldr	r3, [pc, #44]	@ (8007b44 <vPortSetupTimerInterrupt+0x34>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b48 <vPortSetupTimerInterrupt+0x38>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b20:	4b0a      	ldr	r3, [pc, #40]	@ (8007b4c <vPortSetupTimerInterrupt+0x3c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a0a      	ldr	r2, [pc, #40]	@ (8007b50 <vPortSetupTimerInterrupt+0x40>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	099b      	lsrs	r3, r3, #6
 8007b2c:	4a09      	ldr	r2, [pc, #36]	@ (8007b54 <vPortSetupTimerInterrupt+0x44>)
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b32:	4b04      	ldr	r3, [pc, #16]	@ (8007b44 <vPortSetupTimerInterrupt+0x34>)
 8007b34:	2207      	movs	r2, #7
 8007b36:	601a      	str	r2, [r3, #0]
}
 8007b38:	bf00      	nop
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	e000e010 	.word	0xe000e010
 8007b48:	e000e018 	.word	0xe000e018
 8007b4c:	20000000 	.word	0x20000000
 8007b50:	10624dd3 	.word	0x10624dd3
 8007b54:	e000e014 	.word	0xe000e014

08007b58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b68 <vPortEnableVFP+0x10>
 8007b5c:	6801      	ldr	r1, [r0, #0]
 8007b5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007b62:	6001      	str	r1, [r0, #0]
 8007b64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b66:	bf00      	nop
 8007b68:	e000ed88 	.word	0xe000ed88

08007b6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b72:	f3ef 8305 	mrs	r3, IPSR
 8007b76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b0f      	cmp	r3, #15
 8007b7c:	d917      	bls.n	8007bae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007be8 <vPortValidateInterruptPriority+0x7c>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b88:	4b18      	ldr	r3, [pc, #96]	@ (8007bec <vPortValidateInterruptPriority+0x80>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	7afa      	ldrb	r2, [r7, #11]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d20d      	bcs.n	8007bae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b96:	b672      	cpsid	i
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	b662      	cpsie	i
 8007ba6:	607b      	str	r3, [r7, #4]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bae:	4b10      	ldr	r3, [pc, #64]	@ (8007bf0 <vPortValidateInterruptPriority+0x84>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf4 <vPortValidateInterruptPriority+0x88>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d90d      	bls.n	8007bda <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	b672      	cpsid	i
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	b662      	cpsie	i
 8007bd2:	603b      	str	r3, [r7, #0]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <vPortValidateInterruptPriority+0x6a>
	}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	e000e3f0 	.word	0xe000e3f0
 8007bec:	200017c8 	.word	0x200017c8
 8007bf0:	e000ed0c 	.word	0xe000ed0c
 8007bf4:	200017cc 	.word	0x200017cc

08007bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	@ 0x28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c04:	f7fe fc6e 	bl	80064e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c08:	4b5d      	ldr	r3, [pc, #372]	@ (8007d80 <pvPortMalloc+0x188>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c10:	f000 f920 	bl	8007e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c14:	4b5b      	ldr	r3, [pc, #364]	@ (8007d84 <pvPortMalloc+0x18c>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 8094 	bne.w	8007d4a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d020      	beq.n	8007c6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007c28:	2208      	movs	r2, #8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d017      	beq.n	8007c6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f023 0307 	bic.w	r3, r3, #7
 8007c40:	3308      	adds	r3, #8
 8007c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00d      	beq.n	8007c6a <pvPortMalloc+0x72>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	b672      	cpsid	i
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	b662      	cpsie	i
 8007c62:	617b      	str	r3, [r7, #20]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d06c      	beq.n	8007d4a <pvPortMalloc+0x152>
 8007c70:	4b45      	ldr	r3, [pc, #276]	@ (8007d88 <pvPortMalloc+0x190>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d867      	bhi.n	8007d4a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c7a:	4b44      	ldr	r3, [pc, #272]	@ (8007d8c <pvPortMalloc+0x194>)
 8007c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c7e:	4b43      	ldr	r3, [pc, #268]	@ (8007d8c <pvPortMalloc+0x194>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c84:	e004      	b.n	8007c90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d903      	bls.n	8007ca2 <pvPortMalloc+0xaa>
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1f1      	bne.n	8007c86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ca2:	4b37      	ldr	r3, [pc, #220]	@ (8007d80 <pvPortMalloc+0x188>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d04e      	beq.n	8007d4a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	4413      	add	r3, r2
 8007cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	1ad2      	subs	r2, r2, r3
 8007cc6:	2308      	movs	r3, #8
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d922      	bls.n	8007d14 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00d      	beq.n	8007cfc <pvPortMalloc+0x104>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce4:	b672      	cpsid	i
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	b662      	cpsie	i
 8007cf4:	613b      	str	r3, [r7, #16]
}
 8007cf6:	bf00      	nop
 8007cf8:	bf00      	nop
 8007cfa:	e7fd      	b.n	8007cf8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	1ad2      	subs	r2, r2, r3
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d0e:	69b8      	ldr	r0, [r7, #24]
 8007d10:	f000 f902 	bl	8007f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d14:	4b1c      	ldr	r3, [pc, #112]	@ (8007d88 <pvPortMalloc+0x190>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007d88 <pvPortMalloc+0x190>)
 8007d20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d22:	4b19      	ldr	r3, [pc, #100]	@ (8007d88 <pvPortMalloc+0x190>)
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4b1a      	ldr	r3, [pc, #104]	@ (8007d90 <pvPortMalloc+0x198>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d203      	bcs.n	8007d36 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d2e:	4b16      	ldr	r3, [pc, #88]	@ (8007d88 <pvPortMalloc+0x190>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a17      	ldr	r2, [pc, #92]	@ (8007d90 <pvPortMalloc+0x198>)
 8007d34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	4b12      	ldr	r3, [pc, #72]	@ (8007d84 <pvPortMalloc+0x18c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d4a:	f7fe fbd9 	bl	8006500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00d      	beq.n	8007d74 <pvPortMalloc+0x17c>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	b672      	cpsid	i
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	b662      	cpsie	i
 8007d6c:	60fb      	str	r3, [r7, #12]
}
 8007d6e:	bf00      	nop
 8007d70:	bf00      	nop
 8007d72:	e7fd      	b.n	8007d70 <pvPortMalloc+0x178>
	return pvReturn;
 8007d74:	69fb      	ldr	r3, [r7, #28]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3728      	adds	r7, #40	@ 0x28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	200057d8 	.word	0x200057d8
 8007d84:	200057e4 	.word	0x200057e4
 8007d88:	200057dc 	.word	0x200057dc
 8007d8c:	200057d0 	.word	0x200057d0
 8007d90:	200057e0 	.word	0x200057e0

08007d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d04e      	beq.n	8007e44 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007da6:	2308      	movs	r3, #8
 8007da8:	425b      	negs	r3, r3
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4413      	add	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	4b24      	ldr	r3, [pc, #144]	@ (8007e4c <vPortFree+0xb8>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10d      	bne.n	8007dde <vPortFree+0x4a>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc6:	b672      	cpsid	i
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	b662      	cpsie	i
 8007dd6:	60fb      	str	r3, [r7, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	bf00      	nop
 8007ddc:	e7fd      	b.n	8007dda <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00d      	beq.n	8007e02 <vPortFree+0x6e>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	b672      	cpsid	i
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	b662      	cpsie	i
 8007dfa:	60bb      	str	r3, [r7, #8]
}
 8007dfc:	bf00      	nop
 8007dfe:	bf00      	nop
 8007e00:	e7fd      	b.n	8007dfe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	4b11      	ldr	r3, [pc, #68]	@ (8007e4c <vPortFree+0xb8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d019      	beq.n	8007e44 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d115      	bne.n	8007e44 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e4c <vPortFree+0xb8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	43db      	mvns	r3, r3
 8007e22:	401a      	ands	r2, r3
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e28:	f7fe fb5c 	bl	80064e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	4b07      	ldr	r3, [pc, #28]	@ (8007e50 <vPortFree+0xbc>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4413      	add	r3, r2
 8007e36:	4a06      	ldr	r2, [pc, #24]	@ (8007e50 <vPortFree+0xbc>)
 8007e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e3a:	6938      	ldr	r0, [r7, #16]
 8007e3c:	f000 f86c 	bl	8007f18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e40:	f7fe fb5e 	bl	8006500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e44:	bf00      	nop
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200057e4 	.word	0x200057e4
 8007e50:	200057dc 	.word	0x200057dc

08007e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e60:	4b27      	ldr	r3, [pc, #156]	@ (8007f00 <prvHeapInit+0xac>)
 8007e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00c      	beq.n	8007e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3307      	adds	r3, #7
 8007e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0307 	bic.w	r3, r3, #7
 8007e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	4a1f      	ldr	r2, [pc, #124]	@ (8007f00 <prvHeapInit+0xac>)
 8007e84:	4413      	add	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f04 <prvHeapInit+0xb0>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e92:	4b1c      	ldr	r3, [pc, #112]	@ (8007f04 <prvHeapInit+0xb0>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a15      	ldr	r2, [pc, #84]	@ (8007f08 <prvHeapInit+0xb4>)
 8007eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007eb6:	4b14      	ldr	r3, [pc, #80]	@ (8007f08 <prvHeapInit+0xb4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ebe:	4b12      	ldr	r3, [pc, #72]	@ (8007f08 <prvHeapInit+0xb4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8007f08 <prvHeapInit+0xb4>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8007f0c <prvHeapInit+0xb8>)
 8007ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	4a09      	ldr	r2, [pc, #36]	@ (8007f10 <prvHeapInit+0xbc>)
 8007eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007eec:	4b09      	ldr	r3, [pc, #36]	@ (8007f14 <prvHeapInit+0xc0>)
 8007eee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	200017d0 	.word	0x200017d0
 8007f04:	200057d0 	.word	0x200057d0
 8007f08:	200057d8 	.word	0x200057d8
 8007f0c:	200057e0 	.word	0x200057e0
 8007f10:	200057dc 	.word	0x200057dc
 8007f14:	200057e4 	.word	0x200057e4

08007f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f20:	4b28      	ldr	r3, [pc, #160]	@ (8007fc4 <prvInsertBlockIntoFreeList+0xac>)
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e002      	b.n	8007f2c <prvInsertBlockIntoFreeList+0x14>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d8f7      	bhi.n	8007f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d108      	bne.n	8007f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	441a      	add	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	441a      	add	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d118      	bne.n	8007fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b15      	ldr	r3, [pc, #84]	@ (8007fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d00d      	beq.n	8007f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	441a      	add	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e008      	b.n	8007fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f96:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e003      	b.n	8007fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d002      	beq.n	8007fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	200057d0 	.word	0x200057d0
 8007fc8:	200057d8 	.word	0x200057d8

08007fcc <srand>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4b10      	ldr	r3, [pc, #64]	@ (8008010 <srand+0x44>)
 8007fd0:	681d      	ldr	r5, [r3, #0]
 8007fd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	b9b3      	cbnz	r3, 8008006 <srand+0x3a>
 8007fd8:	2018      	movs	r0, #24
 8007fda:	f000 fb8d 	bl	80086f8 <malloc>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	6328      	str	r0, [r5, #48]	@ 0x30
 8007fe2:	b920      	cbnz	r0, 8007fee <srand+0x22>
 8007fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8008014 <srand+0x48>)
 8007fe6:	480c      	ldr	r0, [pc, #48]	@ (8008018 <srand+0x4c>)
 8007fe8:	2146      	movs	r1, #70	@ 0x46
 8007fea:	f000 fb1d 	bl	8008628 <__assert_func>
 8007fee:	490b      	ldr	r1, [pc, #44]	@ (800801c <srand+0x50>)
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8008020 <srand+0x54>)
 8007ff2:	e9c0 1300 	strd	r1, r3, [r0]
 8007ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8008024 <srand+0x58>)
 8007ff8:	6083      	str	r3, [r0, #8]
 8007ffa:	230b      	movs	r3, #11
 8007ffc:	8183      	strh	r3, [r0, #12]
 8007ffe:	2100      	movs	r1, #0
 8008000:	2001      	movs	r0, #1
 8008002:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008006:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008008:	2200      	movs	r2, #0
 800800a:	611c      	str	r4, [r3, #16]
 800800c:	615a      	str	r2, [r3, #20]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	2000001c 	.word	0x2000001c
 8008014:	08009690 	.word	0x08009690
 8008018:	080096a7 	.word	0x080096a7
 800801c:	abcd330e 	.word	0xabcd330e
 8008020:	e66d1234 	.word	0xe66d1234
 8008024:	0005deec 	.word	0x0005deec

08008028 <rand>:
 8008028:	4b16      	ldr	r3, [pc, #88]	@ (8008084 <rand+0x5c>)
 800802a:	b510      	push	{r4, lr}
 800802c:	681c      	ldr	r4, [r3, #0]
 800802e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008030:	b9b3      	cbnz	r3, 8008060 <rand+0x38>
 8008032:	2018      	movs	r0, #24
 8008034:	f000 fb60 	bl	80086f8 <malloc>
 8008038:	4602      	mov	r2, r0
 800803a:	6320      	str	r0, [r4, #48]	@ 0x30
 800803c:	b920      	cbnz	r0, 8008048 <rand+0x20>
 800803e:	4b12      	ldr	r3, [pc, #72]	@ (8008088 <rand+0x60>)
 8008040:	4812      	ldr	r0, [pc, #72]	@ (800808c <rand+0x64>)
 8008042:	2152      	movs	r1, #82	@ 0x52
 8008044:	f000 faf0 	bl	8008628 <__assert_func>
 8008048:	4911      	ldr	r1, [pc, #68]	@ (8008090 <rand+0x68>)
 800804a:	4b12      	ldr	r3, [pc, #72]	@ (8008094 <rand+0x6c>)
 800804c:	e9c0 1300 	strd	r1, r3, [r0]
 8008050:	4b11      	ldr	r3, [pc, #68]	@ (8008098 <rand+0x70>)
 8008052:	6083      	str	r3, [r0, #8]
 8008054:	230b      	movs	r3, #11
 8008056:	8183      	strh	r3, [r0, #12]
 8008058:	2100      	movs	r1, #0
 800805a:	2001      	movs	r0, #1
 800805c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008060:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008062:	480e      	ldr	r0, [pc, #56]	@ (800809c <rand+0x74>)
 8008064:	690b      	ldr	r3, [r1, #16]
 8008066:	694c      	ldr	r4, [r1, #20]
 8008068:	4a0d      	ldr	r2, [pc, #52]	@ (80080a0 <rand+0x78>)
 800806a:	4358      	muls	r0, r3
 800806c:	fb02 0004 	mla	r0, r2, r4, r0
 8008070:	fba3 3202 	umull	r3, r2, r3, r2
 8008074:	3301      	adds	r3, #1
 8008076:	eb40 0002 	adc.w	r0, r0, r2
 800807a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800807e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008082:	bd10      	pop	{r4, pc}
 8008084:	2000001c 	.word	0x2000001c
 8008088:	08009690 	.word	0x08009690
 800808c:	080096a7 	.word	0x080096a7
 8008090:	abcd330e 	.word	0xabcd330e
 8008094:	e66d1234 	.word	0xe66d1234
 8008098:	0005deec 	.word	0x0005deec
 800809c:	5851f42d 	.word	0x5851f42d
 80080a0:	4c957f2d 	.word	0x4c957f2d

080080a4 <std>:
 80080a4:	2300      	movs	r3, #0
 80080a6:	b510      	push	{r4, lr}
 80080a8:	4604      	mov	r4, r0
 80080aa:	e9c0 3300 	strd	r3, r3, [r0]
 80080ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080b2:	6083      	str	r3, [r0, #8]
 80080b4:	8181      	strh	r1, [r0, #12]
 80080b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80080b8:	81c2      	strh	r2, [r0, #14]
 80080ba:	6183      	str	r3, [r0, #24]
 80080bc:	4619      	mov	r1, r3
 80080be:	2208      	movs	r2, #8
 80080c0:	305c      	adds	r0, #92	@ 0x5c
 80080c2:	f000 f9f9 	bl	80084b8 <memset>
 80080c6:	4b0d      	ldr	r3, [pc, #52]	@ (80080fc <std+0x58>)
 80080c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80080ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008100 <std+0x5c>)
 80080cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <std+0x60>)
 80080d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <std+0x64>)
 80080d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80080d6:	4b0d      	ldr	r3, [pc, #52]	@ (800810c <std+0x68>)
 80080d8:	6224      	str	r4, [r4, #32]
 80080da:	429c      	cmp	r4, r3
 80080dc:	d006      	beq.n	80080ec <std+0x48>
 80080de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080e2:	4294      	cmp	r4, r2
 80080e4:	d002      	beq.n	80080ec <std+0x48>
 80080e6:	33d0      	adds	r3, #208	@ 0xd0
 80080e8:	429c      	cmp	r4, r3
 80080ea:	d105      	bne.n	80080f8 <std+0x54>
 80080ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f4:	f000 ba86 	b.w	8008604 <__retarget_lock_init_recursive>
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	bf00      	nop
 80080fc:	08008309 	.word	0x08008309
 8008100:	0800832b 	.word	0x0800832b
 8008104:	08008363 	.word	0x08008363
 8008108:	08008387 	.word	0x08008387
 800810c:	200057e8 	.word	0x200057e8

08008110 <stdio_exit_handler>:
 8008110:	4a02      	ldr	r2, [pc, #8]	@ (800811c <stdio_exit_handler+0xc>)
 8008112:	4903      	ldr	r1, [pc, #12]	@ (8008120 <stdio_exit_handler+0x10>)
 8008114:	4803      	ldr	r0, [pc, #12]	@ (8008124 <stdio_exit_handler+0x14>)
 8008116:	f000 b869 	b.w	80081ec <_fwalk_sglue>
 800811a:	bf00      	nop
 800811c:	20000010 	.word	0x20000010
 8008120:	08008f0d 	.word	0x08008f0d
 8008124:	20000020 	.word	0x20000020

08008128 <cleanup_stdio>:
 8008128:	6841      	ldr	r1, [r0, #4]
 800812a:	4b0c      	ldr	r3, [pc, #48]	@ (800815c <cleanup_stdio+0x34>)
 800812c:	4299      	cmp	r1, r3
 800812e:	b510      	push	{r4, lr}
 8008130:	4604      	mov	r4, r0
 8008132:	d001      	beq.n	8008138 <cleanup_stdio+0x10>
 8008134:	f000 feea 	bl	8008f0c <_fflush_r>
 8008138:	68a1      	ldr	r1, [r4, #8]
 800813a:	4b09      	ldr	r3, [pc, #36]	@ (8008160 <cleanup_stdio+0x38>)
 800813c:	4299      	cmp	r1, r3
 800813e:	d002      	beq.n	8008146 <cleanup_stdio+0x1e>
 8008140:	4620      	mov	r0, r4
 8008142:	f000 fee3 	bl	8008f0c <_fflush_r>
 8008146:	68e1      	ldr	r1, [r4, #12]
 8008148:	4b06      	ldr	r3, [pc, #24]	@ (8008164 <cleanup_stdio+0x3c>)
 800814a:	4299      	cmp	r1, r3
 800814c:	d004      	beq.n	8008158 <cleanup_stdio+0x30>
 800814e:	4620      	mov	r0, r4
 8008150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008154:	f000 beda 	b.w	8008f0c <_fflush_r>
 8008158:	bd10      	pop	{r4, pc}
 800815a:	bf00      	nop
 800815c:	200057e8 	.word	0x200057e8
 8008160:	20005850 	.word	0x20005850
 8008164:	200058b8 	.word	0x200058b8

08008168 <global_stdio_init.part.0>:
 8008168:	b510      	push	{r4, lr}
 800816a:	4b0b      	ldr	r3, [pc, #44]	@ (8008198 <global_stdio_init.part.0+0x30>)
 800816c:	4c0b      	ldr	r4, [pc, #44]	@ (800819c <global_stdio_init.part.0+0x34>)
 800816e:	4a0c      	ldr	r2, [pc, #48]	@ (80081a0 <global_stdio_init.part.0+0x38>)
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	4620      	mov	r0, r4
 8008174:	2200      	movs	r2, #0
 8008176:	2104      	movs	r1, #4
 8008178:	f7ff ff94 	bl	80080a4 <std>
 800817c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008180:	2201      	movs	r2, #1
 8008182:	2109      	movs	r1, #9
 8008184:	f7ff ff8e 	bl	80080a4 <std>
 8008188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800818c:	2202      	movs	r2, #2
 800818e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008192:	2112      	movs	r1, #18
 8008194:	f7ff bf86 	b.w	80080a4 <std>
 8008198:	20005920 	.word	0x20005920
 800819c:	200057e8 	.word	0x200057e8
 80081a0:	08008111 	.word	0x08008111

080081a4 <__sfp_lock_acquire>:
 80081a4:	4801      	ldr	r0, [pc, #4]	@ (80081ac <__sfp_lock_acquire+0x8>)
 80081a6:	f000 ba2e 	b.w	8008606 <__retarget_lock_acquire_recursive>
 80081aa:	bf00      	nop
 80081ac:	20005929 	.word	0x20005929

080081b0 <__sfp_lock_release>:
 80081b0:	4801      	ldr	r0, [pc, #4]	@ (80081b8 <__sfp_lock_release+0x8>)
 80081b2:	f000 ba29 	b.w	8008608 <__retarget_lock_release_recursive>
 80081b6:	bf00      	nop
 80081b8:	20005929 	.word	0x20005929

080081bc <__sinit>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	4604      	mov	r4, r0
 80081c0:	f7ff fff0 	bl	80081a4 <__sfp_lock_acquire>
 80081c4:	6a23      	ldr	r3, [r4, #32]
 80081c6:	b11b      	cbz	r3, 80081d0 <__sinit+0x14>
 80081c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081cc:	f7ff bff0 	b.w	80081b0 <__sfp_lock_release>
 80081d0:	4b04      	ldr	r3, [pc, #16]	@ (80081e4 <__sinit+0x28>)
 80081d2:	6223      	str	r3, [r4, #32]
 80081d4:	4b04      	ldr	r3, [pc, #16]	@ (80081e8 <__sinit+0x2c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1f5      	bne.n	80081c8 <__sinit+0xc>
 80081dc:	f7ff ffc4 	bl	8008168 <global_stdio_init.part.0>
 80081e0:	e7f2      	b.n	80081c8 <__sinit+0xc>
 80081e2:	bf00      	nop
 80081e4:	08008129 	.word	0x08008129
 80081e8:	20005920 	.word	0x20005920

080081ec <_fwalk_sglue>:
 80081ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f0:	4607      	mov	r7, r0
 80081f2:	4688      	mov	r8, r1
 80081f4:	4614      	mov	r4, r2
 80081f6:	2600      	movs	r6, #0
 80081f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008200:	d505      	bpl.n	800820e <_fwalk_sglue+0x22>
 8008202:	6824      	ldr	r4, [r4, #0]
 8008204:	2c00      	cmp	r4, #0
 8008206:	d1f7      	bne.n	80081f8 <_fwalk_sglue+0xc>
 8008208:	4630      	mov	r0, r6
 800820a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d907      	bls.n	8008224 <_fwalk_sglue+0x38>
 8008214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008218:	3301      	adds	r3, #1
 800821a:	d003      	beq.n	8008224 <_fwalk_sglue+0x38>
 800821c:	4629      	mov	r1, r5
 800821e:	4638      	mov	r0, r7
 8008220:	47c0      	blx	r8
 8008222:	4306      	orrs	r6, r0
 8008224:	3568      	adds	r5, #104	@ 0x68
 8008226:	e7e9      	b.n	80081fc <_fwalk_sglue+0x10>

08008228 <iprintf>:
 8008228:	b40f      	push	{r0, r1, r2, r3}
 800822a:	b507      	push	{r0, r1, r2, lr}
 800822c:	4906      	ldr	r1, [pc, #24]	@ (8008248 <iprintf+0x20>)
 800822e:	ab04      	add	r3, sp, #16
 8008230:	6808      	ldr	r0, [r1, #0]
 8008232:	f853 2b04 	ldr.w	r2, [r3], #4
 8008236:	6881      	ldr	r1, [r0, #8]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	f000 fb3d 	bl	80088b8 <_vfiprintf_r>
 800823e:	b003      	add	sp, #12
 8008240:	f85d eb04 	ldr.w	lr, [sp], #4
 8008244:	b004      	add	sp, #16
 8008246:	4770      	bx	lr
 8008248:	2000001c 	.word	0x2000001c

0800824c <_puts_r>:
 800824c:	6a03      	ldr	r3, [r0, #32]
 800824e:	b570      	push	{r4, r5, r6, lr}
 8008250:	6884      	ldr	r4, [r0, #8]
 8008252:	4605      	mov	r5, r0
 8008254:	460e      	mov	r6, r1
 8008256:	b90b      	cbnz	r3, 800825c <_puts_r+0x10>
 8008258:	f7ff ffb0 	bl	80081bc <__sinit>
 800825c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800825e:	07db      	lsls	r3, r3, #31
 8008260:	d405      	bmi.n	800826e <_puts_r+0x22>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	0598      	lsls	r0, r3, #22
 8008266:	d402      	bmi.n	800826e <_puts_r+0x22>
 8008268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800826a:	f000 f9cc 	bl	8008606 <__retarget_lock_acquire_recursive>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	0719      	lsls	r1, r3, #28
 8008272:	d502      	bpl.n	800827a <_puts_r+0x2e>
 8008274:	6923      	ldr	r3, [r4, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d135      	bne.n	80082e6 <_puts_r+0x9a>
 800827a:	4621      	mov	r1, r4
 800827c:	4628      	mov	r0, r5
 800827e:	f000 f8c5 	bl	800840c <__swsetup_r>
 8008282:	b380      	cbz	r0, 80082e6 <_puts_r+0x9a>
 8008284:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008288:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800828a:	07da      	lsls	r2, r3, #31
 800828c:	d405      	bmi.n	800829a <_puts_r+0x4e>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	059b      	lsls	r3, r3, #22
 8008292:	d402      	bmi.n	800829a <_puts_r+0x4e>
 8008294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008296:	f000 f9b7 	bl	8008608 <__retarget_lock_release_recursive>
 800829a:	4628      	mov	r0, r5
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da04      	bge.n	80082ac <_puts_r+0x60>
 80082a2:	69a2      	ldr	r2, [r4, #24]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	dc17      	bgt.n	80082d8 <_puts_r+0x8c>
 80082a8:	290a      	cmp	r1, #10
 80082aa:	d015      	beq.n	80082d8 <_puts_r+0x8c>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	6022      	str	r2, [r4, #0]
 80082b2:	7019      	strb	r1, [r3, #0]
 80082b4:	68a3      	ldr	r3, [r4, #8]
 80082b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082ba:	3b01      	subs	r3, #1
 80082bc:	60a3      	str	r3, [r4, #8]
 80082be:	2900      	cmp	r1, #0
 80082c0:	d1ed      	bne.n	800829e <_puts_r+0x52>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	da11      	bge.n	80082ea <_puts_r+0x9e>
 80082c6:	4622      	mov	r2, r4
 80082c8:	210a      	movs	r1, #10
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 f85f 	bl	800838e <__swbuf_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d0d7      	beq.n	8008284 <_puts_r+0x38>
 80082d4:	250a      	movs	r5, #10
 80082d6:	e7d7      	b.n	8008288 <_puts_r+0x3c>
 80082d8:	4622      	mov	r2, r4
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 f857 	bl	800838e <__swbuf_r>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d1e7      	bne.n	80082b4 <_puts_r+0x68>
 80082e4:	e7ce      	b.n	8008284 <_puts_r+0x38>
 80082e6:	3e01      	subs	r6, #1
 80082e8:	e7e4      	b.n	80082b4 <_puts_r+0x68>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	220a      	movs	r2, #10
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	e7ee      	b.n	80082d4 <_puts_r+0x88>
	...

080082f8 <puts>:
 80082f8:	4b02      	ldr	r3, [pc, #8]	@ (8008304 <puts+0xc>)
 80082fa:	4601      	mov	r1, r0
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	f7ff bfa5 	b.w	800824c <_puts_r>
 8008302:	bf00      	nop
 8008304:	2000001c 	.word	0x2000001c

08008308 <__sread>:
 8008308:	b510      	push	{r4, lr}
 800830a:	460c      	mov	r4, r1
 800830c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008310:	f000 f92a 	bl	8008568 <_read_r>
 8008314:	2800      	cmp	r0, #0
 8008316:	bfab      	itete	ge
 8008318:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800831a:	89a3      	ldrhlt	r3, [r4, #12]
 800831c:	181b      	addge	r3, r3, r0
 800831e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008322:	bfac      	ite	ge
 8008324:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008326:	81a3      	strhlt	r3, [r4, #12]
 8008328:	bd10      	pop	{r4, pc}

0800832a <__swrite>:
 800832a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832e:	461f      	mov	r7, r3
 8008330:	898b      	ldrh	r3, [r1, #12]
 8008332:	05db      	lsls	r3, r3, #23
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	4616      	mov	r6, r2
 800833a:	d505      	bpl.n	8008348 <__swrite+0x1e>
 800833c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008340:	2302      	movs	r3, #2
 8008342:	2200      	movs	r2, #0
 8008344:	f000 f8fe 	bl	8008544 <_lseek_r>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800834e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	4632      	mov	r2, r6
 8008356:	463b      	mov	r3, r7
 8008358:	4628      	mov	r0, r5
 800835a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800835e:	f000 b915 	b.w	800858c <_write_r>

08008362 <__sseek>:
 8008362:	b510      	push	{r4, lr}
 8008364:	460c      	mov	r4, r1
 8008366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836a:	f000 f8eb 	bl	8008544 <_lseek_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	bf15      	itete	ne
 8008374:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008376:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800837a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800837e:	81a3      	strheq	r3, [r4, #12]
 8008380:	bf18      	it	ne
 8008382:	81a3      	strhne	r3, [r4, #12]
 8008384:	bd10      	pop	{r4, pc}

08008386 <__sclose>:
 8008386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838a:	f000 b8b9 	b.w	8008500 <_close_r>

0800838e <__swbuf_r>:
 800838e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008390:	460e      	mov	r6, r1
 8008392:	4614      	mov	r4, r2
 8008394:	4605      	mov	r5, r0
 8008396:	b118      	cbz	r0, 80083a0 <__swbuf_r+0x12>
 8008398:	6a03      	ldr	r3, [r0, #32]
 800839a:	b90b      	cbnz	r3, 80083a0 <__swbuf_r+0x12>
 800839c:	f7ff ff0e 	bl	80081bc <__sinit>
 80083a0:	69a3      	ldr	r3, [r4, #24]
 80083a2:	60a3      	str	r3, [r4, #8]
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	071a      	lsls	r2, r3, #28
 80083a8:	d501      	bpl.n	80083ae <__swbuf_r+0x20>
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	b943      	cbnz	r3, 80083c0 <__swbuf_r+0x32>
 80083ae:	4621      	mov	r1, r4
 80083b0:	4628      	mov	r0, r5
 80083b2:	f000 f82b 	bl	800840c <__swsetup_r>
 80083b6:	b118      	cbz	r0, 80083c0 <__swbuf_r+0x32>
 80083b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80083bc:	4638      	mov	r0, r7
 80083be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	6922      	ldr	r2, [r4, #16]
 80083c4:	1a98      	subs	r0, r3, r2
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	b2f6      	uxtb	r6, r6
 80083ca:	4283      	cmp	r3, r0
 80083cc:	4637      	mov	r7, r6
 80083ce:	dc05      	bgt.n	80083dc <__swbuf_r+0x4e>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 fd9a 	bl	8008f0c <_fflush_r>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d1ed      	bne.n	80083b8 <__swbuf_r+0x2a>
 80083dc:	68a3      	ldr	r3, [r4, #8]
 80083de:	3b01      	subs	r3, #1
 80083e0:	60a3      	str	r3, [r4, #8]
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	6022      	str	r2, [r4, #0]
 80083e8:	701e      	strb	r6, [r3, #0]
 80083ea:	6962      	ldr	r2, [r4, #20]
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d004      	beq.n	80083fc <__swbuf_r+0x6e>
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	07db      	lsls	r3, r3, #31
 80083f6:	d5e1      	bpl.n	80083bc <__swbuf_r+0x2e>
 80083f8:	2e0a      	cmp	r6, #10
 80083fa:	d1df      	bne.n	80083bc <__swbuf_r+0x2e>
 80083fc:	4621      	mov	r1, r4
 80083fe:	4628      	mov	r0, r5
 8008400:	f000 fd84 	bl	8008f0c <_fflush_r>
 8008404:	2800      	cmp	r0, #0
 8008406:	d0d9      	beq.n	80083bc <__swbuf_r+0x2e>
 8008408:	e7d6      	b.n	80083b8 <__swbuf_r+0x2a>
	...

0800840c <__swsetup_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4b29      	ldr	r3, [pc, #164]	@ (80084b4 <__swsetup_r+0xa8>)
 8008410:	4605      	mov	r5, r0
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	460c      	mov	r4, r1
 8008416:	b118      	cbz	r0, 8008420 <__swsetup_r+0x14>
 8008418:	6a03      	ldr	r3, [r0, #32]
 800841a:	b90b      	cbnz	r3, 8008420 <__swsetup_r+0x14>
 800841c:	f7ff fece 	bl	80081bc <__sinit>
 8008420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008424:	0719      	lsls	r1, r3, #28
 8008426:	d422      	bmi.n	800846e <__swsetup_r+0x62>
 8008428:	06da      	lsls	r2, r3, #27
 800842a:	d407      	bmi.n	800843c <__swsetup_r+0x30>
 800842c:	2209      	movs	r2, #9
 800842e:	602a      	str	r2, [r5, #0]
 8008430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800843a:	e033      	b.n	80084a4 <__swsetup_r+0x98>
 800843c:	0758      	lsls	r0, r3, #29
 800843e:	d512      	bpl.n	8008466 <__swsetup_r+0x5a>
 8008440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008442:	b141      	cbz	r1, 8008456 <__swsetup_r+0x4a>
 8008444:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008448:	4299      	cmp	r1, r3
 800844a:	d002      	beq.n	8008452 <__swsetup_r+0x46>
 800844c:	4628      	mov	r0, r5
 800844e:	f000 f909 	bl	8008664 <_free_r>
 8008452:	2300      	movs	r3, #0
 8008454:	6363      	str	r3, [r4, #52]	@ 0x34
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800845c:	81a3      	strh	r3, [r4, #12]
 800845e:	2300      	movs	r3, #0
 8008460:	6063      	str	r3, [r4, #4]
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f043 0308 	orr.w	r3, r3, #8
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	b94b      	cbnz	r3, 8008486 <__swsetup_r+0x7a>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800847c:	d003      	beq.n	8008486 <__swsetup_r+0x7a>
 800847e:	4621      	mov	r1, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f000 fda3 	bl	8008fcc <__smakebuf_r>
 8008486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848a:	f013 0201 	ands.w	r2, r3, #1
 800848e:	d00a      	beq.n	80084a6 <__swsetup_r+0x9a>
 8008490:	2200      	movs	r2, #0
 8008492:	60a2      	str	r2, [r4, #8]
 8008494:	6962      	ldr	r2, [r4, #20]
 8008496:	4252      	negs	r2, r2
 8008498:	61a2      	str	r2, [r4, #24]
 800849a:	6922      	ldr	r2, [r4, #16]
 800849c:	b942      	cbnz	r2, 80084b0 <__swsetup_r+0xa4>
 800849e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084a2:	d1c5      	bne.n	8008430 <__swsetup_r+0x24>
 80084a4:	bd38      	pop	{r3, r4, r5, pc}
 80084a6:	0799      	lsls	r1, r3, #30
 80084a8:	bf58      	it	pl
 80084aa:	6962      	ldrpl	r2, [r4, #20]
 80084ac:	60a2      	str	r2, [r4, #8]
 80084ae:	e7f4      	b.n	800849a <__swsetup_r+0x8e>
 80084b0:	2000      	movs	r0, #0
 80084b2:	e7f7      	b.n	80084a4 <__swsetup_r+0x98>
 80084b4:	2000001c 	.word	0x2000001c

080084b8 <memset>:
 80084b8:	4402      	add	r2, r0
 80084ba:	4603      	mov	r3, r0
 80084bc:	4293      	cmp	r3, r2
 80084be:	d100      	bne.n	80084c2 <memset+0xa>
 80084c0:	4770      	bx	lr
 80084c2:	f803 1b01 	strb.w	r1, [r3], #1
 80084c6:	e7f9      	b.n	80084bc <memset+0x4>

080084c8 <time>:
 80084c8:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80084ca:	4b0c      	ldr	r3, [pc, #48]	@ (80084fc <time+0x34>)
 80084cc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80084d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80084d4:	4669      	mov	r1, sp
 80084d6:	4604      	mov	r4, r0
 80084d8:	2200      	movs	r2, #0
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	e9cd 6700 	strd	r6, r7, [sp]
 80084e0:	f000 f81e 	bl	8008520 <_gettimeofday_r>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	bfb8      	it	lt
 80084e8:	e9cd 6700 	strdlt	r6, r7, [sp]
 80084ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084f0:	b10c      	cbz	r4, 80084f6 <time+0x2e>
 80084f2:	e9c4 0100 	strd	r0, r1, [r4]
 80084f6:	b004      	add	sp, #16
 80084f8:	bdd0      	pop	{r4, r6, r7, pc}
 80084fa:	bf00      	nop
 80084fc:	2000001c 	.word	0x2000001c

08008500 <_close_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4d06      	ldr	r5, [pc, #24]	@ (800851c <_close_r+0x1c>)
 8008504:	2300      	movs	r3, #0
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	f7f9 fa58 	bl	80019c0 <_close>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_close_r+0x1a>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	b103      	cbz	r3, 800851a <_close_r+0x1a>
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	20005924 	.word	0x20005924

08008520 <_gettimeofday_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4d07      	ldr	r5, [pc, #28]	@ (8008540 <_gettimeofday_r+0x20>)
 8008524:	2300      	movs	r3, #0
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	4611      	mov	r1, r2
 800852c:	602b      	str	r3, [r5, #0]
 800852e:	f000 fe07 	bl	8009140 <_gettimeofday>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d102      	bne.n	800853c <_gettimeofday_r+0x1c>
 8008536:	682b      	ldr	r3, [r5, #0]
 8008538:	b103      	cbz	r3, 800853c <_gettimeofday_r+0x1c>
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	bf00      	nop
 8008540:	20005924 	.word	0x20005924

08008544 <_lseek_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	4d07      	ldr	r5, [pc, #28]	@ (8008564 <_lseek_r+0x20>)
 8008548:	4604      	mov	r4, r0
 800854a:	4608      	mov	r0, r1
 800854c:	4611      	mov	r1, r2
 800854e:	2200      	movs	r2, #0
 8008550:	602a      	str	r2, [r5, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	f7f9 fa5b 	bl	8001a0e <_lseek>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_lseek_r+0x1e>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_lseek_r+0x1e>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	20005924 	.word	0x20005924

08008568 <_read_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d07      	ldr	r5, [pc, #28]	@ (8008588 <_read_r+0x20>)
 800856c:	4604      	mov	r4, r0
 800856e:	4608      	mov	r0, r1
 8008570:	4611      	mov	r1, r2
 8008572:	2200      	movs	r2, #0
 8008574:	602a      	str	r2, [r5, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f7f9 f9e9 	bl	800194e <_read>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_read_r+0x1e>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_read_r+0x1e>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20005924 	.word	0x20005924

0800858c <_write_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4d07      	ldr	r5, [pc, #28]	@ (80085ac <_write_r+0x20>)
 8008590:	4604      	mov	r4, r0
 8008592:	4608      	mov	r0, r1
 8008594:	4611      	mov	r1, r2
 8008596:	2200      	movs	r2, #0
 8008598:	602a      	str	r2, [r5, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f7f9 f9f4 	bl	8001988 <_write>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_write_r+0x1e>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_write_r+0x1e>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	20005924 	.word	0x20005924

080085b0 <__errno>:
 80085b0:	4b01      	ldr	r3, [pc, #4]	@ (80085b8 <__errno+0x8>)
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	2000001c 	.word	0x2000001c

080085bc <__libc_init_array>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	4d0d      	ldr	r5, [pc, #52]	@ (80085f4 <__libc_init_array+0x38>)
 80085c0:	4c0d      	ldr	r4, [pc, #52]	@ (80085f8 <__libc_init_array+0x3c>)
 80085c2:	1b64      	subs	r4, r4, r5
 80085c4:	10a4      	asrs	r4, r4, #2
 80085c6:	2600      	movs	r6, #0
 80085c8:	42a6      	cmp	r6, r4
 80085ca:	d109      	bne.n	80085e0 <__libc_init_array+0x24>
 80085cc:	4d0b      	ldr	r5, [pc, #44]	@ (80085fc <__libc_init_array+0x40>)
 80085ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008600 <__libc_init_array+0x44>)
 80085d0:	f000 fdbe 	bl	8009150 <_init>
 80085d4:	1b64      	subs	r4, r4, r5
 80085d6:	10a4      	asrs	r4, r4, #2
 80085d8:	2600      	movs	r6, #0
 80085da:	42a6      	cmp	r6, r4
 80085dc:	d105      	bne.n	80085ea <__libc_init_array+0x2e>
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e4:	4798      	blx	r3
 80085e6:	3601      	adds	r6, #1
 80085e8:	e7ee      	b.n	80085c8 <__libc_init_array+0xc>
 80085ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ee:	4798      	blx	r3
 80085f0:	3601      	adds	r6, #1
 80085f2:	e7f2      	b.n	80085da <__libc_init_array+0x1e>
 80085f4:	08009778 	.word	0x08009778
 80085f8:	08009778 	.word	0x08009778
 80085fc:	08009778 	.word	0x08009778
 8008600:	0800977c 	.word	0x0800977c

08008604 <__retarget_lock_init_recursive>:
 8008604:	4770      	bx	lr

08008606 <__retarget_lock_acquire_recursive>:
 8008606:	4770      	bx	lr

08008608 <__retarget_lock_release_recursive>:
 8008608:	4770      	bx	lr

0800860a <memcpy>:
 800860a:	440a      	add	r2, r1
 800860c:	4291      	cmp	r1, r2
 800860e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008612:	d100      	bne.n	8008616 <memcpy+0xc>
 8008614:	4770      	bx	lr
 8008616:	b510      	push	{r4, lr}
 8008618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800861c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008620:	4291      	cmp	r1, r2
 8008622:	d1f9      	bne.n	8008618 <memcpy+0xe>
 8008624:	bd10      	pop	{r4, pc}
	...

08008628 <__assert_func>:
 8008628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800862a:	4614      	mov	r4, r2
 800862c:	461a      	mov	r2, r3
 800862e:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <__assert_func+0x2c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4605      	mov	r5, r0
 8008634:	68d8      	ldr	r0, [r3, #12]
 8008636:	b954      	cbnz	r4, 800864e <__assert_func+0x26>
 8008638:	4b07      	ldr	r3, [pc, #28]	@ (8008658 <__assert_func+0x30>)
 800863a:	461c      	mov	r4, r3
 800863c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008640:	9100      	str	r1, [sp, #0]
 8008642:	462b      	mov	r3, r5
 8008644:	4905      	ldr	r1, [pc, #20]	@ (800865c <__assert_func+0x34>)
 8008646:	f000 fc89 	bl	8008f5c <fiprintf>
 800864a:	f000 fd2d 	bl	80090a8 <abort>
 800864e:	4b04      	ldr	r3, [pc, #16]	@ (8008660 <__assert_func+0x38>)
 8008650:	e7f4      	b.n	800863c <__assert_func+0x14>
 8008652:	bf00      	nop
 8008654:	2000001c 	.word	0x2000001c
 8008658:	0800973a 	.word	0x0800973a
 800865c:	0800970c 	.word	0x0800970c
 8008660:	080096ff 	.word	0x080096ff

08008664 <_free_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4605      	mov	r5, r0
 8008668:	2900      	cmp	r1, #0
 800866a:	d041      	beq.n	80086f0 <_free_r+0x8c>
 800866c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008670:	1f0c      	subs	r4, r1, #4
 8008672:	2b00      	cmp	r3, #0
 8008674:	bfb8      	it	lt
 8008676:	18e4      	addlt	r4, r4, r3
 8008678:	f000 f8e8 	bl	800884c <__malloc_lock>
 800867c:	4a1d      	ldr	r2, [pc, #116]	@ (80086f4 <_free_r+0x90>)
 800867e:	6813      	ldr	r3, [r2, #0]
 8008680:	b933      	cbnz	r3, 8008690 <_free_r+0x2c>
 8008682:	6063      	str	r3, [r4, #4]
 8008684:	6014      	str	r4, [r2, #0]
 8008686:	4628      	mov	r0, r5
 8008688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800868c:	f000 b8e4 	b.w	8008858 <__malloc_unlock>
 8008690:	42a3      	cmp	r3, r4
 8008692:	d908      	bls.n	80086a6 <_free_r+0x42>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	1821      	adds	r1, r4, r0
 8008698:	428b      	cmp	r3, r1
 800869a:	bf01      	itttt	eq
 800869c:	6819      	ldreq	r1, [r3, #0]
 800869e:	685b      	ldreq	r3, [r3, #4]
 80086a0:	1809      	addeq	r1, r1, r0
 80086a2:	6021      	streq	r1, [r4, #0]
 80086a4:	e7ed      	b.n	8008682 <_free_r+0x1e>
 80086a6:	461a      	mov	r2, r3
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	b10b      	cbz	r3, 80086b0 <_free_r+0x4c>
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d9fa      	bls.n	80086a6 <_free_r+0x42>
 80086b0:	6811      	ldr	r1, [r2, #0]
 80086b2:	1850      	adds	r0, r2, r1
 80086b4:	42a0      	cmp	r0, r4
 80086b6:	d10b      	bne.n	80086d0 <_free_r+0x6c>
 80086b8:	6820      	ldr	r0, [r4, #0]
 80086ba:	4401      	add	r1, r0
 80086bc:	1850      	adds	r0, r2, r1
 80086be:	4283      	cmp	r3, r0
 80086c0:	6011      	str	r1, [r2, #0]
 80086c2:	d1e0      	bne.n	8008686 <_free_r+0x22>
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	6053      	str	r3, [r2, #4]
 80086ca:	4408      	add	r0, r1
 80086cc:	6010      	str	r0, [r2, #0]
 80086ce:	e7da      	b.n	8008686 <_free_r+0x22>
 80086d0:	d902      	bls.n	80086d8 <_free_r+0x74>
 80086d2:	230c      	movs	r3, #12
 80086d4:	602b      	str	r3, [r5, #0]
 80086d6:	e7d6      	b.n	8008686 <_free_r+0x22>
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	1821      	adds	r1, r4, r0
 80086dc:	428b      	cmp	r3, r1
 80086de:	bf04      	itt	eq
 80086e0:	6819      	ldreq	r1, [r3, #0]
 80086e2:	685b      	ldreq	r3, [r3, #4]
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	bf04      	itt	eq
 80086e8:	1809      	addeq	r1, r1, r0
 80086ea:	6021      	streq	r1, [r4, #0]
 80086ec:	6054      	str	r4, [r2, #4]
 80086ee:	e7ca      	b.n	8008686 <_free_r+0x22>
 80086f0:	bd38      	pop	{r3, r4, r5, pc}
 80086f2:	bf00      	nop
 80086f4:	20005930 	.word	0x20005930

080086f8 <malloc>:
 80086f8:	4b02      	ldr	r3, [pc, #8]	@ (8008704 <malloc+0xc>)
 80086fa:	4601      	mov	r1, r0
 80086fc:	6818      	ldr	r0, [r3, #0]
 80086fe:	f000 b825 	b.w	800874c <_malloc_r>
 8008702:	bf00      	nop
 8008704:	2000001c 	.word	0x2000001c

08008708 <sbrk_aligned>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	4e0f      	ldr	r6, [pc, #60]	@ (8008748 <sbrk_aligned+0x40>)
 800870c:	460c      	mov	r4, r1
 800870e:	6831      	ldr	r1, [r6, #0]
 8008710:	4605      	mov	r5, r0
 8008712:	b911      	cbnz	r1, 800871a <sbrk_aligned+0x12>
 8008714:	f000 fcb8 	bl	8009088 <_sbrk_r>
 8008718:	6030      	str	r0, [r6, #0]
 800871a:	4621      	mov	r1, r4
 800871c:	4628      	mov	r0, r5
 800871e:	f000 fcb3 	bl	8009088 <_sbrk_r>
 8008722:	1c43      	adds	r3, r0, #1
 8008724:	d103      	bne.n	800872e <sbrk_aligned+0x26>
 8008726:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800872a:	4620      	mov	r0, r4
 800872c:	bd70      	pop	{r4, r5, r6, pc}
 800872e:	1cc4      	adds	r4, r0, #3
 8008730:	f024 0403 	bic.w	r4, r4, #3
 8008734:	42a0      	cmp	r0, r4
 8008736:	d0f8      	beq.n	800872a <sbrk_aligned+0x22>
 8008738:	1a21      	subs	r1, r4, r0
 800873a:	4628      	mov	r0, r5
 800873c:	f000 fca4 	bl	8009088 <_sbrk_r>
 8008740:	3001      	adds	r0, #1
 8008742:	d1f2      	bne.n	800872a <sbrk_aligned+0x22>
 8008744:	e7ef      	b.n	8008726 <sbrk_aligned+0x1e>
 8008746:	bf00      	nop
 8008748:	2000592c 	.word	0x2000592c

0800874c <_malloc_r>:
 800874c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008750:	1ccd      	adds	r5, r1, #3
 8008752:	f025 0503 	bic.w	r5, r5, #3
 8008756:	3508      	adds	r5, #8
 8008758:	2d0c      	cmp	r5, #12
 800875a:	bf38      	it	cc
 800875c:	250c      	movcc	r5, #12
 800875e:	2d00      	cmp	r5, #0
 8008760:	4606      	mov	r6, r0
 8008762:	db01      	blt.n	8008768 <_malloc_r+0x1c>
 8008764:	42a9      	cmp	r1, r5
 8008766:	d904      	bls.n	8008772 <_malloc_r+0x26>
 8008768:	230c      	movs	r3, #12
 800876a:	6033      	str	r3, [r6, #0]
 800876c:	2000      	movs	r0, #0
 800876e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008772:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008848 <_malloc_r+0xfc>
 8008776:	f000 f869 	bl	800884c <__malloc_lock>
 800877a:	f8d8 3000 	ldr.w	r3, [r8]
 800877e:	461c      	mov	r4, r3
 8008780:	bb44      	cbnz	r4, 80087d4 <_malloc_r+0x88>
 8008782:	4629      	mov	r1, r5
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff ffbf 	bl	8008708 <sbrk_aligned>
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	4604      	mov	r4, r0
 800878e:	d158      	bne.n	8008842 <_malloc_r+0xf6>
 8008790:	f8d8 4000 	ldr.w	r4, [r8]
 8008794:	4627      	mov	r7, r4
 8008796:	2f00      	cmp	r7, #0
 8008798:	d143      	bne.n	8008822 <_malloc_r+0xd6>
 800879a:	2c00      	cmp	r4, #0
 800879c:	d04b      	beq.n	8008836 <_malloc_r+0xea>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	4639      	mov	r1, r7
 80087a2:	4630      	mov	r0, r6
 80087a4:	eb04 0903 	add.w	r9, r4, r3
 80087a8:	f000 fc6e 	bl	8009088 <_sbrk_r>
 80087ac:	4581      	cmp	r9, r0
 80087ae:	d142      	bne.n	8008836 <_malloc_r+0xea>
 80087b0:	6821      	ldr	r1, [r4, #0]
 80087b2:	1a6d      	subs	r5, r5, r1
 80087b4:	4629      	mov	r1, r5
 80087b6:	4630      	mov	r0, r6
 80087b8:	f7ff ffa6 	bl	8008708 <sbrk_aligned>
 80087bc:	3001      	adds	r0, #1
 80087be:	d03a      	beq.n	8008836 <_malloc_r+0xea>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	442b      	add	r3, r5
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	f8d8 3000 	ldr.w	r3, [r8]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	bb62      	cbnz	r2, 8008828 <_malloc_r+0xdc>
 80087ce:	f8c8 7000 	str.w	r7, [r8]
 80087d2:	e00f      	b.n	80087f4 <_malloc_r+0xa8>
 80087d4:	6822      	ldr	r2, [r4, #0]
 80087d6:	1b52      	subs	r2, r2, r5
 80087d8:	d420      	bmi.n	800881c <_malloc_r+0xd0>
 80087da:	2a0b      	cmp	r2, #11
 80087dc:	d917      	bls.n	800880e <_malloc_r+0xc2>
 80087de:	1961      	adds	r1, r4, r5
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	6025      	str	r5, [r4, #0]
 80087e4:	bf18      	it	ne
 80087e6:	6059      	strne	r1, [r3, #4]
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	bf08      	it	eq
 80087ec:	f8c8 1000 	streq.w	r1, [r8]
 80087f0:	5162      	str	r2, [r4, r5]
 80087f2:	604b      	str	r3, [r1, #4]
 80087f4:	4630      	mov	r0, r6
 80087f6:	f000 f82f 	bl	8008858 <__malloc_unlock>
 80087fa:	f104 000b 	add.w	r0, r4, #11
 80087fe:	1d23      	adds	r3, r4, #4
 8008800:	f020 0007 	bic.w	r0, r0, #7
 8008804:	1ac2      	subs	r2, r0, r3
 8008806:	bf1c      	itt	ne
 8008808:	1a1b      	subne	r3, r3, r0
 800880a:	50a3      	strne	r3, [r4, r2]
 800880c:	e7af      	b.n	800876e <_malloc_r+0x22>
 800880e:	6862      	ldr	r2, [r4, #4]
 8008810:	42a3      	cmp	r3, r4
 8008812:	bf0c      	ite	eq
 8008814:	f8c8 2000 	streq.w	r2, [r8]
 8008818:	605a      	strne	r2, [r3, #4]
 800881a:	e7eb      	b.n	80087f4 <_malloc_r+0xa8>
 800881c:	4623      	mov	r3, r4
 800881e:	6864      	ldr	r4, [r4, #4]
 8008820:	e7ae      	b.n	8008780 <_malloc_r+0x34>
 8008822:	463c      	mov	r4, r7
 8008824:	687f      	ldr	r7, [r7, #4]
 8008826:	e7b6      	b.n	8008796 <_malloc_r+0x4a>
 8008828:	461a      	mov	r2, r3
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	42a3      	cmp	r3, r4
 800882e:	d1fb      	bne.n	8008828 <_malloc_r+0xdc>
 8008830:	2300      	movs	r3, #0
 8008832:	6053      	str	r3, [r2, #4]
 8008834:	e7de      	b.n	80087f4 <_malloc_r+0xa8>
 8008836:	230c      	movs	r3, #12
 8008838:	6033      	str	r3, [r6, #0]
 800883a:	4630      	mov	r0, r6
 800883c:	f000 f80c 	bl	8008858 <__malloc_unlock>
 8008840:	e794      	b.n	800876c <_malloc_r+0x20>
 8008842:	6005      	str	r5, [r0, #0]
 8008844:	e7d6      	b.n	80087f4 <_malloc_r+0xa8>
 8008846:	bf00      	nop
 8008848:	20005930 	.word	0x20005930

0800884c <__malloc_lock>:
 800884c:	4801      	ldr	r0, [pc, #4]	@ (8008854 <__malloc_lock+0x8>)
 800884e:	f7ff beda 	b.w	8008606 <__retarget_lock_acquire_recursive>
 8008852:	bf00      	nop
 8008854:	20005928 	.word	0x20005928

08008858 <__malloc_unlock>:
 8008858:	4801      	ldr	r0, [pc, #4]	@ (8008860 <__malloc_unlock+0x8>)
 800885a:	f7ff bed5 	b.w	8008608 <__retarget_lock_release_recursive>
 800885e:	bf00      	nop
 8008860:	20005928 	.word	0x20005928

08008864 <__sfputc_r>:
 8008864:	6893      	ldr	r3, [r2, #8]
 8008866:	3b01      	subs	r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	b410      	push	{r4}
 800886c:	6093      	str	r3, [r2, #8]
 800886e:	da08      	bge.n	8008882 <__sfputc_r+0x1e>
 8008870:	6994      	ldr	r4, [r2, #24]
 8008872:	42a3      	cmp	r3, r4
 8008874:	db01      	blt.n	800887a <__sfputc_r+0x16>
 8008876:	290a      	cmp	r1, #10
 8008878:	d103      	bne.n	8008882 <__sfputc_r+0x1e>
 800887a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800887e:	f7ff bd86 	b.w	800838e <__swbuf_r>
 8008882:	6813      	ldr	r3, [r2, #0]
 8008884:	1c58      	adds	r0, r3, #1
 8008886:	6010      	str	r0, [r2, #0]
 8008888:	7019      	strb	r1, [r3, #0]
 800888a:	4608      	mov	r0, r1
 800888c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008890:	4770      	bx	lr

08008892 <__sfputs_r>:
 8008892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008894:	4606      	mov	r6, r0
 8008896:	460f      	mov	r7, r1
 8008898:	4614      	mov	r4, r2
 800889a:	18d5      	adds	r5, r2, r3
 800889c:	42ac      	cmp	r4, r5
 800889e:	d101      	bne.n	80088a4 <__sfputs_r+0x12>
 80088a0:	2000      	movs	r0, #0
 80088a2:	e007      	b.n	80088b4 <__sfputs_r+0x22>
 80088a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a8:	463a      	mov	r2, r7
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff ffda 	bl	8008864 <__sfputc_r>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d1f3      	bne.n	800889c <__sfputs_r+0xa>
 80088b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088b8 <_vfiprintf_r>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	460d      	mov	r5, r1
 80088be:	b09d      	sub	sp, #116	@ 0x74
 80088c0:	4614      	mov	r4, r2
 80088c2:	4698      	mov	r8, r3
 80088c4:	4606      	mov	r6, r0
 80088c6:	b118      	cbz	r0, 80088d0 <_vfiprintf_r+0x18>
 80088c8:	6a03      	ldr	r3, [r0, #32]
 80088ca:	b90b      	cbnz	r3, 80088d0 <_vfiprintf_r+0x18>
 80088cc:	f7ff fc76 	bl	80081bc <__sinit>
 80088d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088d2:	07d9      	lsls	r1, r3, #31
 80088d4:	d405      	bmi.n	80088e2 <_vfiprintf_r+0x2a>
 80088d6:	89ab      	ldrh	r3, [r5, #12]
 80088d8:	059a      	lsls	r2, r3, #22
 80088da:	d402      	bmi.n	80088e2 <_vfiprintf_r+0x2a>
 80088dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088de:	f7ff fe92 	bl	8008606 <__retarget_lock_acquire_recursive>
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	071b      	lsls	r3, r3, #28
 80088e6:	d501      	bpl.n	80088ec <_vfiprintf_r+0x34>
 80088e8:	692b      	ldr	r3, [r5, #16]
 80088ea:	b99b      	cbnz	r3, 8008914 <_vfiprintf_r+0x5c>
 80088ec:	4629      	mov	r1, r5
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7ff fd8c 	bl	800840c <__swsetup_r>
 80088f4:	b170      	cbz	r0, 8008914 <_vfiprintf_r+0x5c>
 80088f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088f8:	07dc      	lsls	r4, r3, #31
 80088fa:	d504      	bpl.n	8008906 <_vfiprintf_r+0x4e>
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008900:	b01d      	add	sp, #116	@ 0x74
 8008902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	89ab      	ldrh	r3, [r5, #12]
 8008908:	0598      	lsls	r0, r3, #22
 800890a:	d4f7      	bmi.n	80088fc <_vfiprintf_r+0x44>
 800890c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800890e:	f7ff fe7b 	bl	8008608 <__retarget_lock_release_recursive>
 8008912:	e7f3      	b.n	80088fc <_vfiprintf_r+0x44>
 8008914:	2300      	movs	r3, #0
 8008916:	9309      	str	r3, [sp, #36]	@ 0x24
 8008918:	2320      	movs	r3, #32
 800891a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800891e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008922:	2330      	movs	r3, #48	@ 0x30
 8008924:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ad4 <_vfiprintf_r+0x21c>
 8008928:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800892c:	f04f 0901 	mov.w	r9, #1
 8008930:	4623      	mov	r3, r4
 8008932:	469a      	mov	sl, r3
 8008934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008938:	b10a      	cbz	r2, 800893e <_vfiprintf_r+0x86>
 800893a:	2a25      	cmp	r2, #37	@ 0x25
 800893c:	d1f9      	bne.n	8008932 <_vfiprintf_r+0x7a>
 800893e:	ebba 0b04 	subs.w	fp, sl, r4
 8008942:	d00b      	beq.n	800895c <_vfiprintf_r+0xa4>
 8008944:	465b      	mov	r3, fp
 8008946:	4622      	mov	r2, r4
 8008948:	4629      	mov	r1, r5
 800894a:	4630      	mov	r0, r6
 800894c:	f7ff ffa1 	bl	8008892 <__sfputs_r>
 8008950:	3001      	adds	r0, #1
 8008952:	f000 80a7 	beq.w	8008aa4 <_vfiprintf_r+0x1ec>
 8008956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008958:	445a      	add	r2, fp
 800895a:	9209      	str	r2, [sp, #36]	@ 0x24
 800895c:	f89a 3000 	ldrb.w	r3, [sl]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 809f 	beq.w	8008aa4 <_vfiprintf_r+0x1ec>
 8008966:	2300      	movs	r3, #0
 8008968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800896c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008970:	f10a 0a01 	add.w	sl, sl, #1
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	9307      	str	r3, [sp, #28]
 8008978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800897c:	931a      	str	r3, [sp, #104]	@ 0x68
 800897e:	4654      	mov	r4, sl
 8008980:	2205      	movs	r2, #5
 8008982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008986:	4853      	ldr	r0, [pc, #332]	@ (8008ad4 <_vfiprintf_r+0x21c>)
 8008988:	f7f7 fc42 	bl	8000210 <memchr>
 800898c:	9a04      	ldr	r2, [sp, #16]
 800898e:	b9d8      	cbnz	r0, 80089c8 <_vfiprintf_r+0x110>
 8008990:	06d1      	lsls	r1, r2, #27
 8008992:	bf44      	itt	mi
 8008994:	2320      	movmi	r3, #32
 8008996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800899a:	0713      	lsls	r3, r2, #28
 800899c:	bf44      	itt	mi
 800899e:	232b      	movmi	r3, #43	@ 0x2b
 80089a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089a4:	f89a 3000 	ldrb.w	r3, [sl]
 80089a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80089aa:	d015      	beq.n	80089d8 <_vfiprintf_r+0x120>
 80089ac:	9a07      	ldr	r2, [sp, #28]
 80089ae:	4654      	mov	r4, sl
 80089b0:	2000      	movs	r0, #0
 80089b2:	f04f 0c0a 	mov.w	ip, #10
 80089b6:	4621      	mov	r1, r4
 80089b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089bc:	3b30      	subs	r3, #48	@ 0x30
 80089be:	2b09      	cmp	r3, #9
 80089c0:	d94b      	bls.n	8008a5a <_vfiprintf_r+0x1a2>
 80089c2:	b1b0      	cbz	r0, 80089f2 <_vfiprintf_r+0x13a>
 80089c4:	9207      	str	r2, [sp, #28]
 80089c6:	e014      	b.n	80089f2 <_vfiprintf_r+0x13a>
 80089c8:	eba0 0308 	sub.w	r3, r0, r8
 80089cc:	fa09 f303 	lsl.w	r3, r9, r3
 80089d0:	4313      	orrs	r3, r2
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	46a2      	mov	sl, r4
 80089d6:	e7d2      	b.n	800897e <_vfiprintf_r+0xc6>
 80089d8:	9b03      	ldr	r3, [sp, #12]
 80089da:	1d19      	adds	r1, r3, #4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	9103      	str	r1, [sp, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	bfbb      	ittet	lt
 80089e4:	425b      	neglt	r3, r3
 80089e6:	f042 0202 	orrlt.w	r2, r2, #2
 80089ea:	9307      	strge	r3, [sp, #28]
 80089ec:	9307      	strlt	r3, [sp, #28]
 80089ee:	bfb8      	it	lt
 80089f0:	9204      	strlt	r2, [sp, #16]
 80089f2:	7823      	ldrb	r3, [r4, #0]
 80089f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80089f6:	d10a      	bne.n	8008a0e <_vfiprintf_r+0x156>
 80089f8:	7863      	ldrb	r3, [r4, #1]
 80089fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80089fc:	d132      	bne.n	8008a64 <_vfiprintf_r+0x1ac>
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	1d1a      	adds	r2, r3, #4
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	9203      	str	r2, [sp, #12]
 8008a06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a0a:	3402      	adds	r4, #2
 8008a0c:	9305      	str	r3, [sp, #20]
 8008a0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ae4 <_vfiprintf_r+0x22c>
 8008a12:	7821      	ldrb	r1, [r4, #0]
 8008a14:	2203      	movs	r2, #3
 8008a16:	4650      	mov	r0, sl
 8008a18:	f7f7 fbfa 	bl	8000210 <memchr>
 8008a1c:	b138      	cbz	r0, 8008a2e <_vfiprintf_r+0x176>
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	eba0 000a 	sub.w	r0, r0, sl
 8008a24:	2240      	movs	r2, #64	@ 0x40
 8008a26:	4082      	lsls	r2, r0
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	3401      	adds	r4, #1
 8008a2c:	9304      	str	r3, [sp, #16]
 8008a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a32:	4829      	ldr	r0, [pc, #164]	@ (8008ad8 <_vfiprintf_r+0x220>)
 8008a34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a38:	2206      	movs	r2, #6
 8008a3a:	f7f7 fbe9 	bl	8000210 <memchr>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d03f      	beq.n	8008ac2 <_vfiprintf_r+0x20a>
 8008a42:	4b26      	ldr	r3, [pc, #152]	@ (8008adc <_vfiprintf_r+0x224>)
 8008a44:	bb1b      	cbnz	r3, 8008a8e <_vfiprintf_r+0x1d6>
 8008a46:	9b03      	ldr	r3, [sp, #12]
 8008a48:	3307      	adds	r3, #7
 8008a4a:	f023 0307 	bic.w	r3, r3, #7
 8008a4e:	3308      	adds	r3, #8
 8008a50:	9303      	str	r3, [sp, #12]
 8008a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a54:	443b      	add	r3, r7
 8008a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a58:	e76a      	b.n	8008930 <_vfiprintf_r+0x78>
 8008a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a5e:	460c      	mov	r4, r1
 8008a60:	2001      	movs	r0, #1
 8008a62:	e7a8      	b.n	80089b6 <_vfiprintf_r+0xfe>
 8008a64:	2300      	movs	r3, #0
 8008a66:	3401      	adds	r4, #1
 8008a68:	9305      	str	r3, [sp, #20]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	f04f 0c0a 	mov.w	ip, #10
 8008a70:	4620      	mov	r0, r4
 8008a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a76:	3a30      	subs	r2, #48	@ 0x30
 8008a78:	2a09      	cmp	r2, #9
 8008a7a:	d903      	bls.n	8008a84 <_vfiprintf_r+0x1cc>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0c6      	beq.n	8008a0e <_vfiprintf_r+0x156>
 8008a80:	9105      	str	r1, [sp, #20]
 8008a82:	e7c4      	b.n	8008a0e <_vfiprintf_r+0x156>
 8008a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a88:	4604      	mov	r4, r0
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e7f0      	b.n	8008a70 <_vfiprintf_r+0x1b8>
 8008a8e:	ab03      	add	r3, sp, #12
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	462a      	mov	r2, r5
 8008a94:	4b12      	ldr	r3, [pc, #72]	@ (8008ae0 <_vfiprintf_r+0x228>)
 8008a96:	a904      	add	r1, sp, #16
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f3af 8000 	nop.w
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	1c78      	adds	r0, r7, #1
 8008aa2:	d1d6      	bne.n	8008a52 <_vfiprintf_r+0x19a>
 8008aa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aa6:	07d9      	lsls	r1, r3, #31
 8008aa8:	d405      	bmi.n	8008ab6 <_vfiprintf_r+0x1fe>
 8008aaa:	89ab      	ldrh	r3, [r5, #12]
 8008aac:	059a      	lsls	r2, r3, #22
 8008aae:	d402      	bmi.n	8008ab6 <_vfiprintf_r+0x1fe>
 8008ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ab2:	f7ff fda9 	bl	8008608 <__retarget_lock_release_recursive>
 8008ab6:	89ab      	ldrh	r3, [r5, #12]
 8008ab8:	065b      	lsls	r3, r3, #25
 8008aba:	f53f af1f 	bmi.w	80088fc <_vfiprintf_r+0x44>
 8008abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ac0:	e71e      	b.n	8008900 <_vfiprintf_r+0x48>
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	4b05      	ldr	r3, [pc, #20]	@ (8008ae0 <_vfiprintf_r+0x228>)
 8008aca:	a904      	add	r1, sp, #16
 8008acc:	4630      	mov	r0, r6
 8008ace:	f000 f879 	bl	8008bc4 <_printf_i>
 8008ad2:	e7e4      	b.n	8008a9e <_vfiprintf_r+0x1e6>
 8008ad4:	0800973b 	.word	0x0800973b
 8008ad8:	08009745 	.word	0x08009745
 8008adc:	00000000 	.word	0x00000000
 8008ae0:	08008893 	.word	0x08008893
 8008ae4:	08009741 	.word	0x08009741

08008ae8 <_printf_common>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	4616      	mov	r6, r2
 8008aee:	4698      	mov	r8, r3
 8008af0:	688a      	ldr	r2, [r1, #8]
 8008af2:	690b      	ldr	r3, [r1, #16]
 8008af4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008af8:	4293      	cmp	r3, r2
 8008afa:	bfb8      	it	lt
 8008afc:	4613      	movlt	r3, r2
 8008afe:	6033      	str	r3, [r6, #0]
 8008b00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b04:	4607      	mov	r7, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	b10a      	cbz	r2, 8008b0e <_printf_common+0x26>
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	6033      	str	r3, [r6, #0]
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	0699      	lsls	r1, r3, #26
 8008b12:	bf42      	ittt	mi
 8008b14:	6833      	ldrmi	r3, [r6, #0]
 8008b16:	3302      	addmi	r3, #2
 8008b18:	6033      	strmi	r3, [r6, #0]
 8008b1a:	6825      	ldr	r5, [r4, #0]
 8008b1c:	f015 0506 	ands.w	r5, r5, #6
 8008b20:	d106      	bne.n	8008b30 <_printf_common+0x48>
 8008b22:	f104 0a19 	add.w	sl, r4, #25
 8008b26:	68e3      	ldr	r3, [r4, #12]
 8008b28:	6832      	ldr	r2, [r6, #0]
 8008b2a:	1a9b      	subs	r3, r3, r2
 8008b2c:	42ab      	cmp	r3, r5
 8008b2e:	dc26      	bgt.n	8008b7e <_printf_common+0x96>
 8008b30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b34:	6822      	ldr	r2, [r4, #0]
 8008b36:	3b00      	subs	r3, #0
 8008b38:	bf18      	it	ne
 8008b3a:	2301      	movne	r3, #1
 8008b3c:	0692      	lsls	r2, r2, #26
 8008b3e:	d42b      	bmi.n	8008b98 <_printf_common+0xb0>
 8008b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b44:	4641      	mov	r1, r8
 8008b46:	4638      	mov	r0, r7
 8008b48:	47c8      	blx	r9
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	d01e      	beq.n	8008b8c <_printf_common+0xa4>
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	6922      	ldr	r2, [r4, #16]
 8008b52:	f003 0306 	and.w	r3, r3, #6
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	bf02      	ittt	eq
 8008b5a:	68e5      	ldreq	r5, [r4, #12]
 8008b5c:	6833      	ldreq	r3, [r6, #0]
 8008b5e:	1aed      	subeq	r5, r5, r3
 8008b60:	68a3      	ldr	r3, [r4, #8]
 8008b62:	bf0c      	ite	eq
 8008b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b68:	2500      	movne	r5, #0
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	bfc4      	itt	gt
 8008b6e:	1a9b      	subgt	r3, r3, r2
 8008b70:	18ed      	addgt	r5, r5, r3
 8008b72:	2600      	movs	r6, #0
 8008b74:	341a      	adds	r4, #26
 8008b76:	42b5      	cmp	r5, r6
 8008b78:	d11a      	bne.n	8008bb0 <_printf_common+0xc8>
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	e008      	b.n	8008b90 <_printf_common+0xa8>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	4652      	mov	r2, sl
 8008b82:	4641      	mov	r1, r8
 8008b84:	4638      	mov	r0, r7
 8008b86:	47c8      	blx	r9
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d103      	bne.n	8008b94 <_printf_common+0xac>
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b94:	3501      	adds	r5, #1
 8008b96:	e7c6      	b.n	8008b26 <_printf_common+0x3e>
 8008b98:	18e1      	adds	r1, r4, r3
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	2030      	movs	r0, #48	@ 0x30
 8008b9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ba2:	4422      	add	r2, r4
 8008ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bac:	3302      	adds	r3, #2
 8008bae:	e7c7      	b.n	8008b40 <_printf_common+0x58>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	4622      	mov	r2, r4
 8008bb4:	4641      	mov	r1, r8
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	47c8      	blx	r9
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d0e6      	beq.n	8008b8c <_printf_common+0xa4>
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	e7d9      	b.n	8008b76 <_printf_common+0x8e>
	...

08008bc4 <_printf_i>:
 8008bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc8:	7e0f      	ldrb	r7, [r1, #24]
 8008bca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bcc:	2f78      	cmp	r7, #120	@ 0x78
 8008bce:	4691      	mov	r9, r2
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	469a      	mov	sl, r3
 8008bd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bda:	d807      	bhi.n	8008bec <_printf_i+0x28>
 8008bdc:	2f62      	cmp	r7, #98	@ 0x62
 8008bde:	d80a      	bhi.n	8008bf6 <_printf_i+0x32>
 8008be0:	2f00      	cmp	r7, #0
 8008be2:	f000 80d2 	beq.w	8008d8a <_printf_i+0x1c6>
 8008be6:	2f58      	cmp	r7, #88	@ 0x58
 8008be8:	f000 80b9 	beq.w	8008d5e <_printf_i+0x19a>
 8008bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bf4:	e03a      	b.n	8008c6c <_printf_i+0xa8>
 8008bf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bfa:	2b15      	cmp	r3, #21
 8008bfc:	d8f6      	bhi.n	8008bec <_printf_i+0x28>
 8008bfe:	a101      	add	r1, pc, #4	@ (adr r1, 8008c04 <_printf_i+0x40>)
 8008c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c04:	08008c5d 	.word	0x08008c5d
 8008c08:	08008c71 	.word	0x08008c71
 8008c0c:	08008bed 	.word	0x08008bed
 8008c10:	08008bed 	.word	0x08008bed
 8008c14:	08008bed 	.word	0x08008bed
 8008c18:	08008bed 	.word	0x08008bed
 8008c1c:	08008c71 	.word	0x08008c71
 8008c20:	08008bed 	.word	0x08008bed
 8008c24:	08008bed 	.word	0x08008bed
 8008c28:	08008bed 	.word	0x08008bed
 8008c2c:	08008bed 	.word	0x08008bed
 8008c30:	08008d71 	.word	0x08008d71
 8008c34:	08008c9b 	.word	0x08008c9b
 8008c38:	08008d2b 	.word	0x08008d2b
 8008c3c:	08008bed 	.word	0x08008bed
 8008c40:	08008bed 	.word	0x08008bed
 8008c44:	08008d93 	.word	0x08008d93
 8008c48:	08008bed 	.word	0x08008bed
 8008c4c:	08008c9b 	.word	0x08008c9b
 8008c50:	08008bed 	.word	0x08008bed
 8008c54:	08008bed 	.word	0x08008bed
 8008c58:	08008d33 	.word	0x08008d33
 8008c5c:	6833      	ldr	r3, [r6, #0]
 8008c5e:	1d1a      	adds	r2, r3, #4
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6032      	str	r2, [r6, #0]
 8008c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e09d      	b.n	8008dac <_printf_i+0x1e8>
 8008c70:	6833      	ldr	r3, [r6, #0]
 8008c72:	6820      	ldr	r0, [r4, #0]
 8008c74:	1d19      	adds	r1, r3, #4
 8008c76:	6031      	str	r1, [r6, #0]
 8008c78:	0606      	lsls	r6, r0, #24
 8008c7a:	d501      	bpl.n	8008c80 <_printf_i+0xbc>
 8008c7c:	681d      	ldr	r5, [r3, #0]
 8008c7e:	e003      	b.n	8008c88 <_printf_i+0xc4>
 8008c80:	0645      	lsls	r5, r0, #25
 8008c82:	d5fb      	bpl.n	8008c7c <_printf_i+0xb8>
 8008c84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	da03      	bge.n	8008c94 <_printf_i+0xd0>
 8008c8c:	232d      	movs	r3, #45	@ 0x2d
 8008c8e:	426d      	negs	r5, r5
 8008c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c94:	4859      	ldr	r0, [pc, #356]	@ (8008dfc <_printf_i+0x238>)
 8008c96:	230a      	movs	r3, #10
 8008c98:	e011      	b.n	8008cbe <_printf_i+0xfa>
 8008c9a:	6821      	ldr	r1, [r4, #0]
 8008c9c:	6833      	ldr	r3, [r6, #0]
 8008c9e:	0608      	lsls	r0, r1, #24
 8008ca0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ca4:	d402      	bmi.n	8008cac <_printf_i+0xe8>
 8008ca6:	0649      	lsls	r1, r1, #25
 8008ca8:	bf48      	it	mi
 8008caa:	b2ad      	uxthmi	r5, r5
 8008cac:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cae:	4853      	ldr	r0, [pc, #332]	@ (8008dfc <_printf_i+0x238>)
 8008cb0:	6033      	str	r3, [r6, #0]
 8008cb2:	bf14      	ite	ne
 8008cb4:	230a      	movne	r3, #10
 8008cb6:	2308      	moveq	r3, #8
 8008cb8:	2100      	movs	r1, #0
 8008cba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cbe:	6866      	ldr	r6, [r4, #4]
 8008cc0:	60a6      	str	r6, [r4, #8]
 8008cc2:	2e00      	cmp	r6, #0
 8008cc4:	bfa2      	ittt	ge
 8008cc6:	6821      	ldrge	r1, [r4, #0]
 8008cc8:	f021 0104 	bicge.w	r1, r1, #4
 8008ccc:	6021      	strge	r1, [r4, #0]
 8008cce:	b90d      	cbnz	r5, 8008cd4 <_printf_i+0x110>
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	d04b      	beq.n	8008d6c <_printf_i+0x1a8>
 8008cd4:	4616      	mov	r6, r2
 8008cd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cda:	fb03 5711 	mls	r7, r3, r1, r5
 8008cde:	5dc7      	ldrb	r7, [r0, r7]
 8008ce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ce4:	462f      	mov	r7, r5
 8008ce6:	42bb      	cmp	r3, r7
 8008ce8:	460d      	mov	r5, r1
 8008cea:	d9f4      	bls.n	8008cd6 <_printf_i+0x112>
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d10b      	bne.n	8008d08 <_printf_i+0x144>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	07df      	lsls	r7, r3, #31
 8008cf4:	d508      	bpl.n	8008d08 <_printf_i+0x144>
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	6861      	ldr	r1, [r4, #4]
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	bfde      	ittt	le
 8008cfe:	2330      	movle	r3, #48	@ 0x30
 8008d00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d04:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008d08:	1b92      	subs	r2, r2, r6
 8008d0a:	6122      	str	r2, [r4, #16]
 8008d0c:	f8cd a000 	str.w	sl, [sp]
 8008d10:	464b      	mov	r3, r9
 8008d12:	aa03      	add	r2, sp, #12
 8008d14:	4621      	mov	r1, r4
 8008d16:	4640      	mov	r0, r8
 8008d18:	f7ff fee6 	bl	8008ae8 <_printf_common>
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d14a      	bne.n	8008db6 <_printf_i+0x1f2>
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d24:	b004      	add	sp, #16
 8008d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	f043 0320 	orr.w	r3, r3, #32
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	4833      	ldr	r0, [pc, #204]	@ (8008e00 <_printf_i+0x23c>)
 8008d34:	2778      	movs	r7, #120	@ 0x78
 8008d36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	6831      	ldr	r1, [r6, #0]
 8008d3e:	061f      	lsls	r7, r3, #24
 8008d40:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d44:	d402      	bmi.n	8008d4c <_printf_i+0x188>
 8008d46:	065f      	lsls	r7, r3, #25
 8008d48:	bf48      	it	mi
 8008d4a:	b2ad      	uxthmi	r5, r5
 8008d4c:	6031      	str	r1, [r6, #0]
 8008d4e:	07d9      	lsls	r1, r3, #31
 8008d50:	bf44      	itt	mi
 8008d52:	f043 0320 	orrmi.w	r3, r3, #32
 8008d56:	6023      	strmi	r3, [r4, #0]
 8008d58:	b11d      	cbz	r5, 8008d62 <_printf_i+0x19e>
 8008d5a:	2310      	movs	r3, #16
 8008d5c:	e7ac      	b.n	8008cb8 <_printf_i+0xf4>
 8008d5e:	4827      	ldr	r0, [pc, #156]	@ (8008dfc <_printf_i+0x238>)
 8008d60:	e7e9      	b.n	8008d36 <_printf_i+0x172>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	f023 0320 	bic.w	r3, r3, #32
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	e7f6      	b.n	8008d5a <_printf_i+0x196>
 8008d6c:	4616      	mov	r6, r2
 8008d6e:	e7bd      	b.n	8008cec <_printf_i+0x128>
 8008d70:	6833      	ldr	r3, [r6, #0]
 8008d72:	6825      	ldr	r5, [r4, #0]
 8008d74:	6961      	ldr	r1, [r4, #20]
 8008d76:	1d18      	adds	r0, r3, #4
 8008d78:	6030      	str	r0, [r6, #0]
 8008d7a:	062e      	lsls	r6, r5, #24
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	d501      	bpl.n	8008d84 <_printf_i+0x1c0>
 8008d80:	6019      	str	r1, [r3, #0]
 8008d82:	e002      	b.n	8008d8a <_printf_i+0x1c6>
 8008d84:	0668      	lsls	r0, r5, #25
 8008d86:	d5fb      	bpl.n	8008d80 <_printf_i+0x1bc>
 8008d88:	8019      	strh	r1, [r3, #0]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	6123      	str	r3, [r4, #16]
 8008d8e:	4616      	mov	r6, r2
 8008d90:	e7bc      	b.n	8008d0c <_printf_i+0x148>
 8008d92:	6833      	ldr	r3, [r6, #0]
 8008d94:	1d1a      	adds	r2, r3, #4
 8008d96:	6032      	str	r2, [r6, #0]
 8008d98:	681e      	ldr	r6, [r3, #0]
 8008d9a:	6862      	ldr	r2, [r4, #4]
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f7f7 fa36 	bl	8000210 <memchr>
 8008da4:	b108      	cbz	r0, 8008daa <_printf_i+0x1e6>
 8008da6:	1b80      	subs	r0, r0, r6
 8008da8:	6060      	str	r0, [r4, #4]
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	6123      	str	r3, [r4, #16]
 8008dae:	2300      	movs	r3, #0
 8008db0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008db4:	e7aa      	b.n	8008d0c <_printf_i+0x148>
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	4632      	mov	r2, r6
 8008dba:	4649      	mov	r1, r9
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	47d0      	blx	sl
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d0ad      	beq.n	8008d20 <_printf_i+0x15c>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	079b      	lsls	r3, r3, #30
 8008dc8:	d413      	bmi.n	8008df2 <_printf_i+0x22e>
 8008dca:	68e0      	ldr	r0, [r4, #12]
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	4298      	cmp	r0, r3
 8008dd0:	bfb8      	it	lt
 8008dd2:	4618      	movlt	r0, r3
 8008dd4:	e7a6      	b.n	8008d24 <_printf_i+0x160>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4632      	mov	r2, r6
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4640      	mov	r0, r8
 8008dde:	47d0      	blx	sl
 8008de0:	3001      	adds	r0, #1
 8008de2:	d09d      	beq.n	8008d20 <_printf_i+0x15c>
 8008de4:	3501      	adds	r5, #1
 8008de6:	68e3      	ldr	r3, [r4, #12]
 8008de8:	9903      	ldr	r1, [sp, #12]
 8008dea:	1a5b      	subs	r3, r3, r1
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dcf2      	bgt.n	8008dd6 <_printf_i+0x212>
 8008df0:	e7eb      	b.n	8008dca <_printf_i+0x206>
 8008df2:	2500      	movs	r5, #0
 8008df4:	f104 0619 	add.w	r6, r4, #25
 8008df8:	e7f5      	b.n	8008de6 <_printf_i+0x222>
 8008dfa:	bf00      	nop
 8008dfc:	0800974c 	.word	0x0800974c
 8008e00:	0800975d 	.word	0x0800975d

08008e04 <__sflush_r>:
 8008e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	0716      	lsls	r6, r2, #28
 8008e0e:	4605      	mov	r5, r0
 8008e10:	460c      	mov	r4, r1
 8008e12:	d454      	bmi.n	8008ebe <__sflush_r+0xba>
 8008e14:	684b      	ldr	r3, [r1, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	dc02      	bgt.n	8008e20 <__sflush_r+0x1c>
 8008e1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dd48      	ble.n	8008eb2 <__sflush_r+0xae>
 8008e20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	d045      	beq.n	8008eb2 <__sflush_r+0xae>
 8008e26:	2300      	movs	r3, #0
 8008e28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e2c:	682f      	ldr	r7, [r5, #0]
 8008e2e:	6a21      	ldr	r1, [r4, #32]
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	d030      	beq.n	8008e96 <__sflush_r+0x92>
 8008e34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e36:	89a3      	ldrh	r3, [r4, #12]
 8008e38:	0759      	lsls	r1, r3, #29
 8008e3a:	d505      	bpl.n	8008e48 <__sflush_r+0x44>
 8008e3c:	6863      	ldr	r3, [r4, #4]
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e42:	b10b      	cbz	r3, 8008e48 <__sflush_r+0x44>
 8008e44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e46:	1ad2      	subs	r2, r2, r3
 8008e48:	2300      	movs	r3, #0
 8008e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e4c:	6a21      	ldr	r1, [r4, #32]
 8008e4e:	4628      	mov	r0, r5
 8008e50:	47b0      	blx	r6
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	d106      	bne.n	8008e66 <__sflush_r+0x62>
 8008e58:	6829      	ldr	r1, [r5, #0]
 8008e5a:	291d      	cmp	r1, #29
 8008e5c:	d82b      	bhi.n	8008eb6 <__sflush_r+0xb2>
 8008e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f08 <__sflush_r+0x104>)
 8008e60:	410a      	asrs	r2, r1
 8008e62:	07d6      	lsls	r6, r2, #31
 8008e64:	d427      	bmi.n	8008eb6 <__sflush_r+0xb2>
 8008e66:	2200      	movs	r2, #0
 8008e68:	6062      	str	r2, [r4, #4]
 8008e6a:	04d9      	lsls	r1, r3, #19
 8008e6c:	6922      	ldr	r2, [r4, #16]
 8008e6e:	6022      	str	r2, [r4, #0]
 8008e70:	d504      	bpl.n	8008e7c <__sflush_r+0x78>
 8008e72:	1c42      	adds	r2, r0, #1
 8008e74:	d101      	bne.n	8008e7a <__sflush_r+0x76>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	b903      	cbnz	r3, 8008e7c <__sflush_r+0x78>
 8008e7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e7e:	602f      	str	r7, [r5, #0]
 8008e80:	b1b9      	cbz	r1, 8008eb2 <__sflush_r+0xae>
 8008e82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e86:	4299      	cmp	r1, r3
 8008e88:	d002      	beq.n	8008e90 <__sflush_r+0x8c>
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f7ff fbea 	bl	8008664 <_free_r>
 8008e90:	2300      	movs	r3, #0
 8008e92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e94:	e00d      	b.n	8008eb2 <__sflush_r+0xae>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b0      	blx	r6
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	1c50      	adds	r0, r2, #1
 8008ea0:	d1c9      	bne.n	8008e36 <__sflush_r+0x32>
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0c6      	beq.n	8008e36 <__sflush_r+0x32>
 8008ea8:	2b1d      	cmp	r3, #29
 8008eaa:	d001      	beq.n	8008eb0 <__sflush_r+0xac>
 8008eac:	2b16      	cmp	r3, #22
 8008eae:	d11e      	bne.n	8008eee <__sflush_r+0xea>
 8008eb0:	602f      	str	r7, [r5, #0]
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	e022      	b.n	8008efc <__sflush_r+0xf8>
 8008eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eba:	b21b      	sxth	r3, r3
 8008ebc:	e01b      	b.n	8008ef6 <__sflush_r+0xf2>
 8008ebe:	690f      	ldr	r7, [r1, #16]
 8008ec0:	2f00      	cmp	r7, #0
 8008ec2:	d0f6      	beq.n	8008eb2 <__sflush_r+0xae>
 8008ec4:	0793      	lsls	r3, r2, #30
 8008ec6:	680e      	ldr	r6, [r1, #0]
 8008ec8:	bf08      	it	eq
 8008eca:	694b      	ldreq	r3, [r1, #20]
 8008ecc:	600f      	str	r7, [r1, #0]
 8008ece:	bf18      	it	ne
 8008ed0:	2300      	movne	r3, #0
 8008ed2:	eba6 0807 	sub.w	r8, r6, r7
 8008ed6:	608b      	str	r3, [r1, #8]
 8008ed8:	f1b8 0f00 	cmp.w	r8, #0
 8008edc:	dde9      	ble.n	8008eb2 <__sflush_r+0xae>
 8008ede:	6a21      	ldr	r1, [r4, #32]
 8008ee0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ee2:	4643      	mov	r3, r8
 8008ee4:	463a      	mov	r2, r7
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	47b0      	blx	r6
 8008eea:	2800      	cmp	r0, #0
 8008eec:	dc08      	bgt.n	8008f00 <__sflush_r+0xfc>
 8008eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f00:	4407      	add	r7, r0
 8008f02:	eba8 0800 	sub.w	r8, r8, r0
 8008f06:	e7e7      	b.n	8008ed8 <__sflush_r+0xd4>
 8008f08:	dfbffffe 	.word	0xdfbffffe

08008f0c <_fflush_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	690b      	ldr	r3, [r1, #16]
 8008f10:	4605      	mov	r5, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	b913      	cbnz	r3, 8008f1c <_fflush_r+0x10>
 8008f16:	2500      	movs	r5, #0
 8008f18:	4628      	mov	r0, r5
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	b118      	cbz	r0, 8008f26 <_fflush_r+0x1a>
 8008f1e:	6a03      	ldr	r3, [r0, #32]
 8008f20:	b90b      	cbnz	r3, 8008f26 <_fflush_r+0x1a>
 8008f22:	f7ff f94b 	bl	80081bc <__sinit>
 8008f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0f3      	beq.n	8008f16 <_fflush_r+0xa>
 8008f2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f30:	07d0      	lsls	r0, r2, #31
 8008f32:	d404      	bmi.n	8008f3e <_fflush_r+0x32>
 8008f34:	0599      	lsls	r1, r3, #22
 8008f36:	d402      	bmi.n	8008f3e <_fflush_r+0x32>
 8008f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f3a:	f7ff fb64 	bl	8008606 <__retarget_lock_acquire_recursive>
 8008f3e:	4628      	mov	r0, r5
 8008f40:	4621      	mov	r1, r4
 8008f42:	f7ff ff5f 	bl	8008e04 <__sflush_r>
 8008f46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f48:	07da      	lsls	r2, r3, #31
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	d4e4      	bmi.n	8008f18 <_fflush_r+0xc>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	059b      	lsls	r3, r3, #22
 8008f52:	d4e1      	bmi.n	8008f18 <_fflush_r+0xc>
 8008f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f56:	f7ff fb57 	bl	8008608 <__retarget_lock_release_recursive>
 8008f5a:	e7dd      	b.n	8008f18 <_fflush_r+0xc>

08008f5c <fiprintf>:
 8008f5c:	b40e      	push	{r1, r2, r3}
 8008f5e:	b503      	push	{r0, r1, lr}
 8008f60:	4601      	mov	r1, r0
 8008f62:	ab03      	add	r3, sp, #12
 8008f64:	4805      	ldr	r0, [pc, #20]	@ (8008f7c <fiprintf+0x20>)
 8008f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	f7ff fca3 	bl	80088b8 <_vfiprintf_r>
 8008f72:	b002      	add	sp, #8
 8008f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f78:	b003      	add	sp, #12
 8008f7a:	4770      	bx	lr
 8008f7c:	2000001c 	.word	0x2000001c

08008f80 <__swhatbuf_r>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	460c      	mov	r4, r1
 8008f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	b096      	sub	sp, #88	@ 0x58
 8008f8c:	4615      	mov	r5, r2
 8008f8e:	461e      	mov	r6, r3
 8008f90:	da0d      	bge.n	8008fae <__swhatbuf_r+0x2e>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f98:	f04f 0100 	mov.w	r1, #0
 8008f9c:	bf14      	ite	ne
 8008f9e:	2340      	movne	r3, #64	@ 0x40
 8008fa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	6031      	str	r1, [r6, #0]
 8008fa8:	602b      	str	r3, [r5, #0]
 8008faa:	b016      	add	sp, #88	@ 0x58
 8008fac:	bd70      	pop	{r4, r5, r6, pc}
 8008fae:	466a      	mov	r2, sp
 8008fb0:	f000 f848 	bl	8009044 <_fstat_r>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	dbec      	blt.n	8008f92 <__swhatbuf_r+0x12>
 8008fb8:	9901      	ldr	r1, [sp, #4]
 8008fba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fc2:	4259      	negs	r1, r3
 8008fc4:	4159      	adcs	r1, r3
 8008fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fca:	e7eb      	b.n	8008fa4 <__swhatbuf_r+0x24>

08008fcc <__smakebuf_r>:
 8008fcc:	898b      	ldrh	r3, [r1, #12]
 8008fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fd0:	079d      	lsls	r5, r3, #30
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	d507      	bpl.n	8008fe8 <__smakebuf_r+0x1c>
 8008fd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	6123      	str	r3, [r4, #16]
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	6163      	str	r3, [r4, #20]
 8008fe4:	b003      	add	sp, #12
 8008fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe8:	ab01      	add	r3, sp, #4
 8008fea:	466a      	mov	r2, sp
 8008fec:	f7ff ffc8 	bl	8008f80 <__swhatbuf_r>
 8008ff0:	9f00      	ldr	r7, [sp, #0]
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7ff fba8 	bl	800874c <_malloc_r>
 8008ffc:	b948      	cbnz	r0, 8009012 <__smakebuf_r+0x46>
 8008ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009002:	059a      	lsls	r2, r3, #22
 8009004:	d4ee      	bmi.n	8008fe4 <__smakebuf_r+0x18>
 8009006:	f023 0303 	bic.w	r3, r3, #3
 800900a:	f043 0302 	orr.w	r3, r3, #2
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	e7e2      	b.n	8008fd8 <__smakebuf_r+0xc>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	6020      	str	r0, [r4, #0]
 8009016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009022:	b15b      	cbz	r3, 800903c <__smakebuf_r+0x70>
 8009024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009028:	4630      	mov	r0, r6
 800902a:	f000 f81d 	bl	8009068 <_isatty_r>
 800902e:	b128      	cbz	r0, 800903c <__smakebuf_r+0x70>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f023 0303 	bic.w	r3, r3, #3
 8009036:	f043 0301 	orr.w	r3, r3, #1
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	431d      	orrs	r5, r3
 8009040:	81a5      	strh	r5, [r4, #12]
 8009042:	e7cf      	b.n	8008fe4 <__smakebuf_r+0x18>

08009044 <_fstat_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d07      	ldr	r5, [pc, #28]	@ (8009064 <_fstat_r+0x20>)
 8009048:	2300      	movs	r3, #0
 800904a:	4604      	mov	r4, r0
 800904c:	4608      	mov	r0, r1
 800904e:	4611      	mov	r1, r2
 8009050:	602b      	str	r3, [r5, #0]
 8009052:	f7f8 fcc1 	bl	80019d8 <_fstat>
 8009056:	1c43      	adds	r3, r0, #1
 8009058:	d102      	bne.n	8009060 <_fstat_r+0x1c>
 800905a:	682b      	ldr	r3, [r5, #0]
 800905c:	b103      	cbz	r3, 8009060 <_fstat_r+0x1c>
 800905e:	6023      	str	r3, [r4, #0]
 8009060:	bd38      	pop	{r3, r4, r5, pc}
 8009062:	bf00      	nop
 8009064:	20005924 	.word	0x20005924

08009068 <_isatty_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d06      	ldr	r5, [pc, #24]	@ (8009084 <_isatty_r+0x1c>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	f7f8 fcc0 	bl	80019f8 <_isatty>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d102      	bne.n	8009082 <_isatty_r+0x1a>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	b103      	cbz	r3, 8009082 <_isatty_r+0x1a>
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	20005924 	.word	0x20005924

08009088 <_sbrk_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d06      	ldr	r5, [pc, #24]	@ (80090a4 <_sbrk_r+0x1c>)
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	f7f8 fcc8 	bl	8001a28 <_sbrk>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_sbrk_r+0x1a>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_sbrk_r+0x1a>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20005924 	.word	0x20005924

080090a8 <abort>:
 80090a8:	b508      	push	{r3, lr}
 80090aa:	2006      	movs	r0, #6
 80090ac:	f000 f82c 	bl	8009108 <raise>
 80090b0:	2001      	movs	r0, #1
 80090b2:	f7f8 fc41 	bl	8001938 <_exit>

080090b6 <_raise_r>:
 80090b6:	291f      	cmp	r1, #31
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4605      	mov	r5, r0
 80090bc:	460c      	mov	r4, r1
 80090be:	d904      	bls.n	80090ca <_raise_r+0x14>
 80090c0:	2316      	movs	r3, #22
 80090c2:	6003      	str	r3, [r0, #0]
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090c8:	bd38      	pop	{r3, r4, r5, pc}
 80090ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090cc:	b112      	cbz	r2, 80090d4 <_raise_r+0x1e>
 80090ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090d2:	b94b      	cbnz	r3, 80090e8 <_raise_r+0x32>
 80090d4:	4628      	mov	r0, r5
 80090d6:	f000 f831 	bl	800913c <_getpid_r>
 80090da:	4622      	mov	r2, r4
 80090dc:	4601      	mov	r1, r0
 80090de:	4628      	mov	r0, r5
 80090e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e4:	f000 b818 	b.w	8009118 <_kill_r>
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d00a      	beq.n	8009102 <_raise_r+0x4c>
 80090ec:	1c59      	adds	r1, r3, #1
 80090ee:	d103      	bne.n	80090f8 <_raise_r+0x42>
 80090f0:	2316      	movs	r3, #22
 80090f2:	6003      	str	r3, [r0, #0]
 80090f4:	2001      	movs	r0, #1
 80090f6:	e7e7      	b.n	80090c8 <_raise_r+0x12>
 80090f8:	2100      	movs	r1, #0
 80090fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090fe:	4620      	mov	r0, r4
 8009100:	4798      	blx	r3
 8009102:	2000      	movs	r0, #0
 8009104:	e7e0      	b.n	80090c8 <_raise_r+0x12>
	...

08009108 <raise>:
 8009108:	4b02      	ldr	r3, [pc, #8]	@ (8009114 <raise+0xc>)
 800910a:	4601      	mov	r1, r0
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	f7ff bfd2 	b.w	80090b6 <_raise_r>
 8009112:	bf00      	nop
 8009114:	2000001c 	.word	0x2000001c

08009118 <_kill_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d07      	ldr	r5, [pc, #28]	@ (8009138 <_kill_r+0x20>)
 800911c:	2300      	movs	r3, #0
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	f7f8 fbf7 	bl	8001918 <_kill>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d102      	bne.n	8009134 <_kill_r+0x1c>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	b103      	cbz	r3, 8009134 <_kill_r+0x1c>
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	bd38      	pop	{r3, r4, r5, pc}
 8009136:	bf00      	nop
 8009138:	20005924 	.word	0x20005924

0800913c <_getpid_r>:
 800913c:	f7f8 bbe4 	b.w	8001908 <_getpid>

08009140 <_gettimeofday>:
 8009140:	4b02      	ldr	r3, [pc, #8]	@ (800914c <_gettimeofday+0xc>)
 8009142:	2258      	movs	r2, #88	@ 0x58
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800914a:	4770      	bx	lr
 800914c:	20005924 	.word	0x20005924

08009150 <_init>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr

0800915c <_fini>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	bf00      	nop
 8009160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009162:	bc08      	pop	{r3}
 8009164:	469e      	mov	lr, r3
 8009166:	4770      	bx	lr
